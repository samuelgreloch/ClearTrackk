import { confirm, input, password } from '@inquirer/prompts';
/**
 * Wrapper for prompter library
 * Because @inquirer/prompts library set the methods as non-configurable, we cannot mock the methods directly.
 * see details: https://github.com/orgs/nodejs/discussions/47959
 */
export class AmplifyPrompter {
    /**
     * A confirm style prompt. Styles question as `y/N`
     * @param options for displaying the prompt
     * @param options.message display for the prompt
     * @param options.defaultValue if user submits without typing anything. Defaults false
     * @returns the boolean answer
     */
    static yesOrNo = async (options) => {
        const response = await confirm({
            message: options.message,
            transformer: (value) => (value ? 'y' : 'N'),
            default: options.defaultValue ?? false,
        });
        return response;
    };
    /**
     * A secret prompt.
     */
    static secretValue = async (promptMessage = 'Enter secret value') => {
        return await password({
            message: promptMessage,
            validate: (val) => val && val.length > 0 ? true : 'Cannot be empty',
        });
    };
    /**
     * An input style prompt.
     * @param options for displaying the prompt
     * @param options.message display for the prompt
     * @param options.defaultValue if user submits without typing anything. Default: "."
     * @param options.required if the user input is required, incompatible with options.defaultValue
     * @returns Promise<string> the user input
     */
    static input = async (options) => {
        if (options.required) {
            return input({
                message: options.message,
                validate: (val) => val && val.length > 0 ? true : 'Cannot be empty',
            });
        }
        return input({
            message: options.message,
            default: options.defaultValue ?? '',
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW1wbGlmeV9wcm9tcHRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3Byb21wdGVyL2FtcGxpZnlfcHJvbXB0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUU3RDs7OztHQUlHO0FBQ0gsTUFBTSxPQUFPLGVBQWU7SUFDMUI7Ozs7OztPQU1HO0lBQ0gsTUFBTSxDQUFDLE9BQU8sR0FBRyxLQUFLLEVBQUUsT0FHdkIsRUFBb0IsRUFBRTtRQUNyQixNQUFNLFFBQVEsR0FBRyxNQUFNLE9BQU8sQ0FBQztZQUM3QixPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU87WUFDeEIsV0FBVyxFQUFFLENBQUMsS0FBYyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7WUFDcEQsT0FBTyxFQUFFLE9BQU8sQ0FBQyxZQUFZLElBQUksS0FBSztTQUN2QyxDQUFDLENBQUM7UUFDSCxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDLENBQUM7SUFFRjs7T0FFRztJQUNILE1BQU0sQ0FBQyxXQUFXLEdBQUcsS0FBSyxFQUN4QixhQUFhLEdBQUcsb0JBQW9CLEVBQ25CLEVBQUU7UUFDbkIsT0FBTyxNQUFNLFFBQVEsQ0FBQztZQUNwQixPQUFPLEVBQUUsYUFBYTtZQUN0QixRQUFRLEVBQUUsQ0FBQyxHQUFXLEVBQUUsRUFBRSxDQUN4QixHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsaUJBQWlCO1NBQ25ELENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztJQUVGOzs7Ozs7O09BT0c7SUFDSCxNQUFNLENBQUMsS0FBSyxHQUFHLEtBQUssRUFDbEIsT0FVSyxFQUNZLEVBQUU7UUFDbkIsSUFBSSxPQUFPLENBQUMsUUFBUSxFQUFFO1lBQ3BCLE9BQU8sS0FBSyxDQUFDO2dCQUNYLE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTztnQkFDeEIsUUFBUSxFQUFFLENBQUMsR0FBVyxFQUFFLEVBQUUsQ0FDeEIsR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGlCQUFpQjthQUNuRCxDQUFDLENBQUM7U0FDSjtRQUNELE9BQU8sS0FBSyxDQUFDO1lBQ1gsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPO1lBQ3hCLE9BQU8sRUFBRSxPQUFPLENBQUMsWUFBWSxJQUFJLEVBQUU7U0FDcEMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29uZmlybSwgaW5wdXQsIHBhc3N3b3JkIH0gZnJvbSAnQGlucXVpcmVyL3Byb21wdHMnO1xuXG4vKipcbiAqIFdyYXBwZXIgZm9yIHByb21wdGVyIGxpYnJhcnlcbiAqIEJlY2F1c2UgQGlucXVpcmVyL3Byb21wdHMgbGlicmFyeSBzZXQgdGhlIG1ldGhvZHMgYXMgbm9uLWNvbmZpZ3VyYWJsZSwgd2UgY2Fubm90IG1vY2sgdGhlIG1ldGhvZHMgZGlyZWN0bHkuXG4gKiBzZWUgZGV0YWlsczogaHR0cHM6Ly9naXRodWIuY29tL29yZ3Mvbm9kZWpzL2Rpc2N1c3Npb25zLzQ3OTU5XG4gKi9cbmV4cG9ydCBjbGFzcyBBbXBsaWZ5UHJvbXB0ZXIge1xuICAvKipcbiAgICogQSBjb25maXJtIHN0eWxlIHByb21wdC4gU3R5bGVzIHF1ZXN0aW9uIGFzIGB5L05gXG4gICAqIEBwYXJhbSBvcHRpb25zIGZvciBkaXNwbGF5aW5nIHRoZSBwcm9tcHRcbiAgICogQHBhcmFtIG9wdGlvbnMubWVzc2FnZSBkaXNwbGF5IGZvciB0aGUgcHJvbXB0XG4gICAqIEBwYXJhbSBvcHRpb25zLmRlZmF1bHRWYWx1ZSBpZiB1c2VyIHN1Ym1pdHMgd2l0aG91dCB0eXBpbmcgYW55dGhpbmcuIERlZmF1bHRzIGZhbHNlXG4gICAqIEByZXR1cm5zIHRoZSBib29sZWFuIGFuc3dlclxuICAgKi9cbiAgc3RhdGljIHllc09yTm8gPSBhc3luYyAob3B0aW9uczoge1xuICAgIG1lc3NhZ2U6IHN0cmluZztcbiAgICBkZWZhdWx0VmFsdWU/OiBib29sZWFuO1xuICB9KTogUHJvbWlzZTxib29sZWFuPiA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjb25maXJtKHtcbiAgICAgIG1lc3NhZ2U6IG9wdGlvbnMubWVzc2FnZSxcbiAgICAgIHRyYW5zZm9ybWVyOiAodmFsdWU6IGJvb2xlYW4pID0+ICh2YWx1ZSA/ICd5JyA6ICdOJyksXG4gICAgICBkZWZhdWx0OiBvcHRpb25zLmRlZmF1bHRWYWx1ZSA/PyBmYWxzZSxcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIEEgc2VjcmV0IHByb21wdC5cbiAgICovXG4gIHN0YXRpYyBzZWNyZXRWYWx1ZSA9IGFzeW5jIChcbiAgICBwcm9tcHRNZXNzYWdlID0gJ0VudGVyIHNlY3JldCB2YWx1ZSdcbiAgKTogUHJvbWlzZTxzdHJpbmc+ID0+IHtcbiAgICByZXR1cm4gYXdhaXQgcGFzc3dvcmQoe1xuICAgICAgbWVzc2FnZTogcHJvbXB0TWVzc2FnZSxcbiAgICAgIHZhbGlkYXRlOiAodmFsOiBzdHJpbmcpID0+XG4gICAgICAgIHZhbCAmJiB2YWwubGVuZ3RoID4gMCA/IHRydWUgOiAnQ2Fubm90IGJlIGVtcHR5JyxcbiAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICogQW4gaW5wdXQgc3R5bGUgcHJvbXB0LlxuICAgKiBAcGFyYW0gb3B0aW9ucyBmb3IgZGlzcGxheWluZyB0aGUgcHJvbXB0XG4gICAqIEBwYXJhbSBvcHRpb25zLm1lc3NhZ2UgZGlzcGxheSBmb3IgdGhlIHByb21wdFxuICAgKiBAcGFyYW0gb3B0aW9ucy5kZWZhdWx0VmFsdWUgaWYgdXNlciBzdWJtaXRzIHdpdGhvdXQgdHlwaW5nIGFueXRoaW5nLiBEZWZhdWx0OiBcIi5cIlxuICAgKiBAcGFyYW0gb3B0aW9ucy5yZXF1aXJlZCBpZiB0aGUgdXNlciBpbnB1dCBpcyByZXF1aXJlZCwgaW5jb21wYXRpYmxlIHdpdGggb3B0aW9ucy5kZWZhdWx0VmFsdWVcbiAgICogQHJldHVybnMgUHJvbWlzZTxzdHJpbmc+IHRoZSB1c2VyIGlucHV0XG4gICAqL1xuICBzdGF0aWMgaW5wdXQgPSBhc3luYyAoXG4gICAgb3B0aW9uczpcbiAgICAgIHwge1xuICAgICAgICAgIG1lc3NhZ2U6IHN0cmluZztcbiAgICAgICAgICByZXF1aXJlZD86IG5ldmVyO1xuICAgICAgICAgIGRlZmF1bHRWYWx1ZT86IHN0cmluZztcbiAgICAgICAgfVxuICAgICAgfCB7XG4gICAgICAgICAgbWVzc2FnZTogc3RyaW5nO1xuICAgICAgICAgIHJlcXVpcmVkOiB0cnVlO1xuICAgICAgICAgIGRlZmF1bHRWYWx1ZT86IG5ldmVyO1xuICAgICAgICB9XG4gICk6IFByb21pc2U8c3RyaW5nPiA9PiB7XG4gICAgaWYgKG9wdGlvbnMucmVxdWlyZWQpIHtcbiAgICAgIHJldHVybiBpbnB1dCh7XG4gICAgICAgIG1lc3NhZ2U6IG9wdGlvbnMubWVzc2FnZSxcbiAgICAgICAgdmFsaWRhdGU6ICh2YWw6IHN0cmluZykgPT5cbiAgICAgICAgICB2YWwgJiYgdmFsLmxlbmd0aCA+IDAgPyB0cnVlIDogJ0Nhbm5vdCBiZSBlbXB0eScsXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGlucHV0KHtcbiAgICAgIG1lc3NhZ2U6IG9wdGlvbnMubWVzc2FnZSxcbiAgICAgIGRlZmF1bHQ6IG9wdGlvbnMuZGVmYXVsdFZhbHVlID8/ICcnLFxuICAgIH0pO1xuICB9O1xufVxuIl19