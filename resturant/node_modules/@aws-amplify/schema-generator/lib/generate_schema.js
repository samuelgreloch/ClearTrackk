import { EmptySchemaError, InvalidSchemaError, TypescriptDataSchemaGenerator, } from '@aws-amplify/graphql-schema-generator';
import fs from 'fs/promises';
import { AmplifyUserError } from '@aws-amplify/platform-core';
/**
 * Schema generator class.
 */
export class SchemaGenerator {
    generate = async (props) => {
        const dbConfig = parseDatabaseUrl(props.connectionUri.value);
        try {
            const schema = await TypescriptDataSchemaGenerator.generate({
                ...dbConfig,
                connectionUriSecretName: props.connectionUri.secretName,
                ...(props.sslCert &&
                    props.sslCert.secretName && {
                    sslCertificateSecretName: props.sslCert.secretName,
                    sslCertificate: props.sslCert.value,
                }),
            });
            await fs.writeFile(props.out, schema);
        }
        catch (err) {
            if (err instanceof EmptySchemaError ||
                err instanceof InvalidSchemaError) {
                throw new AmplifyUserError('DatabaseSchemaError', {
                    // the message already contains descriptive error.
                    message: err.message,
                    resolution: 'Check the database schema.',
                }, err);
            }
            const databaseError = err;
            if (databaseError.code === 'ETIMEDOUT') {
                throw new AmplifyUserError('DatabaseConnectionError', {
                    message: `Unable to connect to the database at ${dbConfig.host}:${dbConfig.port}. `,
                    resolution: 'Check if the credentials are correct. Also, check if the database is running and accessible from the network.',
                }, databaseError);
            }
            throw err;
        }
    };
}
const DEFAULT_ENGINE = 'mysql';
/**
 * Error for database connection failures.
 * This class is intended to be used for casting database connection errors.
 * Do not create instances of this class directly.
 */
class DatabaseConnectError extends Error {
    code;
    /**
     * Creates database connection error.
     */
    constructor(code) {
        super(`Database connection error: ${code}`);
        this.code = code;
    }
}
/**
 * Parses database URL into a configuration object.
 */
export const parseDatabaseUrl = (databaseUrl) => {
    try {
        const parsedDatabaseUrl = new URL(databaseUrl);
        const { username: encodedUsername, password: encodedPassword, hostname: encodedHost, } = parsedDatabaseUrl;
        const username = decodeURIComponent(encodedUsername);
        const password = decodeURIComponent(encodedPassword);
        const host = decodeURIComponent(encodedHost);
        const database = decodeURIComponent(parsedDatabaseUrl?.pathname?.slice(1));
        // Default engine is MySQL
        const engine = constructDBEngine(parsedDatabaseUrl?.protocol?.slice(0, -1) ?? DEFAULT_ENGINE);
        const port = parsedDatabaseUrl?.port
            ? parseInt(parsedDatabaseUrl?.port, 10)
            : getDefaultPort(engine);
        const config = {
            engine,
            username,
            password,
            database,
            host,
            port,
        };
        const missingParts = Object.keys(config).filter((part) => !config[part]);
        if (missingParts.length > 0) {
            throw new AmplifyUserError('DatabaseUrlParseError', {
                message: `One or more parts of the database URL is missing. Missing [${missingParts.join(', ')}].`,
                resolution: 'Ensure the database URL follows the pattern "[mysql|postgresql]://username:password@hostname:port/database".',
            });
        }
        return config;
    }
    catch (err) {
        const error = err;
        throw new AmplifyUserError('DatabaseUrlParseError', {
            message: `Unable to parse the database URL. ${error.message}`,
            resolution: 'Check if the database URL is correct and accessible.',
        }, error);
    }
};
const constructDBEngine = (engine) => {
    switch (engine) {
        case 'mysql':
            return 'mysql';
        case 'postgresql':
        case 'postgres':
            return 'postgresql';
        default:
            throw new AmplifyUserError('DatabaseUnsupportedEngineError', {
                message: `Unsupported database engine: ${engine}`,
                resolution: 'Ensure that database URL specifies supported engine. Supported engines are "mysql", "postgresql", "postgres".',
            });
    }
};
const getDefaultPort = (engine) => {
    switch (engine) {
        case 'mysql':
            return 3306;
        case 'postgresql':
            return 5432;
    }
};
//# sourceMappingURL=data:application/json;base64,