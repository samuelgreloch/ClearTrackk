"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConversationHandlerFunction = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const aws_lambda_1 = require("aws-cdk-lib/aws-lambda");
const aws_lambda_nodejs_1 = require("aws-cdk-lib/aws-lambda-nodejs");
const aws_logs_1 = require("aws-cdk-lib/aws-logs");
const constructs_1 = require("constructs");
const path_1 = __importDefault(require("path"));
const platform_core_1 = require("@aws-amplify/platform-core");
const backend_output_schemas_1 = require("@aws-amplify/backend-output-schemas");
const resourcesRoot = path_1.default.normalize(path_1.default.join(__dirname, 'runtime'));
const defaultHandlerFilePath = path_1.default.join(resourcesRoot, 'default_handler.js');
/**
 * Conversation Handler Function CDK construct.
 * This construct deploys resources that integrate conversation routes
 * defined in data schema with AI models available in AWS Bedrock. I.e.
 * 1. AWS Lambda function that handles conversation turn events.
 *    With Amplify provided implementation by default and option to specify
 *    custom handler.
 * 2. AWS CloudWatch log group policy with appropriate data protection policies.
 * 3. AWS IAM policy that grants access to selected AWS Bedrock models.
 */
class ConversationHandlerFunction extends constructs_1.Construct {
    /**
     * Creates Conversation Handler Function CDK construct.
     */
    constructor(scope, id, props) {
        var _a;
        super(scope, id);
        this.props = props;
        /**
         * Append conversation handler to defined functions.
         */
        this.storeOutput = (outputStorageStrategy) => {
            outputStorageStrategy === null || outputStorageStrategy === void 0 ? void 0 : outputStorageStrategy.appendToBackendOutputList(backend_output_schemas_1.aiConversationOutputKey, {
                version: '1',
                payload: {
                    definedConversationHandlers: this.resources.lambda.functionName,
                },
            });
        };
        this.resolveMemory = () => {
            const memoryMin = 128;
            const memoryMax = 10240;
            const memoryDefault = 512;
            if (this.props.memoryMB === undefined) {
                return memoryDefault;
            }
            if (!isWholeNumberBetweenInclusive(this.props.memoryMB, memoryMin, memoryMax)) {
                throw new Error(`memoryMB must be a whole number between ${memoryMin} and ${memoryMax} inclusive`);
            }
            return this.props.memoryMB;
        };
        if (this.props.entry && !path_1.default.isAbsolute(this.props.entry)) {
            throw new Error('Entry must be absolute path');
        }
        aws_cdk_lib_1.Tags.of(this).add(platform_core_1.TagName.FRIENDLY_NAME, id);
        const conversationHandler = new aws_lambda_nodejs_1.NodejsFunction(this, `conversationHandlerFunction`, {
            runtime: aws_lambda_1.Runtime.NODEJS_18_X,
            timeout: aws_cdk_lib_1.Duration.seconds(60),
            entry: (_a = this.props.entry) !== null && _a !== void 0 ? _a : defaultHandlerFilePath,
            handler: 'handler',
            memorySize: this.resolveMemory(),
            bundling: {
                // Do not bundle SDK if conversation handler is using our default implementation which is
                // compatible with Lambda provided SDK.
                // For custom entry we do bundle SDK as we can't control version customer is coding against.
                bundleAwsSDK: !!this.props.entry,
            },
            loggingFormat: aws_lambda_1.LoggingFormat.JSON,
            logGroup: new aws_logs_1.LogGroup(this, 'conversationHandlerFunctionLogGroup', {
                retention: aws_logs_1.RetentionDays.INFINITE,
                dataProtectionPolicy: new aws_logs_1.DataProtectionPolicy({
                    identifiers: [
                        new aws_logs_1.CustomDataIdentifier('JWTToken', 'ey[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*'),
                    ],
                }),
            }),
        });
        if (this.props.models && this.props.models.length > 0) {
            const resources = this.props.models.map((model) => {
                var _a;
                return `arn:aws:bedrock:${(_a = model.region) !== null && _a !== void 0 ? _a : aws_cdk_lib_1.Stack.of(this).region}::foundation-model/${model.modelId}`;
            });
            conversationHandler.addToRolePolicy(new aws_iam_1.PolicyStatement({
                effect: aws_iam_1.Effect.ALLOW,
                actions: [
                    'bedrock:InvokeModel',
                    'bedrock:InvokeModelWithResponseStream',
                ],
                resources,
            }));
        }
        this.resources = {
            lambda: conversationHandler,
            cfnResources: {
                cfnFunction: conversationHandler.node.findChild('Resource'),
            },
        };
        this.storeOutput(this.props.outputStorageStrategy);
    }
}
exports.ConversationHandlerFunction = ConversationHandlerFunction;
ConversationHandlerFunction.eventVersion = '1.0';
const isWholeNumberBetweenInclusive = (test, min, max) => min <= test && test <= max && test % 1 === 0;
//# sourceMappingURL=data:application/json;base64,