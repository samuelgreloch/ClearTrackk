// Versions of config schemas supported by this package version
import { AuthClientConfigContributorV1_1 as Auth1_1, AuthClientConfigContributor as Auth1_3, CustomClientConfigContributor as Custom1_1, DataClientConfigContributor as Data1_1, StorageClientConfigContributorV1 as Storage1, StorageClientConfigContributorV1_1 as Storage1_1, StorageClientConfigContributor as Storage1_2, VersionContributor as VersionContributor1_3, VersionContributorV1, VersionContributorV1_1, VersionContributorV1_2, } from './client_config_contributor_v1.js';
import { ClientConfigVersionOption, } from '../client-config-types/client_config.js';
/**
 * Factory to generate client config contributors for client config schema given a version
 */
export class ClientConfigContributorFactory {
    modelIntrospectionSchemaAdapter;
    versionedClientConfigContributors;
    /**
     * Creates a list of all contributors available and caches it.
     */
    constructor(modelIntrospectionSchemaAdapter) {
        this.modelIntrospectionSchemaAdapter = modelIntrospectionSchemaAdapter;
        this.versionedClientConfigContributors = {
            [ClientConfigVersionOption.V1_3]: [
                new Auth1_3(),
                new Data1_1(this.modelIntrospectionSchemaAdapter),
                new Storage1_2(),
                new VersionContributor1_3(),
                new Custom1_1(),
            ],
            [ClientConfigVersionOption.V1_2]: [
                new Auth1_1(),
                new Data1_1(this.modelIntrospectionSchemaAdapter),
                new Storage1_2(),
                new VersionContributorV1_2(),
                new Custom1_1(),
            ],
            [ClientConfigVersionOption.V1_1]: [
                new Auth1_1(),
                new Data1_1(this.modelIntrospectionSchemaAdapter),
                new Storage1_1(),
                new VersionContributorV1_1(),
                new Custom1_1(),
            ],
            // Except for storage and version, other contributors are same as V1
            [ClientConfigVersionOption.V1]: [
                new Auth1_1(),
                new Data1_1(this.modelIntrospectionSchemaAdapter),
                new Storage1(),
                new VersionContributorV1(),
                new Custom1_1(),
            ],
            // Legacy config is derived from V1.3 (latest) of unified default config
            [ClientConfigVersionOption.V0]: [
                new Auth1_1(),
                new Data1_1(this.modelIntrospectionSchemaAdapter),
                new Storage1_2(),
                new VersionContributor1_3(),
                new Custom1_1(),
            ],
        };
    }
    /**
     * Return all the contributors for the given version
     */
    getContributors(version) {
        return this.versionedClientConfigContributors[version];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50X2NvbmZpZ19jb250cmlidXRvcl9mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NsaWVudC1jb25maWctY29udHJpYnV0b3IvY2xpZW50X2NvbmZpZ19jb250cmlidXRvcl9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLCtEQUErRDtBQUMvRCxPQUFPLEVBQ0wsK0JBQStCLElBQUksT0FBTyxFQUMxQywyQkFBMkIsSUFBSSxPQUFPLEVBQ3RDLDZCQUE2QixJQUFJLFNBQVMsRUFDMUMsMkJBQTJCLElBQUksT0FBTyxFQUN0QyxnQ0FBZ0MsSUFBSSxRQUFRLEVBQzVDLGtDQUFrQyxJQUFJLFVBQVUsRUFDaEQsOEJBQThCLElBQUksVUFBVSxFQUM1QyxrQkFBa0IsSUFBSSxxQkFBcUIsRUFDM0Msb0JBQW9CLEVBQ3BCLHNCQUFzQixFQUN0QixzQkFBc0IsR0FDdkIsTUFBTSxtQ0FBbUMsQ0FBQztBQUkzQyxPQUFPLEVBRUwseUJBQXlCLEdBQzFCLE1BQU0seUNBQXlDLENBQUM7QUFDakQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sOEJBQThCO0lBVXRCO0lBVG5CLGlDQUFpQyxDQUcvQjtJQUVGOztPQUVHO0lBQ0gsWUFDbUIsK0JBQWdFO1FBQWhFLG9DQUErQixHQUEvQiwrQkFBK0IsQ0FBaUM7UUFFakYsSUFBSSxDQUFDLGlDQUFpQyxHQUFHO1lBQ3ZDLENBQUMseUJBQXlCLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ2hDLElBQUksT0FBTyxFQUFFO2dCQUNiLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQywrQkFBK0IsQ0FBQztnQkFDakQsSUFBSSxVQUFVLEVBQUU7Z0JBQ2hCLElBQUkscUJBQXFCLEVBQUU7Z0JBQzNCLElBQUksU0FBUyxFQUFFO2FBQ2hCO1lBRUQsQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDaEMsSUFBSSxPQUFPLEVBQUU7Z0JBQ2IsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLCtCQUErQixDQUFDO2dCQUNqRCxJQUFJLFVBQVUsRUFBRTtnQkFDaEIsSUFBSSxzQkFBc0IsRUFBRTtnQkFDNUIsSUFBSSxTQUFTLEVBQUU7YUFDaEI7WUFFRCxDQUFDLHlCQUF5QixDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUNoQyxJQUFJLE9BQU8sRUFBRTtnQkFDYixJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsK0JBQStCLENBQUM7Z0JBQ2pELElBQUksVUFBVSxFQUFFO2dCQUNoQixJQUFJLHNCQUFzQixFQUFFO2dCQUM1QixJQUFJLFNBQVMsRUFBRTthQUNoQjtZQUVELG9FQUFvRTtZQUNwRSxDQUFDLHlCQUF5QixDQUFDLEVBQUUsQ0FBQyxFQUFFO2dCQUM5QixJQUFJLE9BQU8sRUFBRTtnQkFDYixJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsK0JBQStCLENBQUM7Z0JBQ2pELElBQUksUUFBUSxFQUFFO2dCQUNkLElBQUksb0JBQW9CLEVBQUU7Z0JBQzFCLElBQUksU0FBUyxFQUFFO2FBQ2hCO1lBRUQsd0VBQXdFO1lBQ3hFLENBQUMseUJBQXlCLENBQUMsRUFBRSxDQUFDLEVBQUU7Z0JBQzlCLElBQUksT0FBTyxFQUFFO2dCQUNiLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQywrQkFBK0IsQ0FBQztnQkFDakQsSUFBSSxVQUFVLEVBQUU7Z0JBQ2hCLElBQUkscUJBQXFCLEVBQUU7Z0JBQzNCLElBQUksU0FBUyxFQUFFO2FBQ2hCO1NBQ0YsQ0FBQztJQUNKLENBQUM7SUFFRDs7T0FFRztJQUNILGVBQWUsQ0FBQyxPQUE0QjtRQUMxQyxPQUFPLElBQUksQ0FBQyxpQ0FBaUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN6RCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBWZXJzaW9ucyBvZiBjb25maWcgc2NoZW1hcyBzdXBwb3J0ZWQgYnkgdGhpcyBwYWNrYWdlIHZlcnNpb25cbmltcG9ydCB7XG4gIEF1dGhDbGllbnRDb25maWdDb250cmlidXRvclYxXzEgYXMgQXV0aDFfMSxcbiAgQXV0aENsaWVudENvbmZpZ0NvbnRyaWJ1dG9yIGFzIEF1dGgxXzMsXG4gIEN1c3RvbUNsaWVudENvbmZpZ0NvbnRyaWJ1dG9yIGFzIEN1c3RvbTFfMSxcbiAgRGF0YUNsaWVudENvbmZpZ0NvbnRyaWJ1dG9yIGFzIERhdGExXzEsXG4gIFN0b3JhZ2VDbGllbnRDb25maWdDb250cmlidXRvclYxIGFzIFN0b3JhZ2UxLFxuICBTdG9yYWdlQ2xpZW50Q29uZmlnQ29udHJpYnV0b3JWMV8xIGFzIFN0b3JhZ2UxXzEsXG4gIFN0b3JhZ2VDbGllbnRDb25maWdDb250cmlidXRvciBhcyBTdG9yYWdlMV8yLFxuICBWZXJzaW9uQ29udHJpYnV0b3IgYXMgVmVyc2lvbkNvbnRyaWJ1dG9yMV8zLFxuICBWZXJzaW9uQ29udHJpYnV0b3JWMSxcbiAgVmVyc2lvbkNvbnRyaWJ1dG9yVjFfMSxcbiAgVmVyc2lvbkNvbnRyaWJ1dG9yVjFfMixcbn0gZnJvbSAnLi9jbGllbnRfY29uZmlnX2NvbnRyaWJ1dG9yX3YxLmpzJztcblxuaW1wb3J0IHsgQ2xpZW50Q29uZmlnQ29udHJpYnV0b3IgfSBmcm9tICcuLi9jbGllbnQtY29uZmlnLXR5cGVzL2NsaWVudF9jb25maWdfY29udHJpYnV0b3IuanMnO1xuaW1wb3J0IHsgTW9kZWxJbnRyb3NwZWN0aW9uU2NoZW1hQWRhcHRlciB9IGZyb20gJy4uL21vZGVsX2ludHJvc3BlY3Rpb25fc2NoZW1hX2FkYXB0ZXIuanMnO1xuaW1wb3J0IHtcbiAgQ2xpZW50Q29uZmlnVmVyc2lvbixcbiAgQ2xpZW50Q29uZmlnVmVyc2lvbk9wdGlvbixcbn0gZnJvbSAnLi4vY2xpZW50LWNvbmZpZy10eXBlcy9jbGllbnRfY29uZmlnLmpzJztcbi8qKlxuICogRmFjdG9yeSB0byBnZW5lcmF0ZSBjbGllbnQgY29uZmlnIGNvbnRyaWJ1dG9ycyBmb3IgY2xpZW50IGNvbmZpZyBzY2hlbWEgZ2l2ZW4gYSB2ZXJzaW9uXG4gKi9cbmV4cG9ydCBjbGFzcyBDbGllbnRDb25maWdDb250cmlidXRvckZhY3Rvcnkge1xuICB2ZXJzaW9uZWRDbGllbnRDb25maWdDb250cmlidXRvcnM6IFJlY29yZDxcbiAgICBDbGllbnRDb25maWdWZXJzaW9uLFxuICAgIENsaWVudENvbmZpZ0NvbnRyaWJ1dG9yW11cbiAgPjtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIGxpc3Qgb2YgYWxsIGNvbnRyaWJ1dG9ycyBhdmFpbGFibGUgYW5kIGNhY2hlcyBpdC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgbW9kZWxJbnRyb3NwZWN0aW9uU2NoZW1hQWRhcHRlcjogTW9kZWxJbnRyb3NwZWN0aW9uU2NoZW1hQWRhcHRlclxuICApIHtcbiAgICB0aGlzLnZlcnNpb25lZENsaWVudENvbmZpZ0NvbnRyaWJ1dG9ycyA9IHtcbiAgICAgIFtDbGllbnRDb25maWdWZXJzaW9uT3B0aW9uLlYxXzNdOiBbXG4gICAgICAgIG5ldyBBdXRoMV8zKCksXG4gICAgICAgIG5ldyBEYXRhMV8xKHRoaXMubW9kZWxJbnRyb3NwZWN0aW9uU2NoZW1hQWRhcHRlciksXG4gICAgICAgIG5ldyBTdG9yYWdlMV8yKCksXG4gICAgICAgIG5ldyBWZXJzaW9uQ29udHJpYnV0b3IxXzMoKSxcbiAgICAgICAgbmV3IEN1c3RvbTFfMSgpLFxuICAgICAgXSxcblxuICAgICAgW0NsaWVudENvbmZpZ1ZlcnNpb25PcHRpb24uVjFfMl06IFtcbiAgICAgICAgbmV3IEF1dGgxXzEoKSxcbiAgICAgICAgbmV3IERhdGExXzEodGhpcy5tb2RlbEludHJvc3BlY3Rpb25TY2hlbWFBZGFwdGVyKSxcbiAgICAgICAgbmV3IFN0b3JhZ2UxXzIoKSxcbiAgICAgICAgbmV3IFZlcnNpb25Db250cmlidXRvclYxXzIoKSxcbiAgICAgICAgbmV3IEN1c3RvbTFfMSgpLFxuICAgICAgXSxcblxuICAgICAgW0NsaWVudENvbmZpZ1ZlcnNpb25PcHRpb24uVjFfMV06IFtcbiAgICAgICAgbmV3IEF1dGgxXzEoKSxcbiAgICAgICAgbmV3IERhdGExXzEodGhpcy5tb2RlbEludHJvc3BlY3Rpb25TY2hlbWFBZGFwdGVyKSxcbiAgICAgICAgbmV3IFN0b3JhZ2UxXzEoKSxcbiAgICAgICAgbmV3IFZlcnNpb25Db250cmlidXRvclYxXzEoKSxcbiAgICAgICAgbmV3IEN1c3RvbTFfMSgpLFxuICAgICAgXSxcblxuICAgICAgLy8gRXhjZXB0IGZvciBzdG9yYWdlIGFuZCB2ZXJzaW9uLCBvdGhlciBjb250cmlidXRvcnMgYXJlIHNhbWUgYXMgVjFcbiAgICAgIFtDbGllbnRDb25maWdWZXJzaW9uT3B0aW9uLlYxXTogW1xuICAgICAgICBuZXcgQXV0aDFfMSgpLFxuICAgICAgICBuZXcgRGF0YTFfMSh0aGlzLm1vZGVsSW50cm9zcGVjdGlvblNjaGVtYUFkYXB0ZXIpLFxuICAgICAgICBuZXcgU3RvcmFnZTEoKSxcbiAgICAgICAgbmV3IFZlcnNpb25Db250cmlidXRvclYxKCksXG4gICAgICAgIG5ldyBDdXN0b20xXzEoKSxcbiAgICAgIF0sXG5cbiAgICAgIC8vIExlZ2FjeSBjb25maWcgaXMgZGVyaXZlZCBmcm9tIFYxLjMgKGxhdGVzdCkgb2YgdW5pZmllZCBkZWZhdWx0IGNvbmZpZ1xuICAgICAgW0NsaWVudENvbmZpZ1ZlcnNpb25PcHRpb24uVjBdOiBbXG4gICAgICAgIG5ldyBBdXRoMV8xKCksXG4gICAgICAgIG5ldyBEYXRhMV8xKHRoaXMubW9kZWxJbnRyb3NwZWN0aW9uU2NoZW1hQWRhcHRlciksXG4gICAgICAgIG5ldyBTdG9yYWdlMV8yKCksXG4gICAgICAgIG5ldyBWZXJzaW9uQ29udHJpYnV0b3IxXzMoKSxcbiAgICAgICAgbmV3IEN1c3RvbTFfMSgpLFxuICAgICAgXSxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBhbGwgdGhlIGNvbnRyaWJ1dG9ycyBmb3IgdGhlIGdpdmVuIHZlcnNpb25cbiAgICovXG4gIGdldENvbnRyaWJ1dG9ycyh2ZXJzaW9uOiBDbGllbnRDb25maWdWZXJzaW9uKSB7XG4gICAgcmV0dXJuIHRoaXMudmVyc2lvbmVkQ2xpZW50Q29uZmlnQ29udHJpYnV0b3JzW3ZlcnNpb25dO1xuICB9XG59XG4iXX0=