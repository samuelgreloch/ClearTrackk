import { Stack } from 'aws-cdk-lib';
import { Policy, PolicyStatement } from 'aws-cdk-lib/aws-iam';
/**
 * Generates policies for accessing an AppSync GraphQL API
 */
export class AppSyncPolicyGenerator {
    graphqlApi;
    modelIntrospectionSchemaArn;
    stack;
    policyPrefix = 'GraphqlAccessPolicy';
    policyCount = 1;
    /**
     * Initialize with the GraphqlAPI that the policies will be scoped to
     */
    constructor(graphqlApi, modelIntrospectionSchemaArn) {
        this.graphqlApi = graphqlApi;
        this.modelIntrospectionSchemaArn = modelIntrospectionSchemaArn;
        this.stack = Stack.of(graphqlApi);
    }
    /**
     * Generates a policy that grants GraphQL data-plane access to the provided actions
     *
     * The naming is a bit wonky here because the IAM action is always "appsync:GraphQL".
     * The input "action" maps to the "type" in the resource name part of the ARN which is "Query", "Mutation" or "Subscription"
     */
    generateGraphqlAccessPolicy(actions) {
        const resources = actions
            // convert from actions to GraphQL Type
            .map((action) => actionToTypeMap[action])
            // convert Type to resourceName
            .map((type) => [this.graphqlApi.arn, 'types', type, '*'].join('/'));
        const statements = [
            new PolicyStatement({
                actions: ['appsync:GraphQL'],
                resources,
            }),
        ];
        if (this.modelIntrospectionSchemaArn) {
            statements.push(new PolicyStatement({
                actions: ['s3:GetObject'],
                resources: [this.modelIntrospectionSchemaArn],
            }));
        }
        return new Policy(this.stack, `${this.policyPrefix}${this.policyCount++}`, {
            statements,
        });
    }
}
const actionToTypeMap = {
    query: 'Query',
    mutate: 'Mutation',
    listen: 'Subscription',
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwX3N5bmNfcG9saWN5X2dlbmVyYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9hcHBfc3luY19wb2xpY3lfZ2VuZXJhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFcEMsT0FBTyxFQUFFLE1BQU0sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUk5RDs7R0FFRztBQUNILE1BQU0sT0FBTyxzQkFBc0I7SUFRZDtJQUNBO0lBUkYsS0FBSyxDQUFRO0lBQ2IsWUFBWSxHQUFHLHFCQUFxQixDQUFDO0lBQzlDLFdBQVcsR0FBRyxDQUFDLENBQUM7SUFDeEI7O09BRUc7SUFDSCxZQUNtQixVQUF1QixFQUN2QiwyQkFBb0M7UUFEcEMsZUFBVSxHQUFWLFVBQVUsQ0FBYTtRQUN2QixnQ0FBMkIsR0FBM0IsMkJBQTJCLENBQVM7UUFFckQsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFDRDs7Ozs7T0FLRztJQUNILDJCQUEyQixDQUFDLE9BQTJCO1FBQ3JELE1BQU0sU0FBUyxHQUFHLE9BQU87WUFDdkIsdUNBQXVDO2FBQ3RDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3pDLCtCQUErQjthQUM5QixHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUV0RSxNQUFNLFVBQVUsR0FBRztZQUNqQixJQUFJLGVBQWUsQ0FBQztnQkFDbEIsT0FBTyxFQUFFLENBQUMsaUJBQWlCLENBQUM7Z0JBQzVCLFNBQVM7YUFDVixDQUFDO1NBQ0gsQ0FBQztRQUVGLElBQUksSUFBSSxDQUFDLDJCQUEyQixFQUFFO1lBQ3BDLFVBQVUsQ0FBQyxJQUFJLENBQ2IsSUFBSSxlQUFlLENBQUM7Z0JBQ2xCLE9BQU8sRUFBRSxDQUFDLGNBQWMsQ0FBQztnQkFDekIsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLDJCQUEyQixDQUFDO2FBQzlDLENBQUMsQ0FDSCxDQUFDO1NBQ0g7UUFFRCxPQUFPLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBRSxFQUFFO1lBQ3pFLFVBQVU7U0FDWCxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLGVBQWUsR0FBcUM7SUFDeEQsS0FBSyxFQUFFLE9BQU87SUFDZCxNQUFNLEVBQUUsVUFBVTtJQUNsQixNQUFNLEVBQUUsY0FBYztDQUN2QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RhY2sgfSBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgeyBJR3JhcGhxbEFwaSB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1hcHBzeW5jJztcbmltcG9ydCB7IFBvbGljeSwgUG9saWN5U3RhdGVtZW50IH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWlhbSc7XG5cbmV4cG9ydCB0eXBlIEFwcFN5bmNBcGlBY3Rpb24gPSAncXVlcnknIHwgJ211dGF0ZScgfCAnbGlzdGVuJztcblxuLyoqXG4gKiBHZW5lcmF0ZXMgcG9saWNpZXMgZm9yIGFjY2Vzc2luZyBhbiBBcHBTeW5jIEdyYXBoUUwgQVBJXG4gKi9cbmV4cG9ydCBjbGFzcyBBcHBTeW5jUG9saWN5R2VuZXJhdG9yIHtcbiAgcHJpdmF0ZSByZWFkb25seSBzdGFjazogU3RhY2s7XG4gIHByaXZhdGUgcmVhZG9ubHkgcG9saWN5UHJlZml4ID0gJ0dyYXBocWxBY2Nlc3NQb2xpY3knO1xuICBwcml2YXRlIHBvbGljeUNvdW50ID0gMTtcbiAgLyoqXG4gICAqIEluaXRpYWxpemUgd2l0aCB0aGUgR3JhcGhxbEFQSSB0aGF0IHRoZSBwb2xpY2llcyB3aWxsIGJlIHNjb3BlZCB0b1xuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBncmFwaHFsQXBpOiBJR3JhcGhxbEFwaSxcbiAgICBwcml2YXRlIHJlYWRvbmx5IG1vZGVsSW50cm9zcGVjdGlvblNjaGVtYUFybj86IHN0cmluZ1xuICApIHtcbiAgICB0aGlzLnN0YWNrID0gU3RhY2sub2YoZ3JhcGhxbEFwaSk7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIHBvbGljeSB0aGF0IGdyYW50cyBHcmFwaFFMIGRhdGEtcGxhbmUgYWNjZXNzIHRvIHRoZSBwcm92aWRlZCBhY3Rpb25zXG4gICAqXG4gICAqIFRoZSBuYW1pbmcgaXMgYSBiaXQgd29ua3kgaGVyZSBiZWNhdXNlIHRoZSBJQU0gYWN0aW9uIGlzIGFsd2F5cyBcImFwcHN5bmM6R3JhcGhRTFwiLlxuICAgKiBUaGUgaW5wdXQgXCJhY3Rpb25cIiBtYXBzIHRvIHRoZSBcInR5cGVcIiBpbiB0aGUgcmVzb3VyY2UgbmFtZSBwYXJ0IG9mIHRoZSBBUk4gd2hpY2ggaXMgXCJRdWVyeVwiLCBcIk11dGF0aW9uXCIgb3IgXCJTdWJzY3JpcHRpb25cIlxuICAgKi9cbiAgZ2VuZXJhdGVHcmFwaHFsQWNjZXNzUG9saWN5KGFjdGlvbnM6IEFwcFN5bmNBcGlBY3Rpb25bXSkge1xuICAgIGNvbnN0IHJlc291cmNlcyA9IGFjdGlvbnNcbiAgICAgIC8vIGNvbnZlcnQgZnJvbSBhY3Rpb25zIHRvIEdyYXBoUUwgVHlwZVxuICAgICAgLm1hcCgoYWN0aW9uKSA9PiBhY3Rpb25Ub1R5cGVNYXBbYWN0aW9uXSlcbiAgICAgIC8vIGNvbnZlcnQgVHlwZSB0byByZXNvdXJjZU5hbWVcbiAgICAgIC5tYXAoKHR5cGUpID0+IFt0aGlzLmdyYXBocWxBcGkuYXJuLCAndHlwZXMnLCB0eXBlLCAnKiddLmpvaW4oJy8nKSk7XG5cbiAgICBjb25zdCBzdGF0ZW1lbnRzID0gW1xuICAgICAgbmV3IFBvbGljeVN0YXRlbWVudCh7XG4gICAgICAgIGFjdGlvbnM6IFsnYXBwc3luYzpHcmFwaFFMJ10sXG4gICAgICAgIHJlc291cmNlcyxcbiAgICAgIH0pLFxuICAgIF07XG5cbiAgICBpZiAodGhpcy5tb2RlbEludHJvc3BlY3Rpb25TY2hlbWFBcm4pIHtcbiAgICAgIHN0YXRlbWVudHMucHVzaChcbiAgICAgICAgbmV3IFBvbGljeVN0YXRlbWVudCh7XG4gICAgICAgICAgYWN0aW9uczogWydzMzpHZXRPYmplY3QnXSxcbiAgICAgICAgICByZXNvdXJjZXM6IFt0aGlzLm1vZGVsSW50cm9zcGVjdGlvblNjaGVtYUFybl0sXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgUG9saWN5KHRoaXMuc3RhY2ssIGAke3RoaXMucG9saWN5UHJlZml4fSR7dGhpcy5wb2xpY3lDb3VudCsrfWAsIHtcbiAgICAgIHN0YXRlbWVudHMsXG4gICAgfSk7XG4gIH1cbn1cblxuY29uc3QgYWN0aW9uVG9UeXBlTWFwOiBSZWNvcmQ8QXBwU3luY0FwaUFjdGlvbiwgc3RyaW5nPiA9IHtcbiAgcXVlcnk6ICdRdWVyeScsXG4gIG11dGF0ZTogJ011dGF0aW9uJyxcbiAgbGlzdGVuOiAnU3Vic2NyaXB0aW9uJyxcbn07XG4iXX0=