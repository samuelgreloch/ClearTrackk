"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogLevelConverter = exports.LogRetentionConverter = void 0;
const aws_lambda_1 = require("aws-cdk-lib/aws-lambda");
const aws_logs_1 = require("aws-cdk-lib/aws-logs");
const aws_appsync_1 = require("aws-cdk-lib/aws-appsync");
/**
 * Converts LogRetention to CDK types.
 */
class LogRetentionConverter {
    toCDKRetentionDays = (retention) => {
        switch (retention) {
            case undefined:
                return undefined;
            case '1 day':
                return aws_logs_1.RetentionDays.ONE_DAY;
            case '3 days':
                return aws_logs_1.RetentionDays.THREE_DAYS;
            case '5 days':
                return aws_logs_1.RetentionDays.FIVE_DAYS;
            case '1 week':
                return aws_logs_1.RetentionDays.ONE_WEEK;
            case '2 weeks':
                return aws_logs_1.RetentionDays.TWO_WEEKS;
            case '1 month':
                return aws_logs_1.RetentionDays.ONE_MONTH;
            case '2 months':
                return aws_logs_1.RetentionDays.TWO_MONTHS;
            case '3 months':
                return aws_logs_1.RetentionDays.THREE_MONTHS;
            case '4 months':
                return aws_logs_1.RetentionDays.FOUR_MONTHS;
            case '5 months':
                return aws_logs_1.RetentionDays.FIVE_MONTHS;
            case '6 months':
                return aws_logs_1.RetentionDays.SIX_MONTHS;
            case '1 year':
                return aws_logs_1.RetentionDays.ONE_YEAR;
            case '13 months':
                return aws_logs_1.RetentionDays.THIRTEEN_MONTHS;
            case '18 months':
                return aws_logs_1.RetentionDays.EIGHTEEN_MONTHS;
            case '2 years':
                return aws_logs_1.RetentionDays.TWO_YEARS;
            case '3 years':
                return aws_logs_1.RetentionDays.THREE_YEARS;
            case '5 years':
                return aws_logs_1.RetentionDays.FIVE_YEARS;
            case '6 years':
                return aws_logs_1.RetentionDays.SIX_YEARS;
            case '7 years':
                return aws_logs_1.RetentionDays.SEVEN_YEARS;
            case '8 years':
                return aws_logs_1.RetentionDays.EIGHT_YEARS;
            case '9 years':
                return aws_logs_1.RetentionDays.NINE_YEARS;
            case '10 years':
                return aws_logs_1.RetentionDays.TEN_YEARS;
            case 'infinite':
                return aws_logs_1.RetentionDays.INFINITE;
        }
    };
}
exports.LogRetentionConverter = LogRetentionConverter;
/**
 * Converts LogLevel to CDK types.
 */
class LogLevelConverter {
    toCDKLambdaApplicationLogLevel = (logLevel) => {
        switch (logLevel) {
            case undefined: {
                return undefined;
            }
            case 'info': {
                return aws_lambda_1.ApplicationLogLevel.INFO;
            }
            case 'debug': {
                return aws_lambda_1.ApplicationLogLevel.DEBUG;
            }
            case 'warn': {
                return aws_lambda_1.ApplicationLogLevel.WARN;
            }
            case 'error': {
                return aws_lambda_1.ApplicationLogLevel.ERROR;
            }
            case 'fatal': {
                return aws_lambda_1.ApplicationLogLevel.FATAL;
            }
            case 'trace': {
                return aws_lambda_1.ApplicationLogLevel.TRACE;
            }
            default:
                throw new Error(`Invalid Lambda application log level: ${logLevel}`);
        }
    };
    toCDKAppsyncFieldLogLevel = (logLevel) => {
        switch (logLevel) {
            case undefined:
                return undefined;
            case 'none':
                return aws_appsync_1.FieldLogLevel.NONE;
            case 'error':
                return aws_appsync_1.FieldLogLevel.ERROR;
            case 'info':
                return aws_appsync_1.FieldLogLevel.INFO;
            case 'debug':
                return aws_appsync_1.FieldLogLevel.DEBUG;
            case 'all':
                return aws_appsync_1.FieldLogLevel.ALL;
            default:
                throw new Error(`Invalid Appsync field log level: ${logLevel}`);
        }
    };
}
exports.LogLevelConverter = LogLevelConverter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW51bV9jb252ZXJ0ZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Nkay9lbnVtX2NvbnZlcnRlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsdURBQTZEO0FBQzdELG1EQUFxRDtBQUNyRCx5REFBd0Q7QUFFeEQ7O0dBRUc7QUFDSCxNQUFhLHFCQUFxQjtJQUNoQyxrQkFBa0IsR0FBRyxDQUNuQixTQUFtQyxFQUNSLEVBQUU7UUFDN0IsUUFBUSxTQUFTLEVBQUU7WUFDakIsS0FBSyxTQUFTO2dCQUNaLE9BQU8sU0FBUyxDQUFDO1lBRW5CLEtBQUssT0FBTztnQkFDVixPQUFPLHdCQUFhLENBQUMsT0FBTyxDQUFDO1lBQy9CLEtBQUssUUFBUTtnQkFDWCxPQUFPLHdCQUFhLENBQUMsVUFBVSxDQUFDO1lBQ2xDLEtBQUssUUFBUTtnQkFDWCxPQUFPLHdCQUFhLENBQUMsU0FBUyxDQUFDO1lBQ2pDLEtBQUssUUFBUTtnQkFDWCxPQUFPLHdCQUFhLENBQUMsUUFBUSxDQUFDO1lBQ2hDLEtBQUssU0FBUztnQkFDWixPQUFPLHdCQUFhLENBQUMsU0FBUyxDQUFDO1lBQ2pDLEtBQUssU0FBUztnQkFDWixPQUFPLHdCQUFhLENBQUMsU0FBUyxDQUFDO1lBQ2pDLEtBQUssVUFBVTtnQkFDYixPQUFPLHdCQUFhLENBQUMsVUFBVSxDQUFDO1lBQ2xDLEtBQUssVUFBVTtnQkFDYixPQUFPLHdCQUFhLENBQUMsWUFBWSxDQUFDO1lBQ3BDLEtBQUssVUFBVTtnQkFDYixPQUFPLHdCQUFhLENBQUMsV0FBVyxDQUFDO1lBQ25DLEtBQUssVUFBVTtnQkFDYixPQUFPLHdCQUFhLENBQUMsV0FBVyxDQUFDO1lBQ25DLEtBQUssVUFBVTtnQkFDYixPQUFPLHdCQUFhLENBQUMsVUFBVSxDQUFDO1lBQ2xDLEtBQUssUUFBUTtnQkFDWCxPQUFPLHdCQUFhLENBQUMsUUFBUSxDQUFDO1lBQ2hDLEtBQUssV0FBVztnQkFDZCxPQUFPLHdCQUFhLENBQUMsZUFBZSxDQUFDO1lBQ3ZDLEtBQUssV0FBVztnQkFDZCxPQUFPLHdCQUFhLENBQUMsZUFBZSxDQUFDO1lBQ3ZDLEtBQUssU0FBUztnQkFDWixPQUFPLHdCQUFhLENBQUMsU0FBUyxDQUFDO1lBQ2pDLEtBQUssU0FBUztnQkFDWixPQUFPLHdCQUFhLENBQUMsV0FBVyxDQUFDO1lBQ25DLEtBQUssU0FBUztnQkFDWixPQUFPLHdCQUFhLENBQUMsVUFBVSxDQUFDO1lBQ2xDLEtBQUssU0FBUztnQkFDWixPQUFPLHdCQUFhLENBQUMsU0FBUyxDQUFDO1lBQ2pDLEtBQUssU0FBUztnQkFDWixPQUFPLHdCQUFhLENBQUMsV0FBVyxDQUFDO1lBQ25DLEtBQUssU0FBUztnQkFDWixPQUFPLHdCQUFhLENBQUMsV0FBVyxDQUFDO1lBQ25DLEtBQUssU0FBUztnQkFDWixPQUFPLHdCQUFhLENBQUMsVUFBVSxDQUFDO1lBQ2xDLEtBQUssVUFBVTtnQkFDYixPQUFPLHdCQUFhLENBQUMsU0FBUyxDQUFDO1lBQ2pDLEtBQUssVUFBVTtnQkFDYixPQUFPLHdCQUFhLENBQUMsUUFBUSxDQUFDO1NBQ2pDO0lBQ0gsQ0FBQyxDQUFDO0NBQ0g7QUF4REQsc0RBd0RDO0FBRUQ7O0dBRUc7QUFDSCxNQUFhLGlCQUFpQjtJQUM1Qiw4QkFBOEIsR0FBRyxDQUMvQixRQUE4QixFQUNHLEVBQUU7UUFDbkMsUUFBUSxRQUFRLEVBQUU7WUFDaEIsS0FBSyxTQUFTLENBQUMsQ0FBQztnQkFDZCxPQUFPLFNBQVMsQ0FBQzthQUNsQjtZQUNELEtBQUssTUFBTSxDQUFDLENBQUM7Z0JBQ1gsT0FBTyxnQ0FBbUIsQ0FBQyxJQUFJLENBQUM7YUFDakM7WUFDRCxLQUFLLE9BQU8sQ0FBQyxDQUFDO2dCQUNaLE9BQU8sZ0NBQW1CLENBQUMsS0FBSyxDQUFDO2FBQ2xDO1lBQ0QsS0FBSyxNQUFNLENBQUMsQ0FBQztnQkFDWCxPQUFPLGdDQUFtQixDQUFDLElBQUksQ0FBQzthQUNqQztZQUNELEtBQUssT0FBTyxDQUFDLENBQUM7Z0JBQ1osT0FBTyxnQ0FBbUIsQ0FBQyxLQUFLLENBQUM7YUFDbEM7WUFDRCxLQUFLLE9BQU8sQ0FBQyxDQUFDO2dCQUNaLE9BQU8sZ0NBQW1CLENBQUMsS0FBSyxDQUFDO2FBQ2xDO1lBQ0QsS0FBSyxPQUFPLENBQUMsQ0FBQztnQkFDWixPQUFPLGdDQUFtQixDQUFDLEtBQUssQ0FBQzthQUNsQztZQUNEO2dCQUNFLE1BQU0sSUFBSSxLQUFLLENBQUMseUNBQXlDLFFBQVEsRUFBRSxDQUFDLENBQUM7U0FDeEU7SUFDSCxDQUFDLENBQUM7SUFFRix5QkFBeUIsR0FBRyxDQUMxQixRQUE4QixFQUNILEVBQUU7UUFDN0IsUUFBUSxRQUFRLEVBQUU7WUFDaEIsS0FBSyxTQUFTO2dCQUNaLE9BQU8sU0FBUyxDQUFDO1lBQ25CLEtBQUssTUFBTTtnQkFDVCxPQUFPLDJCQUFhLENBQUMsSUFBSSxDQUFDO1lBQzVCLEtBQUssT0FBTztnQkFDVixPQUFPLDJCQUFhLENBQUMsS0FBSyxDQUFDO1lBQzdCLEtBQUssTUFBTTtnQkFDVCxPQUFPLDJCQUFhLENBQUMsSUFBSSxDQUFDO1lBQzVCLEtBQUssT0FBTztnQkFDVixPQUFPLDJCQUFhLENBQUMsS0FBSyxDQUFDO1lBQzdCLEtBQUssS0FBSztnQkFDUixPQUFPLDJCQUFhLENBQUMsR0FBRyxDQUFDO1lBQzNCO2dCQUNFLE1BQU0sSUFBSSxLQUFLLENBQUMsb0NBQW9DLFFBQVEsRUFBRSxDQUFDLENBQUM7U0FDbkU7SUFDSCxDQUFDLENBQUM7Q0FDSDtBQW5ERCw4Q0FtREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMb2dMZXZlbCwgTG9nUmV0ZW50aW9uIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsdWdpbi10eXBlcyc7XG5pbXBvcnQgeyBBcHBsaWNhdGlvbkxvZ0xldmVsIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWxhbWJkYSc7XG5pbXBvcnQgeyBSZXRlbnRpb25EYXlzIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWxvZ3MnO1xuaW1wb3J0IHsgRmllbGRMb2dMZXZlbCB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1hcHBzeW5jJztcblxuLyoqXG4gKiBDb252ZXJ0cyBMb2dSZXRlbnRpb24gdG8gQ0RLIHR5cGVzLlxuICovXG5leHBvcnQgY2xhc3MgTG9nUmV0ZW50aW9uQ29udmVydGVyIHtcbiAgdG9DREtSZXRlbnRpb25EYXlzID0gKFxuICAgIHJldGVudGlvbjogTG9nUmV0ZW50aW9uIHwgdW5kZWZpbmVkXG4gICk6IFJldGVudGlvbkRheXMgfCB1bmRlZmluZWQgPT4ge1xuICAgIHN3aXRjaCAocmV0ZW50aW9uKSB7XG4gICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcblxuICAgICAgY2FzZSAnMSBkYXknOlxuICAgICAgICByZXR1cm4gUmV0ZW50aW9uRGF5cy5PTkVfREFZO1xuICAgICAgY2FzZSAnMyBkYXlzJzpcbiAgICAgICAgcmV0dXJuIFJldGVudGlvbkRheXMuVEhSRUVfREFZUztcbiAgICAgIGNhc2UgJzUgZGF5cyc6XG4gICAgICAgIHJldHVybiBSZXRlbnRpb25EYXlzLkZJVkVfREFZUztcbiAgICAgIGNhc2UgJzEgd2Vlayc6XG4gICAgICAgIHJldHVybiBSZXRlbnRpb25EYXlzLk9ORV9XRUVLO1xuICAgICAgY2FzZSAnMiB3ZWVrcyc6XG4gICAgICAgIHJldHVybiBSZXRlbnRpb25EYXlzLlRXT19XRUVLUztcbiAgICAgIGNhc2UgJzEgbW9udGgnOlxuICAgICAgICByZXR1cm4gUmV0ZW50aW9uRGF5cy5PTkVfTU9OVEg7XG4gICAgICBjYXNlICcyIG1vbnRocyc6XG4gICAgICAgIHJldHVybiBSZXRlbnRpb25EYXlzLlRXT19NT05USFM7XG4gICAgICBjYXNlICczIG1vbnRocyc6XG4gICAgICAgIHJldHVybiBSZXRlbnRpb25EYXlzLlRIUkVFX01PTlRIUztcbiAgICAgIGNhc2UgJzQgbW9udGhzJzpcbiAgICAgICAgcmV0dXJuIFJldGVudGlvbkRheXMuRk9VUl9NT05USFM7XG4gICAgICBjYXNlICc1IG1vbnRocyc6XG4gICAgICAgIHJldHVybiBSZXRlbnRpb25EYXlzLkZJVkVfTU9OVEhTO1xuICAgICAgY2FzZSAnNiBtb250aHMnOlxuICAgICAgICByZXR1cm4gUmV0ZW50aW9uRGF5cy5TSVhfTU9OVEhTO1xuICAgICAgY2FzZSAnMSB5ZWFyJzpcbiAgICAgICAgcmV0dXJuIFJldGVudGlvbkRheXMuT05FX1lFQVI7XG4gICAgICBjYXNlICcxMyBtb250aHMnOlxuICAgICAgICByZXR1cm4gUmV0ZW50aW9uRGF5cy5USElSVEVFTl9NT05USFM7XG4gICAgICBjYXNlICcxOCBtb250aHMnOlxuICAgICAgICByZXR1cm4gUmV0ZW50aW9uRGF5cy5FSUdIVEVFTl9NT05USFM7XG4gICAgICBjYXNlICcyIHllYXJzJzpcbiAgICAgICAgcmV0dXJuIFJldGVudGlvbkRheXMuVFdPX1lFQVJTO1xuICAgICAgY2FzZSAnMyB5ZWFycyc6XG4gICAgICAgIHJldHVybiBSZXRlbnRpb25EYXlzLlRIUkVFX1lFQVJTO1xuICAgICAgY2FzZSAnNSB5ZWFycyc6XG4gICAgICAgIHJldHVybiBSZXRlbnRpb25EYXlzLkZJVkVfWUVBUlM7XG4gICAgICBjYXNlICc2IHllYXJzJzpcbiAgICAgICAgcmV0dXJuIFJldGVudGlvbkRheXMuU0lYX1lFQVJTO1xuICAgICAgY2FzZSAnNyB5ZWFycyc6XG4gICAgICAgIHJldHVybiBSZXRlbnRpb25EYXlzLlNFVkVOX1lFQVJTO1xuICAgICAgY2FzZSAnOCB5ZWFycyc6XG4gICAgICAgIHJldHVybiBSZXRlbnRpb25EYXlzLkVJR0hUX1lFQVJTO1xuICAgICAgY2FzZSAnOSB5ZWFycyc6XG4gICAgICAgIHJldHVybiBSZXRlbnRpb25EYXlzLk5JTkVfWUVBUlM7XG4gICAgICBjYXNlICcxMCB5ZWFycyc6XG4gICAgICAgIHJldHVybiBSZXRlbnRpb25EYXlzLlRFTl9ZRUFSUztcbiAgICAgIGNhc2UgJ2luZmluaXRlJzpcbiAgICAgICAgcmV0dXJuIFJldGVudGlvbkRheXMuSU5GSU5JVEU7XG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAqIENvbnZlcnRzIExvZ0xldmVsIHRvIENESyB0eXBlcy5cbiAqL1xuZXhwb3J0IGNsYXNzIExvZ0xldmVsQ29udmVydGVyIHtcbiAgdG9DREtMYW1iZGFBcHBsaWNhdGlvbkxvZ0xldmVsID0gKFxuICAgIGxvZ0xldmVsOiBMb2dMZXZlbCB8IHVuZGVmaW5lZFxuICApOiBBcHBsaWNhdGlvbkxvZ0xldmVsIHwgdW5kZWZpbmVkID0+IHtcbiAgICBzd2l0Y2ggKGxvZ0xldmVsKSB7XG4gICAgICBjYXNlIHVuZGVmaW5lZDoge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgY2FzZSAnaW5mbyc6IHtcbiAgICAgICAgcmV0dXJuIEFwcGxpY2F0aW9uTG9nTGV2ZWwuSU5GTztcbiAgICAgIH1cbiAgICAgIGNhc2UgJ2RlYnVnJzoge1xuICAgICAgICByZXR1cm4gQXBwbGljYXRpb25Mb2dMZXZlbC5ERUJVRztcbiAgICAgIH1cbiAgICAgIGNhc2UgJ3dhcm4nOiB7XG4gICAgICAgIHJldHVybiBBcHBsaWNhdGlvbkxvZ0xldmVsLldBUk47XG4gICAgICB9XG4gICAgICBjYXNlICdlcnJvcic6IHtcbiAgICAgICAgcmV0dXJuIEFwcGxpY2F0aW9uTG9nTGV2ZWwuRVJST1I7XG4gICAgICB9XG4gICAgICBjYXNlICdmYXRhbCc6IHtcbiAgICAgICAgcmV0dXJuIEFwcGxpY2F0aW9uTG9nTGV2ZWwuRkFUQUw7XG4gICAgICB9XG4gICAgICBjYXNlICd0cmFjZSc6IHtcbiAgICAgICAgcmV0dXJuIEFwcGxpY2F0aW9uTG9nTGV2ZWwuVFJBQ0U7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgTGFtYmRhIGFwcGxpY2F0aW9uIGxvZyBsZXZlbDogJHtsb2dMZXZlbH1gKTtcbiAgICB9XG4gIH07XG5cbiAgdG9DREtBcHBzeW5jRmllbGRMb2dMZXZlbCA9IChcbiAgICBsb2dMZXZlbDogTG9nTGV2ZWwgfCB1bmRlZmluZWRcbiAgKTogRmllbGRMb2dMZXZlbCB8IHVuZGVmaW5lZCA9PiB7XG4gICAgc3dpdGNoIChsb2dMZXZlbCkge1xuICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICBjYXNlICdub25lJzpcbiAgICAgICAgcmV0dXJuIEZpZWxkTG9nTGV2ZWwuTk9ORTtcbiAgICAgIGNhc2UgJ2Vycm9yJzpcbiAgICAgICAgcmV0dXJuIEZpZWxkTG9nTGV2ZWwuRVJST1I7XG4gICAgICBjYXNlICdpbmZvJzpcbiAgICAgICAgcmV0dXJuIEZpZWxkTG9nTGV2ZWwuSU5GTztcbiAgICAgIGNhc2UgJ2RlYnVnJzpcbiAgICAgICAgcmV0dXJuIEZpZWxkTG9nTGV2ZWwuREVCVUc7XG4gICAgICBjYXNlICdhbGwnOlxuICAgICAgICByZXR1cm4gRmllbGRMb2dMZXZlbC5BTEw7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgQXBwc3luYyBmaWVsZCBsb2cgbGV2ZWw6ICR7bG9nTGV2ZWx9YCk7XG4gICAgfVxuICB9O1xufVxuIl19