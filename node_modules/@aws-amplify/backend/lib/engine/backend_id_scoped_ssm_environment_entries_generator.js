import { NamingConverter, ParameterPathConversions, } from '@aws-amplify/platform-core';
import { StringParameter } from 'aws-cdk-lib/aws-ssm';
/**
 * Generates SsmEnvironmentEntry[] with SSM parameters that are scoped to a specific backend identifier
 */
export class BackendIdScopedSsmEnvironmentEntriesGenerator {
    scope;
    backendId;
    /**
     * Initialize with the backend identifier
     */
    constructor(scope, backendId) {
        this.scope = scope;
        this.backendId = backendId;
    }
    /**
     * Creates SSM parameters for CDK tokens in the scope provided to the constructor.
     * This allows values in scopeContext to be fetched from SSM at runtime without a deploy-time dependency between resources.
     * For this to work, the CDK tokens in scopeContext _must_ reside in the scope from the constructor.
     * This method can be called multiple times but an attempt to insert the same contextKey twice will result in an error.
     *
     * The returned SsmEnvironmentEntries must _not_ contain CDK tokens to SSM parameters.
     * Instead the SSM parameters are formatted with a naming convention and the literal string value of the parameter path is returned.
     * @example
     * Consider the following scopeContext input:
     * {
     *   STORAGE_BUCKET_NAME: <CDK token to S3 bucket name>
     * }
     *
     * This function will create an SSM parameter with a value that will resolve to the S3 bucket name at deploy time
     * The SSM parameter will be placed in the provided CDK scope which _must_ be the same as the scope that the CDK tokens in scopeContext come from
     * The return value will be
     * [
     *   {
     *     name: STORAGE_BUCKET_NAME
     *     path: /amplify/resource_reference/<backend namespace>/<backend name>/STORAGE_BUCKET_NAME
     *   }
     * ]
     *
     * The value of this parameter can then be fetched anywhere else without an explicit deploy-time dependency on the storage bucket name
     * @param scopeContext Key/value pairs of values from the scope that should be stored in SSM and retrievable using the key
     */
    generateSsmEnvironmentEntries = (scopeContext) => Object.entries(scopeContext).map(([contextKey, contextValue]) => {
        const sanitizedContextKey = new NamingConverter().toScreamingSnakeCase(contextKey);
        const parameterPath = ParameterPathConversions.toResourceReferenceFullPath(this.backendId, sanitizedContextKey);
        new StringParameter(this.scope, `${sanitizedContextKey}Parameter`, {
            parameterName: parameterPath,
            stringValue: contextValue,
        });
        return {
            name: sanitizedContextKey,
            path: parameterPath,
        };
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2VuZF9pZF9zY29wZWRfc3NtX2Vudmlyb25tZW50X2VudHJpZXNfZ2VuZXJhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2VuZ2luZS9iYWNrZW5kX2lkX3Njb3BlZF9zc21fZW52aXJvbm1lbnRfZW50cmllc19nZW5lcmF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLGVBQWUsRUFDZix3QkFBd0IsR0FDekIsTUFBTSw0QkFBNEIsQ0FBQztBQUtwQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFHdEQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sNkNBQTZDO0lBT3JDO0lBQ0E7SUFMbkI7O09BRUc7SUFDSCxZQUNtQixLQUFnQixFQUNoQixTQUE0QjtRQUQ1QixVQUFLLEdBQUwsS0FBSyxDQUFXO1FBQ2hCLGNBQVMsR0FBVCxTQUFTLENBQW1CO0lBQzVDLENBQUM7SUFFSjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0EwQkc7SUFDSCw2QkFBNkIsR0FBRyxDQUFDLFlBQW9DLEVBQUUsRUFBRSxDQUN2RSxNQUFNLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLFlBQVksQ0FBQyxFQUFFLEVBQUU7UUFDOUQsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLGVBQWUsRUFBRSxDQUFDLG9CQUFvQixDQUNwRSxVQUFVLENBQ1gsQ0FBQztRQUNGLE1BQU0sYUFBYSxHQUNqQix3QkFBd0IsQ0FBQywyQkFBMkIsQ0FDbEQsSUFBSSxDQUFDLFNBQVMsRUFDZCxtQkFBbUIsQ0FDcEIsQ0FBQztRQUNKLElBQUksZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRyxtQkFBbUIsV0FBVyxFQUFFO1lBQ2pFLGFBQWEsRUFBRSxhQUFhO1lBQzVCLFdBQVcsRUFBRSxZQUFZO1NBQzFCLENBQUMsQ0FBQztRQUNILE9BQU87WUFDTCxJQUFJLEVBQUUsbUJBQW1CO1lBQ3pCLElBQUksRUFBRSxhQUFhO1NBQ3BCLENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztDQUNOIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgTmFtaW5nQ29udmVydGVyLFxuICBQYXJhbWV0ZXJQYXRoQ29udmVyc2lvbnMsXG59IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbGF0Zm9ybS1jb3JlJztcbmltcG9ydCB7XG4gIEJhY2tlbmRJZGVudGlmaWVyLFxuICBTc21FbnZpcm9ubWVudEVudHJpZXNHZW5lcmF0b3IsXG59IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbHVnaW4tdHlwZXMnO1xuaW1wb3J0IHsgU3RyaW5nUGFyYW1ldGVyIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLXNzbSc7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcblxuLyoqXG4gKiBHZW5lcmF0ZXMgU3NtRW52aXJvbm1lbnRFbnRyeVtdIHdpdGggU1NNIHBhcmFtZXRlcnMgdGhhdCBhcmUgc2NvcGVkIHRvIGEgc3BlY2lmaWMgYmFja2VuZCBpZGVudGlmaWVyXG4gKi9cbmV4cG9ydCBjbGFzcyBCYWNrZW5kSWRTY29wZWRTc21FbnZpcm9ubWVudEVudHJpZXNHZW5lcmF0b3JcbiAgaW1wbGVtZW50cyBTc21FbnZpcm9ubWVudEVudHJpZXNHZW5lcmF0b3JcbntcbiAgLyoqXG4gICAqIEluaXRpYWxpemUgd2l0aCB0aGUgYmFja2VuZCBpZGVudGlmaWVyXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNjb3BlOiBDb25zdHJ1Y3QsXG4gICAgcHJpdmF0ZSByZWFkb25seSBiYWNrZW5kSWQ6IEJhY2tlbmRJZGVudGlmaWVyXG4gICkge31cblxuICAvKipcbiAgICogQ3JlYXRlcyBTU00gcGFyYW1ldGVycyBmb3IgQ0RLIHRva2VucyBpbiB0aGUgc2NvcGUgcHJvdmlkZWQgdG8gdGhlIGNvbnN0cnVjdG9yLlxuICAgKiBUaGlzIGFsbG93cyB2YWx1ZXMgaW4gc2NvcGVDb250ZXh0IHRvIGJlIGZldGNoZWQgZnJvbSBTU00gYXQgcnVudGltZSB3aXRob3V0IGEgZGVwbG95LXRpbWUgZGVwZW5kZW5jeSBiZXR3ZWVuIHJlc291cmNlcy5cbiAgICogRm9yIHRoaXMgdG8gd29yaywgdGhlIENESyB0b2tlbnMgaW4gc2NvcGVDb250ZXh0IF9tdXN0XyByZXNpZGUgaW4gdGhlIHNjb3BlIGZyb20gdGhlIGNvbnN0cnVjdG9yLlxuICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIG11bHRpcGxlIHRpbWVzIGJ1dCBhbiBhdHRlbXB0IHRvIGluc2VydCB0aGUgc2FtZSBjb250ZXh0S2V5IHR3aWNlIHdpbGwgcmVzdWx0IGluIGFuIGVycm9yLlxuICAgKlxuICAgKiBUaGUgcmV0dXJuZWQgU3NtRW52aXJvbm1lbnRFbnRyaWVzIG11c3QgX25vdF8gY29udGFpbiBDREsgdG9rZW5zIHRvIFNTTSBwYXJhbWV0ZXJzLlxuICAgKiBJbnN0ZWFkIHRoZSBTU00gcGFyYW1ldGVycyBhcmUgZm9ybWF0dGVkIHdpdGggYSBuYW1pbmcgY29udmVudGlvbiBhbmQgdGhlIGxpdGVyYWwgc3RyaW5nIHZhbHVlIG9mIHRoZSBwYXJhbWV0ZXIgcGF0aCBpcyByZXR1cm5lZC5cbiAgICogQGV4YW1wbGVcbiAgICogQ29uc2lkZXIgdGhlIGZvbGxvd2luZyBzY29wZUNvbnRleHQgaW5wdXQ6XG4gICAqIHtcbiAgICogICBTVE9SQUdFX0JVQ0tFVF9OQU1FOiA8Q0RLIHRva2VuIHRvIFMzIGJ1Y2tldCBuYW1lPlxuICAgKiB9XG4gICAqXG4gICAqIFRoaXMgZnVuY3Rpb24gd2lsbCBjcmVhdGUgYW4gU1NNIHBhcmFtZXRlciB3aXRoIGEgdmFsdWUgdGhhdCB3aWxsIHJlc29sdmUgdG8gdGhlIFMzIGJ1Y2tldCBuYW1lIGF0IGRlcGxveSB0aW1lXG4gICAqIFRoZSBTU00gcGFyYW1ldGVyIHdpbGwgYmUgcGxhY2VkIGluIHRoZSBwcm92aWRlZCBDREsgc2NvcGUgd2hpY2ggX211c3RfIGJlIHRoZSBzYW1lIGFzIHRoZSBzY29wZSB0aGF0IHRoZSBDREsgdG9rZW5zIGluIHNjb3BlQ29udGV4dCBjb21lIGZyb21cbiAgICogVGhlIHJldHVybiB2YWx1ZSB3aWxsIGJlXG4gICAqIFtcbiAgICogICB7XG4gICAqICAgICBuYW1lOiBTVE9SQUdFX0JVQ0tFVF9OQU1FXG4gICAqICAgICBwYXRoOiAvYW1wbGlmeS9yZXNvdXJjZV9yZWZlcmVuY2UvPGJhY2tlbmQgbmFtZXNwYWNlPi88YmFja2VuZCBuYW1lPi9TVE9SQUdFX0JVQ0tFVF9OQU1FXG4gICAqICAgfVxuICAgKiBdXG4gICAqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGlzIHBhcmFtZXRlciBjYW4gdGhlbiBiZSBmZXRjaGVkIGFueXdoZXJlIGVsc2Ugd2l0aG91dCBhbiBleHBsaWNpdCBkZXBsb3ktdGltZSBkZXBlbmRlbmN5IG9uIHRoZSBzdG9yYWdlIGJ1Y2tldCBuYW1lXG4gICAqIEBwYXJhbSBzY29wZUNvbnRleHQgS2V5L3ZhbHVlIHBhaXJzIG9mIHZhbHVlcyBmcm9tIHRoZSBzY29wZSB0aGF0IHNob3VsZCBiZSBzdG9yZWQgaW4gU1NNIGFuZCByZXRyaWV2YWJsZSB1c2luZyB0aGUga2V5XG4gICAqL1xuICBnZW5lcmF0ZVNzbUVudmlyb25tZW50RW50cmllcyA9IChzY29wZUNvbnRleHQ6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4pID0+XG4gICAgT2JqZWN0LmVudHJpZXMoc2NvcGVDb250ZXh0KS5tYXAoKFtjb250ZXh0S2V5LCBjb250ZXh0VmFsdWVdKSA9PiB7XG4gICAgICBjb25zdCBzYW5pdGl6ZWRDb250ZXh0S2V5ID0gbmV3IE5hbWluZ0NvbnZlcnRlcigpLnRvU2NyZWFtaW5nU25ha2VDYXNlKFxuICAgICAgICBjb250ZXh0S2V5XG4gICAgICApO1xuICAgICAgY29uc3QgcGFyYW1ldGVyUGF0aCA9XG4gICAgICAgIFBhcmFtZXRlclBhdGhDb252ZXJzaW9ucy50b1Jlc291cmNlUmVmZXJlbmNlRnVsbFBhdGgoXG4gICAgICAgICAgdGhpcy5iYWNrZW5kSWQsXG4gICAgICAgICAgc2FuaXRpemVkQ29udGV4dEtleVxuICAgICAgICApO1xuICAgICAgbmV3IFN0cmluZ1BhcmFtZXRlcih0aGlzLnNjb3BlLCBgJHtzYW5pdGl6ZWRDb250ZXh0S2V5fVBhcmFtZXRlcmAsIHtcbiAgICAgICAgcGFyYW1ldGVyTmFtZTogcGFyYW1ldGVyUGF0aCxcbiAgICAgICAgc3RyaW5nVmFsdWU6IGNvbnRleHRWYWx1ZSxcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogc2FuaXRpemVkQ29udGV4dEtleSxcbiAgICAgICAgcGF0aDogcGFyYW1ldGVyUGF0aCxcbiAgICAgIH07XG4gICAgfSk7XG59XG4iXX0=