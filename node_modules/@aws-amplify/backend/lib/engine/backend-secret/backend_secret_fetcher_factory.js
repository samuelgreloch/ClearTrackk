import { CustomResource, Lazy } from 'aws-cdk-lib';
/**
 * Resource provider ID for the backend secret resource.
 */
export const SECRET_RESOURCE_PROVIDER_ID = 'AmplifySecretFetcherResourceProvider';
class SecretFetcherCustomResource extends CustomResource {
    secrets;
    constructor(scope, id, props, secrets) {
        super(scope, id, {
            ...props,
        });
        this.secrets = secrets;
    }
    addSecret = (secretName) => {
        this.secrets.add(secretName);
    };
}
/**
 * Type of the backend custom CFN resource.
 */
const SECRET_RESOURCE_TYPE = `Custom::AmplifySecretFetcherResource`;
/**
 * The factory to create backend secret-fetcher resource.
 */
export class BackendSecretFetcherFactory {
    secretProviderFactory;
    /**
     * Creates a backend secret-fetcher resource factory.
     */
    constructor(secretProviderFactory) {
        this.secretProviderFactory = secretProviderFactory;
    }
    /**
     * Returns a resource if it exists in the input scope. Otherwise,
     * creates a new one.
     */
    getOrCreate = (scope, secretName, backendIdentifier) => {
        const secretResourceId = `AmplifySecretFetcherResource`;
        const existingResource = scope.node.tryFindChild(secretResourceId);
        if (existingResource) {
            existingResource.addSecret(secretName);
            return existingResource;
        }
        const secrets = new Set();
        secrets.add(secretName);
        const provider = this.secretProviderFactory.getOrCreateInstance(scope, SECRET_RESOURCE_PROVIDER_ID, backendIdentifier);
        // Sandbox deployment passes down the secret's last updated timestamp to
        // trigger secret update. It is to optimize sandbox deployment time by
        // leveraging cdk hotswap.
        const secretLastUpdated = scope.node.tryGetContext('secretLastUpdated') ?? Date.now();
        const customResourceProps = {
            namespace: backendIdentifier.namespace,
            name: backendIdentifier.name,
            type: backendIdentifier.type,
            secretNames: Lazy.list({
                produce: () => {
                    return Array.from(secrets);
                },
            }),
        };
        return new SecretFetcherCustomResource(scope, secretResourceId, {
            serviceToken: provider.serviceToken,
            properties: {
                ...customResourceProps,
                secretLastUpdated, // this property is only to trigger resource update event.
            },
            resourceType: SECRET_RESOURCE_TYPE,
        }, secrets);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2VuZF9zZWNyZXRfZmV0Y2hlcl9mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2VuZ2luZS9iYWNrZW5kLXNlY3JldC9iYWNrZW5kX3NlY3JldF9mZXRjaGVyX2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLGNBQWMsRUFBdUIsSUFBSSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBSXhFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sMkJBQTJCLEdBQ3RDLHNDQUFzQyxDQUFDO0FBRXpDLE1BQU0sMkJBQTRCLFNBQVEsY0FBYztJQUM5QyxPQUFPLENBQWM7SUFDN0IsWUFDRSxLQUFnQixFQUNoQixFQUFVLEVBQ1YsS0FBMEIsRUFDMUIsT0FBb0I7UUFFcEIsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUU7WUFDZixHQUFHLEtBQUs7U0FDVCxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUN6QixDQUFDO0lBRU0sU0FBUyxHQUFHLENBQUMsVUFBa0IsRUFBRSxFQUFFO1FBQ3hDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQy9CLENBQUMsQ0FBQztDQUNIO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLG9CQUFvQixHQUFHLHNDQUFzQyxDQUFDO0FBRXBFOztHQUVHO0FBQ0gsTUFBTSxPQUFPLDJCQUEyQjtJQUtuQjtJQUpuQjs7T0FFRztJQUNILFlBQ21CLHFCQUEwRDtRQUExRCwwQkFBcUIsR0FBckIscUJBQXFCLENBQXFDO0lBQzFFLENBQUM7SUFFSjs7O09BR0c7SUFDSCxXQUFXLEdBQUcsQ0FDWixLQUFnQixFQUNoQixVQUFrQixFQUNsQixpQkFBb0MsRUFDUCxFQUFFO1FBQy9CLE1BQU0sZ0JBQWdCLEdBQUcsOEJBQThCLENBQUM7UUFDeEQsTUFBTSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FDOUMsZ0JBQWdCLENBQ2MsQ0FBQztRQUVqQyxJQUFJLGdCQUFnQixFQUFFO1lBQ3BCLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUN2QyxPQUFPLGdCQUFnQixDQUFDO1NBQ3pCO1FBQ0QsTUFBTSxPQUFPLEdBQWdCLElBQUksR0FBRyxFQUFFLENBQUM7UUFDdkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUV4QixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQUMsbUJBQW1CLENBQzdELEtBQUssRUFDTCwyQkFBMkIsRUFDM0IsaUJBQWlCLENBQ2xCLENBQUM7UUFFRix3RUFBd0U7UUFDeEUsc0VBQXNFO1FBQ3RFLDBCQUEwQjtRQUMxQixNQUFNLGlCQUFpQixHQUNyQixLQUFLLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUU5RCxNQUFNLG1CQUFtQixHQUF3QjtZQUMvQyxTQUFTLEVBQUUsaUJBQWlCLENBQUMsU0FBUztZQUN0QyxJQUFJLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtZQUM1QixJQUFJLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtZQUM1QixXQUFXLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQztnQkFDckIsT0FBTyxFQUFFLEdBQUcsRUFBRTtvQkFDWixPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQzdCLENBQUM7YUFDRixDQUFDO1NBQ0gsQ0FBQztRQUVGLE9BQU8sSUFBSSwyQkFBMkIsQ0FDcEMsS0FBSyxFQUNMLGdCQUFnQixFQUNoQjtZQUNFLFlBQVksRUFBRSxRQUFRLENBQUMsWUFBWTtZQUNuQyxVQUFVLEVBQUU7Z0JBQ1YsR0FBRyxtQkFBbUI7Z0JBQ3RCLGlCQUFpQixFQUFFLDBEQUEwRDthQUM5RTtZQUNELFlBQVksRUFBRSxvQkFBb0I7U0FDbkMsRUFDRCxPQUFPLENBQ1IsQ0FBQztJQUNKLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgeyBCYWNrZW5kU2VjcmV0RmV0Y2hlclByb3ZpZGVyRmFjdG9yeSB9IGZyb20gJy4vYmFja2VuZF9zZWNyZXRfZmV0Y2hlcl9wcm92aWRlcl9mYWN0b3J5LmpzJztcbmltcG9ydCB7IEN1c3RvbVJlc291cmNlLCBDdXN0b21SZXNvdXJjZVByb3BzLCBMYXp5IH0gZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHsgQmFja2VuZElkZW50aWZpZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGx1Z2luLXR5cGVzJztcbmltcG9ydCB7IFNlY3JldFJlc291cmNlUHJvcHMgfSBmcm9tICcuL2xhbWJkYS9iYWNrZW5kX3NlY3JldF9mZXRjaGVyX3R5cGVzLmpzJztcblxuLyoqXG4gKiBSZXNvdXJjZSBwcm92aWRlciBJRCBmb3IgdGhlIGJhY2tlbmQgc2VjcmV0IHJlc291cmNlLlxuICovXG5leHBvcnQgY29uc3QgU0VDUkVUX1JFU09VUkNFX1BST1ZJREVSX0lEID1cbiAgJ0FtcGxpZnlTZWNyZXRGZXRjaGVyUmVzb3VyY2VQcm92aWRlcic7XG5cbmNsYXNzIFNlY3JldEZldGNoZXJDdXN0b21SZXNvdXJjZSBleHRlbmRzIEN1c3RvbVJlc291cmNlIHtcbiAgcHJpdmF0ZSBzZWNyZXRzOiBTZXQ8c3RyaW5nPjtcbiAgY29uc3RydWN0b3IoXG4gICAgc2NvcGU6IENvbnN0cnVjdCxcbiAgICBpZDogc3RyaW5nLFxuICAgIHByb3BzOiBDdXN0b21SZXNvdXJjZVByb3BzLFxuICAgIHNlY3JldHM6IFNldDxzdHJpbmc+XG4gICkge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwge1xuICAgICAgLi4ucHJvcHMsXG4gICAgfSk7XG4gICAgdGhpcy5zZWNyZXRzID0gc2VjcmV0cztcbiAgfVxuXG4gIHB1YmxpYyBhZGRTZWNyZXQgPSAoc2VjcmV0TmFtZTogc3RyaW5nKSA9PiB7XG4gICAgdGhpcy5zZWNyZXRzLmFkZChzZWNyZXROYW1lKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBUeXBlIG9mIHRoZSBiYWNrZW5kIGN1c3RvbSBDRk4gcmVzb3VyY2UuXG4gKi9cbmNvbnN0IFNFQ1JFVF9SRVNPVVJDRV9UWVBFID0gYEN1c3RvbTo6QW1wbGlmeVNlY3JldEZldGNoZXJSZXNvdXJjZWA7XG5cbi8qKlxuICogVGhlIGZhY3RvcnkgdG8gY3JlYXRlIGJhY2tlbmQgc2VjcmV0LWZldGNoZXIgcmVzb3VyY2UuXG4gKi9cbmV4cG9ydCBjbGFzcyBCYWNrZW5kU2VjcmV0RmV0Y2hlckZhY3Rvcnkge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIGJhY2tlbmQgc2VjcmV0LWZldGNoZXIgcmVzb3VyY2UgZmFjdG9yeS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgc2VjcmV0UHJvdmlkZXJGYWN0b3J5OiBCYWNrZW5kU2VjcmV0RmV0Y2hlclByb3ZpZGVyRmFjdG9yeVxuICApIHt9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSByZXNvdXJjZSBpZiBpdCBleGlzdHMgaW4gdGhlIGlucHV0IHNjb3BlLiBPdGhlcndpc2UsXG4gICAqIGNyZWF0ZXMgYSBuZXcgb25lLlxuICAgKi9cbiAgZ2V0T3JDcmVhdGUgPSAoXG4gICAgc2NvcGU6IENvbnN0cnVjdCxcbiAgICBzZWNyZXROYW1lOiBzdHJpbmcsXG4gICAgYmFja2VuZElkZW50aWZpZXI6IEJhY2tlbmRJZGVudGlmaWVyXG4gICk6IFNlY3JldEZldGNoZXJDdXN0b21SZXNvdXJjZSA9PiB7XG4gICAgY29uc3Qgc2VjcmV0UmVzb3VyY2VJZCA9IGBBbXBsaWZ5U2VjcmV0RmV0Y2hlclJlc291cmNlYDtcbiAgICBjb25zdCBleGlzdGluZ1Jlc291cmNlID0gc2NvcGUubm9kZS50cnlGaW5kQ2hpbGQoXG4gICAgICBzZWNyZXRSZXNvdXJjZUlkXG4gICAgKSBhcyBTZWNyZXRGZXRjaGVyQ3VzdG9tUmVzb3VyY2U7XG5cbiAgICBpZiAoZXhpc3RpbmdSZXNvdXJjZSkge1xuICAgICAgZXhpc3RpbmdSZXNvdXJjZS5hZGRTZWNyZXQoc2VjcmV0TmFtZSk7XG4gICAgICByZXR1cm4gZXhpc3RpbmdSZXNvdXJjZTtcbiAgICB9XG4gICAgY29uc3Qgc2VjcmV0czogU2V0PHN0cmluZz4gPSBuZXcgU2V0KCk7XG4gICAgc2VjcmV0cy5hZGQoc2VjcmV0TmFtZSk7XG5cbiAgICBjb25zdCBwcm92aWRlciA9IHRoaXMuc2VjcmV0UHJvdmlkZXJGYWN0b3J5LmdldE9yQ3JlYXRlSW5zdGFuY2UoXG4gICAgICBzY29wZSxcbiAgICAgIFNFQ1JFVF9SRVNPVVJDRV9QUk9WSURFUl9JRCxcbiAgICAgIGJhY2tlbmRJZGVudGlmaWVyXG4gICAgKTtcblxuICAgIC8vIFNhbmRib3ggZGVwbG95bWVudCBwYXNzZXMgZG93biB0aGUgc2VjcmV0J3MgbGFzdCB1cGRhdGVkIHRpbWVzdGFtcCB0b1xuICAgIC8vIHRyaWdnZXIgc2VjcmV0IHVwZGF0ZS4gSXQgaXMgdG8gb3B0aW1pemUgc2FuZGJveCBkZXBsb3ltZW50IHRpbWUgYnlcbiAgICAvLyBsZXZlcmFnaW5nIGNkayBob3Rzd2FwLlxuICAgIGNvbnN0IHNlY3JldExhc3RVcGRhdGVkID1cbiAgICAgIHNjb3BlLm5vZGUudHJ5R2V0Q29udGV4dCgnc2VjcmV0TGFzdFVwZGF0ZWQnKSA/PyBEYXRlLm5vdygpO1xuXG4gICAgY29uc3QgY3VzdG9tUmVzb3VyY2VQcm9wczogU2VjcmV0UmVzb3VyY2VQcm9wcyA9IHtcbiAgICAgIG5hbWVzcGFjZTogYmFja2VuZElkZW50aWZpZXIubmFtZXNwYWNlLFxuICAgICAgbmFtZTogYmFja2VuZElkZW50aWZpZXIubmFtZSxcbiAgICAgIHR5cGU6IGJhY2tlbmRJZGVudGlmaWVyLnR5cGUsXG4gICAgICBzZWNyZXROYW1lczogTGF6eS5saXN0KHtcbiAgICAgICAgcHJvZHVjZTogKCkgPT4ge1xuICAgICAgICAgIHJldHVybiBBcnJheS5mcm9tKHNlY3JldHMpO1xuICAgICAgICB9LFxuICAgICAgfSksXG4gICAgfTtcblxuICAgIHJldHVybiBuZXcgU2VjcmV0RmV0Y2hlckN1c3RvbVJlc291cmNlKFxuICAgICAgc2NvcGUsXG4gICAgICBzZWNyZXRSZXNvdXJjZUlkLFxuICAgICAge1xuICAgICAgICBzZXJ2aWNlVG9rZW46IHByb3ZpZGVyLnNlcnZpY2VUb2tlbixcbiAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgIC4uLmN1c3RvbVJlc291cmNlUHJvcHMsXG4gICAgICAgICAgc2VjcmV0TGFzdFVwZGF0ZWQsIC8vIHRoaXMgcHJvcGVydHkgaXMgb25seSB0byB0cmlnZ2VyIHJlc291cmNlIHVwZGF0ZSBldmVudC5cbiAgICAgICAgfSxcbiAgICAgICAgcmVzb3VyY2VUeXBlOiBTRUNSRVRfUkVTT1VSQ0VfVFlQRSxcbiAgICAgIH0sXG4gICAgICBzZWNyZXRzXG4gICAgKTtcbiAgfTtcbn1cbiJdfQ==