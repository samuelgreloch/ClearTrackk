import { getSecretClient, } from '@aws-amplify/backend-secret';
import { randomUUID } from 'node:crypto';
const secretClient = getSecretClient();
/**
 * Entry point for the lambda-backend custom resource to retrieve a backend secret.
 */
export const handler = async (event) => {
    console.info(`Received '${event.RequestType}' event`);
    const physicalId = event.RequestType === 'Create' ? randomUUID() : event.PhysicalResourceId;
    let data = undefined;
    if (event.RequestType === 'Update' || event.RequestType === 'Create') {
        const secretMap = await handleCreateUpdateEvent(secretClient, event);
        data = {
            ...secretMap,
        };
    }
    return {
        RequestId: event.RequestId,
        LogicalResourceId: event.LogicalResourceId,
        PhysicalResourceId: physicalId,
        Data: data,
        StackId: event.StackId,
        NoEcho: true,
        Status: 'SUCCESS',
    };
};
/**
 * Handles create/update event for the secret custom resource.
 */
export const handleCreateUpdateEvent = async (secretClient, event) => {
    const props = event.ResourceProperties;
    const secretMap = {};
    for (const secretName of props.secretNames) {
        let secretValue = undefined;
        try {
            const resp = await secretClient.getSecret({
                namespace: props.namespace,
                name: props.name,
                type: props.type,
            }, {
                name: secretName,
            });
            secretValue = resp.value;
        }
        catch (err) {
            const secretErr = err;
            if (secretErr.httpStatusCode && secretErr.httpStatusCode >= 500) {
                throw new Error(`Failed to retrieve backend secret '${secretName}' for '${props.namespace}/${props.name}'. Reason: ${JSON.stringify(err)}`, { cause: secretErr });
            }
        }
        // if the secret is not available in branch path, try retrieving it at the app-level.
        if (!secretValue) {
            try {
                const resp = await secretClient.getSecret(props.namespace, {
                    name: secretName,
                });
                secretValue = resp.value;
            }
            catch (err) {
                throw new Error(`Failed to retrieve backend secret '${secretName}' for '${props.namespace}'. Reason: ${JSON.stringify(err)}`, { cause: err });
            }
        }
        if (!secretValue) {
            throw new Error(`Unable to find backend secret for backend '${props.namespace}', branch '${props.name}', name '${secretName}'`);
        }
        // store the secret->secretValue pair in the secret map
        secretMap[secretName] = secretValue;
    }
    return secretMap;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2VuZF9zZWNyZXRfZmV0Y2hlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9lbmdpbmUvYmFja2VuZC1zZWNyZXQvbGFtYmRhL2JhY2tlbmRfc2VjcmV0X2ZldGNoZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsT0FBTyxFQUdMLGVBQWUsR0FDaEIsTUFBTSw2QkFBNkIsQ0FBQztBQUNyQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBR3pDLE1BQU0sWUFBWSxHQUFHLGVBQWUsRUFBRSxDQUFDO0FBRXZDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLEtBQUssRUFDMUIsS0FBd0MsRUFDYyxFQUFFO0lBQ3hELE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxLQUFLLENBQUMsV0FBVyxTQUFTLENBQUMsQ0FBQztJQUV0RCxNQUFNLFVBQVUsR0FDZCxLQUFLLENBQUMsV0FBVyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQztJQUMzRSxJQUFJLElBQUksR0FBdUMsU0FBUyxDQUFDO0lBQ3pELElBQUksS0FBSyxDQUFDLFdBQVcsS0FBSyxRQUFRLElBQUksS0FBSyxDQUFDLFdBQVcsS0FBSyxRQUFRLEVBQUU7UUFDcEUsTUFBTSxTQUFTLEdBQUcsTUFBTSx1QkFBdUIsQ0FBQyxZQUFZLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDckUsSUFBSSxHQUFHO1lBQ0wsR0FBRyxTQUFTO1NBQ2IsQ0FBQztLQUNIO0lBRUQsT0FBTztRQUNMLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztRQUMxQixpQkFBaUIsRUFBRSxLQUFLLENBQUMsaUJBQWlCO1FBQzFDLGtCQUFrQixFQUFFLFVBQVU7UUFDOUIsSUFBSSxFQUFFLElBQUk7UUFDVixPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87UUFDdEIsTUFBTSxFQUFFLElBQUk7UUFDWixNQUFNLEVBQUUsU0FBUztLQUM2QixDQUFDO0FBQ25ELENBQUMsQ0FBQztBQUVGOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsS0FBSyxFQUMxQyxZQUEwQixFQUMxQixLQUF3QyxFQUNQLEVBQUU7SUFDbkMsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLGtCQUFvRCxDQUFDO0lBQ3pFLE1BQU0sU0FBUyxHQUEyQixFQUFFLENBQUM7SUFDN0MsS0FBSyxNQUFNLFVBQVUsSUFBSSxLQUFLLENBQUMsV0FBVyxFQUFFO1FBQzFDLElBQUksV0FBVyxHQUF1QixTQUFTLENBQUM7UUFDaEQsSUFBSTtZQUNGLE1BQU0sSUFBSSxHQUFHLE1BQU0sWUFBWSxDQUFDLFNBQVMsQ0FDdkM7Z0JBQ0UsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTO2dCQUMxQixJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUk7Z0JBQ2hCLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTthQUNqQixFQUNEO2dCQUNFLElBQUksRUFBRSxVQUFVO2FBQ2pCLENBQ0YsQ0FBQztZQUNGLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1NBQzFCO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixNQUFNLFNBQVMsR0FBRyxHQUFrQixDQUFDO1lBQ3JDLElBQUksU0FBUyxDQUFDLGNBQWMsSUFBSSxTQUFTLENBQUMsY0FBYyxJQUFJLEdBQUcsRUFBRTtnQkFDL0QsTUFBTSxJQUFJLEtBQUssQ0FDYixzQ0FBc0MsVUFBVSxVQUM5QyxLQUFLLENBQUMsU0FDUixJQUFJLEtBQUssQ0FBQyxJQUFJLGNBQWMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUNqRCxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsQ0FDckIsQ0FBQzthQUNIO1NBQ0Y7UUFFRCxxRkFBcUY7UUFDckYsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNoQixJQUFJO2dCQUNGLE1BQU0sSUFBSSxHQUFHLE1BQU0sWUFBWSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFO29CQUN6RCxJQUFJLEVBQUUsVUFBVTtpQkFDakIsQ0FBQyxDQUFDO2dCQUNILFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO2FBQzFCO1lBQUMsT0FBTyxHQUFHLEVBQUU7Z0JBQ1osTUFBTSxJQUFJLEtBQUssQ0FDYixzQ0FBc0MsVUFBVSxVQUM5QyxLQUFLLENBQUMsU0FDUixjQUFjLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFDbkMsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQ2YsQ0FBQzthQUNIO1NBQ0Y7UUFFRCxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ2hCLE1BQU0sSUFBSSxLQUFLLENBQ2IsOENBQThDLEtBQUssQ0FBQyxTQUFTLGNBQWMsS0FBSyxDQUFDLElBQUksWUFBWSxVQUFVLEdBQUcsQ0FDL0csQ0FBQztTQUNIO1FBRUQsdURBQXVEO1FBQ3ZELFNBQVMsQ0FBQyxVQUFVLENBQUMsR0FBRyxXQUFXLENBQUM7S0FDckM7SUFFRCxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDbG91ZEZvcm1hdGlvbkN1c3RvbVJlc291cmNlRXZlbnQsXG4gIENsb3VkRm9ybWF0aW9uQ3VzdG9tUmVzb3VyY2VTdWNjZXNzUmVzcG9uc2UsXG59IGZyb20gJ2F3cy1sYW1iZGEnO1xuaW1wb3J0IHtcbiAgU2VjcmV0Q2xpZW50LFxuICBTZWNyZXRFcnJvcixcbiAgZ2V0U2VjcmV0Q2xpZW50LFxufSBmcm9tICdAYXdzLWFtcGxpZnkvYmFja2VuZC1zZWNyZXQnO1xuaW1wb3J0IHsgcmFuZG9tVVVJRCB9IGZyb20gJ25vZGU6Y3J5cHRvJztcbmltcG9ydCB7IFNlY3JldFJlc291cmNlUHJvcHMgfSBmcm9tICcuL2JhY2tlbmRfc2VjcmV0X2ZldGNoZXJfdHlwZXMuanMnO1xuXG5jb25zdCBzZWNyZXRDbGllbnQgPSBnZXRTZWNyZXRDbGllbnQoKTtcblxuLyoqXG4gKiBFbnRyeSBwb2ludCBmb3IgdGhlIGxhbWJkYS1iYWNrZW5kIGN1c3RvbSByZXNvdXJjZSB0byByZXRyaWV2ZSBhIGJhY2tlbmQgc2VjcmV0LlxuICovXG5leHBvcnQgY29uc3QgaGFuZGxlciA9IGFzeW5jIChcbiAgZXZlbnQ6IENsb3VkRm9ybWF0aW9uQ3VzdG9tUmVzb3VyY2VFdmVudFxuKTogUHJvbWlzZTxDbG91ZEZvcm1hdGlvbkN1c3RvbVJlc291cmNlU3VjY2Vzc1Jlc3BvbnNlPiA9PiB7XG4gIGNvbnNvbGUuaW5mbyhgUmVjZWl2ZWQgJyR7ZXZlbnQuUmVxdWVzdFR5cGV9JyBldmVudGApO1xuXG4gIGNvbnN0IHBoeXNpY2FsSWQgPVxuICAgIGV2ZW50LlJlcXVlc3RUeXBlID09PSAnQ3JlYXRlJyA/IHJhbmRvbVVVSUQoKSA6IGV2ZW50LlBoeXNpY2FsUmVzb3VyY2VJZDtcbiAgbGV0IGRhdGE6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG4gIGlmIChldmVudC5SZXF1ZXN0VHlwZSA9PT0gJ1VwZGF0ZScgfHwgZXZlbnQuUmVxdWVzdFR5cGUgPT09ICdDcmVhdGUnKSB7XG4gICAgY29uc3Qgc2VjcmV0TWFwID0gYXdhaXQgaGFuZGxlQ3JlYXRlVXBkYXRlRXZlbnQoc2VjcmV0Q2xpZW50LCBldmVudCk7XG4gICAgZGF0YSA9IHtcbiAgICAgIC4uLnNlY3JldE1hcCxcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBSZXF1ZXN0SWQ6IGV2ZW50LlJlcXVlc3RJZCxcbiAgICBMb2dpY2FsUmVzb3VyY2VJZDogZXZlbnQuTG9naWNhbFJlc291cmNlSWQsXG4gICAgUGh5c2ljYWxSZXNvdXJjZUlkOiBwaHlzaWNhbElkLFxuICAgIERhdGE6IGRhdGEsXG4gICAgU3RhY2tJZDogZXZlbnQuU3RhY2tJZCxcbiAgICBOb0VjaG86IHRydWUsXG4gICAgU3RhdHVzOiAnU1VDQ0VTUycsXG4gIH0gYXMgQ2xvdWRGb3JtYXRpb25DdXN0b21SZXNvdXJjZVN1Y2Nlc3NSZXNwb25zZTtcbn07XG5cbi8qKlxuICogSGFuZGxlcyBjcmVhdGUvdXBkYXRlIGV2ZW50IGZvciB0aGUgc2VjcmV0IGN1c3RvbSByZXNvdXJjZS5cbiAqL1xuZXhwb3J0IGNvbnN0IGhhbmRsZUNyZWF0ZVVwZGF0ZUV2ZW50ID0gYXN5bmMgKFxuICBzZWNyZXRDbGllbnQ6IFNlY3JldENsaWVudCxcbiAgZXZlbnQ6IENsb3VkRm9ybWF0aW9uQ3VzdG9tUmVzb3VyY2VFdmVudFxuKTogUHJvbWlzZTxSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+PiA9PiB7XG4gIGNvbnN0IHByb3BzID0gZXZlbnQuUmVzb3VyY2VQcm9wZXJ0aWVzIGFzIHVua25vd24gYXMgU2VjcmV0UmVzb3VyY2VQcm9wcztcbiAgY29uc3Qgc2VjcmV0TWFwOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge307XG4gIGZvciAoY29uc3Qgc2VjcmV0TmFtZSBvZiBwcm9wcy5zZWNyZXROYW1lcykge1xuICAgIGxldCBzZWNyZXRWYWx1ZTogc3RyaW5nIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwID0gYXdhaXQgc2VjcmV0Q2xpZW50LmdldFNlY3JldChcbiAgICAgICAge1xuICAgICAgICAgIG5hbWVzcGFjZTogcHJvcHMubmFtZXNwYWNlLFxuICAgICAgICAgIG5hbWU6IHByb3BzLm5hbWUsXG4gICAgICAgICAgdHlwZTogcHJvcHMudHlwZSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6IHNlY3JldE5hbWUsXG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgICBzZWNyZXRWYWx1ZSA9IHJlc3AudmFsdWU7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjb25zdCBzZWNyZXRFcnIgPSBlcnIgYXMgU2VjcmV0RXJyb3I7XG4gICAgICBpZiAoc2VjcmV0RXJyLmh0dHBTdGF0dXNDb2RlICYmIHNlY3JldEVyci5odHRwU3RhdHVzQ29kZSA+PSA1MDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBGYWlsZWQgdG8gcmV0cmlldmUgYmFja2VuZCBzZWNyZXQgJyR7c2VjcmV0TmFtZX0nIGZvciAnJHtcbiAgICAgICAgICAgIHByb3BzLm5hbWVzcGFjZVxuICAgICAgICAgIH0vJHtwcm9wcy5uYW1lfScuIFJlYXNvbjogJHtKU09OLnN0cmluZ2lmeShlcnIpfWAsXG4gICAgICAgICAgeyBjYXVzZTogc2VjcmV0RXJyIH1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBpZiB0aGUgc2VjcmV0IGlzIG5vdCBhdmFpbGFibGUgaW4gYnJhbmNoIHBhdGgsIHRyeSByZXRyaWV2aW5nIGl0IGF0IHRoZSBhcHAtbGV2ZWwuXG4gICAgaWYgKCFzZWNyZXRWYWx1ZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzcCA9IGF3YWl0IHNlY3JldENsaWVudC5nZXRTZWNyZXQocHJvcHMubmFtZXNwYWNlLCB7XG4gICAgICAgICAgbmFtZTogc2VjcmV0TmFtZSxcbiAgICAgICAgfSk7XG4gICAgICAgIHNlY3JldFZhbHVlID0gcmVzcC52YWx1ZTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYEZhaWxlZCB0byByZXRyaWV2ZSBiYWNrZW5kIHNlY3JldCAnJHtzZWNyZXROYW1lfScgZm9yICcke1xuICAgICAgICAgICAgcHJvcHMubmFtZXNwYWNlXG4gICAgICAgICAgfScuIFJlYXNvbjogJHtKU09OLnN0cmluZ2lmeShlcnIpfWAsXG4gICAgICAgICAgeyBjYXVzZTogZXJyIH1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXNlY3JldFZhbHVlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBVbmFibGUgdG8gZmluZCBiYWNrZW5kIHNlY3JldCBmb3IgYmFja2VuZCAnJHtwcm9wcy5uYW1lc3BhY2V9JywgYnJhbmNoICcke3Byb3BzLm5hbWV9JywgbmFtZSAnJHtzZWNyZXROYW1lfSdgXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIHN0b3JlIHRoZSBzZWNyZXQtPnNlY3JldFZhbHVlIHBhaXIgaW4gdGhlIHNlY3JldCBtYXBcbiAgICBzZWNyZXRNYXBbc2VjcmV0TmFtZV0gPSBzZWNyZXRWYWx1ZTtcbiAgfVxuXG4gIHJldHVybiBzZWNyZXRNYXA7XG59O1xuIl19