import { ClientConfigFormat, } from '../client-config-types/client_config.js';
import os from 'os';
import { ClientConfigLegacyConverter } from './client_config_to_legacy_converter.js';
/**
 * Formats client config to desired format.
 */
export class ClientConfigFormatterLegacy {
    configConverter;
    /**
     * Creates new client config formatter.
     */
    constructor(configConverter) {
        this.configConverter = configConverter;
    }
    format = (clientConfig, format) => {
        // This library only generates unified ClientConfig but older version of frontend libraries only support legacy format. So we convert it first.
        const legacyConfig = new ClientConfigLegacyConverter().convertToLegacyConfig(clientConfig);
        switch (format) {
            case ClientConfigFormat.TS:
            case ClientConfigFormat.MJS: {
                return `const amplifyConfig = ${JSON.stringify(legacyConfig, null, 2)}${os.EOL}export default amplifyConfig;${os.EOL}`;
            }
            case ClientConfigFormat.DART: {
                // Using raw string, i.e. r''' to disable Dart's interpolations
                // because we're using special characters like $ in some outputs.
                return `const amplifyConfig = r'''${JSON.stringify(this.configConverter.convertToMobileConfig(legacyConfig), null, 2)}''';`;
            }
            case ClientConfigFormat.JSON_MOBILE:
                return JSON.stringify(this.configConverter.convertToMobileConfig(legacyConfig), null, 2);
            case ClientConfigFormat.JSON:
                return JSON.stringify(legacyConfig, null, 2);
            default:
                throw new Error(`Unknown client config format`);
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50X2NvbmZpZ19mb3JtYXR0ZXJfbGVnYWN5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NsaWVudC1jb25maWctd3JpdGVyL2NsaWVudF9jb25maWdfZm9ybWF0dGVyX2xlZ2FjeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRUwsa0JBQWtCLEdBQ25CLE1BQU0seUNBQXlDLENBQUM7QUFDakQsT0FBTyxFQUFFLE1BQU0sSUFBSSxDQUFDO0FBRXBCLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBR3JGOztHQUVHO0FBQ0gsTUFBTSxPQUFPLDJCQUEyQjtJQUlUO0lBSDdCOztPQUVHO0lBQ0gsWUFBNkIsZUFBNEM7UUFBNUMsb0JBQWUsR0FBZixlQUFlLENBQTZCO0lBQUcsQ0FBQztJQUU3RSxNQUFNLEdBQUcsQ0FBQyxZQUEwQixFQUFFLE1BQTBCLEVBQVUsRUFBRTtRQUMxRSwrSUFBK0k7UUFDL0ksTUFBTSxZQUFZLEdBQ2hCLElBQUksMkJBQTJCLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUV4RSxRQUFRLE1BQU0sRUFBRTtZQUNkLEtBQUssa0JBQWtCLENBQUMsRUFBRSxDQUFDO1lBQzNCLEtBQUssa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQzNCLE9BQU8seUJBQXlCLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsR0FDbkUsRUFBRSxDQUFDLEdBQ0wsZ0NBQWdDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQzthQUMxQztZQUNELEtBQUssa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQzVCLCtEQUErRDtnQkFDL0QsaUVBQWlFO2dCQUNqRSxPQUFPLDZCQUE2QixJQUFJLENBQUMsU0FBUyxDQUNoRCxJQUFJLENBQUMsZUFBZSxDQUFDLHFCQUFxQixDQUFDLFlBQVksQ0FBQyxFQUN4RCxJQUFJLEVBQ0osQ0FBQyxDQUNGLE1BQU0sQ0FBQzthQUNUO1lBQ0QsS0FBSyxrQkFBa0IsQ0FBQyxXQUFXO2dCQUNqQyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQ25CLElBQUksQ0FBQyxlQUFlLENBQUMscUJBQXFCLENBQUMsWUFBWSxDQUFDLEVBQ3hELElBQUksRUFDSixDQUFDLENBQ0YsQ0FBQztZQUNKLEtBQUssa0JBQWtCLENBQUMsSUFBSTtnQkFDMUIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDL0M7Z0JBQ0UsTUFBTSxJQUFJLEtBQUssQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO1NBQ25EO0lBQ0gsQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDbGllbnRDb25maWcsXG4gIENsaWVudENvbmZpZ0Zvcm1hdCxcbn0gZnJvbSAnLi4vY2xpZW50LWNvbmZpZy10eXBlcy9jbGllbnRfY29uZmlnLmpzJztcbmltcG9ydCBvcyBmcm9tICdvcyc7XG5pbXBvcnQgeyBDbGllbnRDb25maWdNb2JpbGVDb252ZXJ0ZXIgfSBmcm9tICcuL2NsaWVudF9jb25maWdfdG9fbW9iaWxlX2xlZ2FjeV9jb252ZXJ0ZXIuanMnO1xuaW1wb3J0IHsgQ2xpZW50Q29uZmlnTGVnYWN5Q29udmVydGVyIH0gZnJvbSAnLi9jbGllbnRfY29uZmlnX3RvX2xlZ2FjeV9jb252ZXJ0ZXIuanMnO1xuaW1wb3J0IHsgQ2xpZW50Q29uZmlnRm9ybWF0dGVyIH0gZnJvbSAnLi9jbGllbnRfY29uZmlnX2Zvcm1hdHRlci5qcyc7XG5cbi8qKlxuICogRm9ybWF0cyBjbGllbnQgY29uZmlnIHRvIGRlc2lyZWQgZm9ybWF0LlxuICovXG5leHBvcnQgY2xhc3MgQ2xpZW50Q29uZmlnRm9ybWF0dGVyTGVnYWN5IGltcGxlbWVudHMgQ2xpZW50Q29uZmlnRm9ybWF0dGVyIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgbmV3IGNsaWVudCBjb25maWcgZm9ybWF0dGVyLlxuICAgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBjb25maWdDb252ZXJ0ZXI6IENsaWVudENvbmZpZ01vYmlsZUNvbnZlcnRlcikge31cblxuICBmb3JtYXQgPSAoY2xpZW50Q29uZmlnOiBDbGllbnRDb25maWcsIGZvcm1hdDogQ2xpZW50Q29uZmlnRm9ybWF0KTogc3RyaW5nID0+IHtcbiAgICAvLyBUaGlzIGxpYnJhcnkgb25seSBnZW5lcmF0ZXMgdW5pZmllZCBDbGllbnRDb25maWcgYnV0IG9sZGVyIHZlcnNpb24gb2YgZnJvbnRlbmQgbGlicmFyaWVzIG9ubHkgc3VwcG9ydCBsZWdhY3kgZm9ybWF0LiBTbyB3ZSBjb252ZXJ0IGl0IGZpcnN0LlxuICAgIGNvbnN0IGxlZ2FjeUNvbmZpZyA9XG4gICAgICBuZXcgQ2xpZW50Q29uZmlnTGVnYWN5Q29udmVydGVyKCkuY29udmVydFRvTGVnYWN5Q29uZmlnKGNsaWVudENvbmZpZyk7XG5cbiAgICBzd2l0Y2ggKGZvcm1hdCkge1xuICAgICAgY2FzZSBDbGllbnRDb25maWdGb3JtYXQuVFM6XG4gICAgICBjYXNlIENsaWVudENvbmZpZ0Zvcm1hdC5NSlM6IHtcbiAgICAgICAgcmV0dXJuIGBjb25zdCBhbXBsaWZ5Q29uZmlnID0gJHtKU09OLnN0cmluZ2lmeShsZWdhY3lDb25maWcsIG51bGwsIDIpfSR7XG4gICAgICAgICAgb3MuRU9MXG4gICAgICAgIH1leHBvcnQgZGVmYXVsdCBhbXBsaWZ5Q29uZmlnOyR7b3MuRU9MfWA7XG4gICAgICB9XG4gICAgICBjYXNlIENsaWVudENvbmZpZ0Zvcm1hdC5EQVJUOiB7XG4gICAgICAgIC8vIFVzaW5nIHJhdyBzdHJpbmcsIGkuZS4gcicnJyB0byBkaXNhYmxlIERhcnQncyBpbnRlcnBvbGF0aW9uc1xuICAgICAgICAvLyBiZWNhdXNlIHdlJ3JlIHVzaW5nIHNwZWNpYWwgY2hhcmFjdGVycyBsaWtlICQgaW4gc29tZSBvdXRwdXRzLlxuICAgICAgICByZXR1cm4gYGNvbnN0IGFtcGxpZnlDb25maWcgPSByJycnJHtKU09OLnN0cmluZ2lmeShcbiAgICAgICAgICB0aGlzLmNvbmZpZ0NvbnZlcnRlci5jb252ZXJ0VG9Nb2JpbGVDb25maWcobGVnYWN5Q29uZmlnKSxcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIDJcbiAgICAgICAgKX0nJyc7YDtcbiAgICAgIH1cbiAgICAgIGNhc2UgQ2xpZW50Q29uZmlnRm9ybWF0LkpTT05fTU9CSUxFOlxuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoXG4gICAgICAgICAgdGhpcy5jb25maWdDb252ZXJ0ZXIuY29udmVydFRvTW9iaWxlQ29uZmlnKGxlZ2FjeUNvbmZpZyksXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICAyXG4gICAgICAgICk7XG4gICAgICBjYXNlIENsaWVudENvbmZpZ0Zvcm1hdC5KU09OOlxuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkobGVnYWN5Q29uZmlnLCBudWxsLCAyKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBjbGllbnQgY29uZmlnIGZvcm1hdGApO1xuICAgIH1cbiAgfTtcbn1cbiJdfQ==