// Versions of new unified config schemas
import * as clientConfigTypesV1 from '../client-config-schema/client_config_v1.js';
/* eslint-disable @typescript-eslint/naming-convention */
import * as clientConfigTypesV1_1 from '../client-config-schema/client_config_v1.1.js';
import * as clientConfigTypesV1_2 from '../client-config-schema/client_config_v1.2.js';
import * as clientConfigTypesV1_3 from '../client-config-schema/client_config_v1.3.js';
export { clientConfigTypesV1, clientConfigTypesV1_1, clientConfigTypesV1_2, clientConfigTypesV1_3, };
export var ClientConfigVersionOption;
(function (ClientConfigVersionOption) {
    ClientConfigVersionOption["V0"] = "0";
    ClientConfigVersionOption["V1"] = "1";
    ClientConfigVersionOption["V1_1"] = "1.1";
    ClientConfigVersionOption["V1_2"] = "1.2";
    ClientConfigVersionOption["V1_3"] = "1.3";
})(ClientConfigVersionOption || (ClientConfigVersionOption = {}));
// Client config version that is generated by default if customers didn't specify one
export const DEFAULT_CLIENT_CONFIG_VERSION = ClientConfigVersionOption.V1_3;
export var ClientConfigFormat;
(function (ClientConfigFormat) {
    ClientConfigFormat["MJS"] = "mjs";
    ClientConfigFormat["JSON"] = "json";
    ClientConfigFormat["JSON_MOBILE"] = "json-mobile";
    ClientConfigFormat["TS"] = "ts";
    ClientConfigFormat["DART"] = "dart";
})(ClientConfigFormat || (ClientConfigFormat = {}));
export var ClientConfigFileBaseName;
(function (ClientConfigFileBaseName) {
    ClientConfigFileBaseName["LEGACY"] = "amplifyconfiguration";
    ClientConfigFileBaseName["DEFAULT"] = "amplify_outputs";
})(ClientConfigFileBaseName || (ClientConfigFileBaseName = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50X2NvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGllbnQtY29uZmlnLXR5cGVzL2NsaWVudF9jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBU0EseUNBQXlDO0FBQ3pDLE9BQU8sS0FBSyxtQkFBbUIsTUFBTSw2Q0FBNkMsQ0FBQztBQUNuRix5REFBeUQ7QUFDekQsT0FBTyxLQUFLLHFCQUFxQixNQUFNLCtDQUErQyxDQUFDO0FBQ3ZGLE9BQU8sS0FBSyxxQkFBcUIsTUFBTSwrQ0FBK0MsQ0FBQztBQUN2RixPQUFPLEtBQUsscUJBQXFCLE1BQU0sK0NBQStDLENBQUM7QUE0QnZGLE9BQU8sRUFDTCxtQkFBbUIsRUFDbkIscUJBQXFCLEVBQ3JCLHFCQUFxQixFQUNyQixxQkFBcUIsR0FDdEIsQ0FBQztBQUVGLE1BQU0sQ0FBTixJQUFZLHlCQU1YO0FBTkQsV0FBWSx5QkFBeUI7SUFDbkMscUNBQVEsQ0FBQTtJQUNSLHFDQUFRLENBQUE7SUFDUix5Q0FBWSxDQUFBO0lBQ1oseUNBQVksQ0FBQTtJQUNaLHlDQUFZLENBQUE7QUFDZCxDQUFDLEVBTlcseUJBQXlCLEtBQXpCLHlCQUF5QixRQU1wQztBQUlELHFGQUFxRjtBQUNyRixNQUFNLENBQUMsTUFBTSw2QkFBNkIsR0FDeEMseUJBQXlCLENBQUMsSUFBSSxDQUFDO0FBdUJqQyxNQUFNLENBQU4sSUFBWSxrQkFNWDtBQU5ELFdBQVksa0JBQWtCO0lBQzVCLGlDQUFXLENBQUE7SUFDWCxtQ0FBYSxDQUFBO0lBQ2IsaURBQTJCLENBQUE7SUFDM0IsK0JBQVMsQ0FBQTtJQUNULG1DQUFhLENBQUE7QUFDZixDQUFDLEVBTlcsa0JBQWtCLEtBQWxCLGtCQUFrQixRQU03QjtBQUVELE1BQU0sQ0FBTixJQUFZLHdCQUdYO0FBSEQsV0FBWSx3QkFBd0I7SUFDbEMsMkRBQStCLENBQUE7SUFDL0IsdURBQTJCLENBQUE7QUFDN0IsQ0FBQyxFQUhXLHdCQUF3QixLQUF4Qix3QkFBd0IsUUFHbkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBdXRoQ2xpZW50Q29uZmlnIH0gZnJvbSAnLi9hdXRoX2NsaWVudF9jb25maWcuanMnO1xuaW1wb3J0IHsgR3JhcGhxbENsaWVudENvbmZpZyB9IGZyb20gJy4vZ3JhcGhxbF9jbGllbnRfY29uZmlnLmpzJztcbmltcG9ydCB7IFBsYXRmb3JtQ2xpZW50Q29uZmlnIH0gZnJvbSAnLi9wbGF0Zm9ybV9jbGllbnRfY29uZmlnLmpzJztcbmltcG9ydCB7IFN0b3JhZ2VDbGllbnRDb25maWcgfSBmcm9tICcuL3N0b3JhZ2VfY2xpZW50X2NvbmZpZy5qcyc7XG5pbXBvcnQgeyBDdXN0b21DbGllbnRDb25maWcgfSBmcm9tICcuL2N1c3RvbV9jbGllbnRfY29uZmlnLmpzJztcbmltcG9ydCB7IEdlb0NsaWVudENvbmZpZyB9IGZyb20gJy4vZ2VvX2NsaWVudF9jb25maWcuanMnO1xuaW1wb3J0IHsgQW5hbHl0aWNzQ2xpZW50Q29uZmlnIH0gZnJvbSAnLi9hbmFseXRpY3NfY2xpZW50X2NvbmZpZy5qcyc7XG5pbXBvcnQgeyBOb3RpZmljYXRpb25zQ2xpZW50Q29uZmlnIH0gZnJvbSAnLi9ub3RpZmljYXRpb25zX2NsaWVudF9jb25maWcuanMnO1xuXG4vLyBWZXJzaW9ucyBvZiBuZXcgdW5pZmllZCBjb25maWcgc2NoZW1hc1xuaW1wb3J0ICogYXMgY2xpZW50Q29uZmlnVHlwZXNWMSBmcm9tICcuLi9jbGllbnQtY29uZmlnLXNjaGVtYS9jbGllbnRfY29uZmlnX3YxLmpzJztcbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvbiAqL1xuaW1wb3J0ICogYXMgY2xpZW50Q29uZmlnVHlwZXNWMV8xIGZyb20gJy4uL2NsaWVudC1jb25maWctc2NoZW1hL2NsaWVudF9jb25maWdfdjEuMS5qcyc7XG5pbXBvcnQgKiBhcyBjbGllbnRDb25maWdUeXBlc1YxXzIgZnJvbSAnLi4vY2xpZW50LWNvbmZpZy1zY2hlbWEvY2xpZW50X2NvbmZpZ192MS4yLmpzJztcbmltcG9ydCAqIGFzIGNsaWVudENvbmZpZ1R5cGVzVjFfMyBmcm9tICcuLi9jbGllbnQtY29uZmlnLXNjaGVtYS9jbGllbnRfY29uZmlnX3YxLjMuanMnO1xuLyogZXNsaW50LWVuYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb24gKi9cblxuLyoqXG4gKiBNZXJnZWQgdHlwZSBvZiBhbGwgY2F0ZWdvcnkgY2xpZW50IGNvbmZpZyBsZWdhY3kgdHlwZXNcbiAqL1xuZXhwb3J0IHR5cGUgQ2xpZW50Q29uZmlnTGVnYWN5ID0gUGFydGlhbDxcbiAgQW5hbHl0aWNzQ2xpZW50Q29uZmlnICZcbiAgICBBdXRoQ2xpZW50Q29uZmlnICZcbiAgICBHZW9DbGllbnRDb25maWcgJlxuICAgIEdyYXBocWxDbGllbnRDb25maWcgJlxuICAgIE5vdGlmaWNhdGlvbnNDbGllbnRDb25maWcgJlxuICAgIFN0b3JhZ2VDbGllbnRDb25maWcgJlxuICAgIFBsYXRmb3JtQ2xpZW50Q29uZmlnICZcbiAgICBDdXN0b21DbGllbnRDb25maWdcbj47XG5cbi8qKlxuICogVmVyc2lvbnMgb2YgY2xpZW50IGNvbmZpZyBzY2hlbWEgc3VwcG9ydGVkIGJ5IFwidGhpc1wiIHBhY2thZ2UgdmVyc2lvbi5cbiAqIENyZWF0ZSB1bmlvbiBmb3Igc3VwcG9ydGVkIHZlcnNpb25zIGhlcmUsIHN1Y2ggYXNcbiAqIENsaWVudENvbmZpZyA9IGNsaWVudENvbmZpZ1R5cGVzVjEuQVdTQW1wbGlmeUJhY2tlbmRPdXRwdXRzIHwgY2xpZW50Q29uZmlnVHlwZXNWMi5BV1NBbXBsaWZ5QmFja2VuZE91dHB1dHM7XG4gKi9cbmV4cG9ydCB0eXBlIENsaWVudENvbmZpZyA9XG4gIHwgY2xpZW50Q29uZmlnVHlwZXNWMV8zLkFXU0FtcGxpZnlCYWNrZW5kT3V0cHV0c1xuICB8IGNsaWVudENvbmZpZ1R5cGVzVjFfMi5BV1NBbXBsaWZ5QmFja2VuZE91dHB1dHNcbiAgfCBjbGllbnRDb25maWdUeXBlc1YxXzEuQVdTQW1wbGlmeUJhY2tlbmRPdXRwdXRzXG4gIHwgY2xpZW50Q29uZmlnVHlwZXNWMS5BV1NBbXBsaWZ5QmFja2VuZE91dHB1dHM7XG5cbmV4cG9ydCB7XG4gIGNsaWVudENvbmZpZ1R5cGVzVjEsXG4gIGNsaWVudENvbmZpZ1R5cGVzVjFfMSxcbiAgY2xpZW50Q29uZmlnVHlwZXNWMV8yLFxuICBjbGllbnRDb25maWdUeXBlc1YxXzMsXG59O1xuXG5leHBvcnQgZW51bSBDbGllbnRDb25maWdWZXJzaW9uT3B0aW9uIHtcbiAgVjAgPSAnMCcsIC8vIExlZ2FjeSBjbGllbnQgY29uZmlnXG4gIFYxID0gJzEnLFxuICBWMV8xID0gJzEuMScsXG4gIFYxXzIgPSAnMS4yJyxcbiAgVjFfMyA9ICcxLjMnLFxufVxuXG5leHBvcnQgdHlwZSBDbGllbnRDb25maWdWZXJzaW9uID0gYCR7Q2xpZW50Q29uZmlnVmVyc2lvbk9wdGlvbn1gO1xuXG4vLyBDbGllbnQgY29uZmlnIHZlcnNpb24gdGhhdCBpcyBnZW5lcmF0ZWQgYnkgZGVmYXVsdCBpZiBjdXN0b21lcnMgZGlkbid0IHNwZWNpZnkgb25lXG5leHBvcnQgY29uc3QgREVGQVVMVF9DTElFTlRfQ09ORklHX1ZFUlNJT046IENsaWVudENvbmZpZ1ZlcnNpb24gPVxuICBDbGllbnRDb25maWdWZXJzaW9uT3B0aW9uLlYxXzM7XG5cbi8qKlxuICogUmV0dXJuIHR5cGUgb2YgYGdldENsaWVudENvbmZpZ2AuIFRoaXMgdHlwZXMgbmFycm93IHRoZSByZXR1cm5lZCBjbGllbnQgY29uZmlnIHZlcnNpb25cbiAqIGlmIHRoZSBjYWxsZXIgc3BlY2lmaWVkIGEgc3RhdGljIHZlcnNpb24sIGUuZy4gYGdlbmVyYXRlQ2xpZW50Q29uZmlnKF8sIF8sIENsaWVudENvbmZpZ1ZlcnNpb25zLlYxKWBcbiAqXG4gKiBBZGQgbmV3IHN1cHBvcnRlZCB2ZXJzaW9uIGhlcmUgc3VjaCBhc1xuICogZXhwb3J0IHR5cGUgQ2xpZW50Q29uZmlnVmVyc2lvblR5cGU8VD4gPSBUIGV4dGVuZHMgJzEuMSdcbiAqID8gY2xpZW50Q29uZmlnVHlwZXNWMS5BV1NBbXBsaWZ5QmFja2VuZE91dHB1dHNcbiAqIDogVCBleHRlbmRzICcyJ1xuICogPyBjbGllbnRDb25maWdUeXBlc1YyLkFXU0FtcGxpZnlCYWNrZW5kT3V0cHV0c1xuICogOiBuZXZlcjtcbiAqL1xuZXhwb3J0IHR5cGUgQ2xpZW50Q29uZmlnVmVyc2lvblRlbXBsYXRlVHlwZTxUPiA9IFQgZXh0ZW5kcyAnMS4zJ1xuICA/IGNsaWVudENvbmZpZ1R5cGVzVjFfMy5BV1NBbXBsaWZ5QmFja2VuZE91dHB1dHNcbiAgOiBUIGV4dGVuZHMgJzEuMidcbiAgPyBjbGllbnRDb25maWdUeXBlc1YxXzIuQVdTQW1wbGlmeUJhY2tlbmRPdXRwdXRzXG4gIDogVCBleHRlbmRzICcxLjEnXG4gID8gY2xpZW50Q29uZmlnVHlwZXNWMV8xLkFXU0FtcGxpZnlCYWNrZW5kT3V0cHV0c1xuICA6IFQgZXh0ZW5kcyAnMSdcbiAgPyBjbGllbnRDb25maWdUeXBlc1YxLkFXU0FtcGxpZnlCYWNrZW5kT3V0cHV0c1xuICA6IG5ldmVyO1xuXG5leHBvcnQgZW51bSBDbGllbnRDb25maWdGb3JtYXQge1xuICBNSlMgPSAnbWpzJyxcbiAgSlNPTiA9ICdqc29uJyxcbiAgSlNPTl9NT0JJTEUgPSAnanNvbi1tb2JpbGUnLFxuICBUUyA9ICd0cycsXG4gIERBUlQgPSAnZGFydCcsXG59XG5cbmV4cG9ydCBlbnVtIENsaWVudENvbmZpZ0ZpbGVCYXNlTmFtZSB7XG4gIExFR0FDWSA9ICdhbXBsaWZ5Y29uZmlndXJhdGlvbicsXG4gIERFRkFVTFQgPSAnYW1wbGlmeV9vdXRwdXRzJyxcbn1cblxuZXhwb3J0IHR5cGUgR2VuZXJhdGVDbGllbnRDb25maWdUb0ZpbGVSZXN1bHQgPSB7XG4gIGZpbGVzV3JpdHRlbjogc3RyaW5nW107XG59O1xuIl19