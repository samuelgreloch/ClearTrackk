import { AmplifyFault } from '@aws-amplify/platform-core';
import { GetObjectCommand, NoSuchBucket } from '@aws-sdk/client-s3';
/**
 * Handles fetching an object from an s3 bucket and parsing the object contents to a string
 */
export class S3StringObjectFetcher {
    s3Client;
    /**
     * Creates an S3StringObjectFetcher with the provided s3 client
     */
    constructor(s3Client) {
        this.s3Client = s3Client;
    }
    /**
     * Fetches an s3 object and converts its contents to a string
     */
    fetch = async (uri) => {
        const { bucket, key } = this.parseS3Uri(uri);
        try {
            const getSchemaCommandResult = await this.s3Client.send(new GetObjectCommand({ Bucket: bucket, Key: key }));
            const schema = await getSchemaCommandResult.Body?.transformToString();
            if (!schema) {
                // eslint-disable-next-line amplify-backend-rules/prefer-amplify-errors
                throw new Error('Error on parsing output schema');
            }
            return schema;
        }
        catch (caught) {
            if (caught instanceof NoSuchBucket) {
                throw new AmplifyFault('NoSuchBucketFault', {
                    message: `${bucket} does not exist. \n
            Try redeploying your changes again, if the error persists, create a bug report here: https://github.com/aws-amplify/amplify-backend/issues/new/choose`,
                }, caught);
            }
            else {
                throw caught;
            }
        }
    };
    parseS3Uri = (uri) => {
        const { hostname, pathname } = new URL(uri);
        return {
            bucket: hostname,
            key: pathname.replace('/', ''),
        };
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiczNfc3RyaW5nX29iamVjdF9mZXRjaGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3MzX3N0cmluZ19vYmplY3RfZmV0Y2hlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFlBQVksRUFBWSxNQUFNLG9CQUFvQixDQUFDO0FBRTlFOztHQUVHO0FBQ0gsTUFBTSxPQUFPLHFCQUFxQjtJQUlIO0lBSDdCOztPQUVHO0lBQ0gsWUFBNkIsUUFBa0I7UUFBbEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtJQUFHLENBQUM7SUFFbkQ7O09BRUc7SUFDSCxLQUFLLEdBQUcsS0FBSyxFQUFFLEdBQVcsRUFBRSxFQUFFO1FBQzVCLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM3QyxJQUFJO1lBQ0YsTUFBTSxzQkFBc0IsR0FBRyxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUNyRCxJQUFJLGdCQUFnQixDQUFDLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FDbkQsQ0FBQztZQUNGLE1BQU0sTUFBTSxHQUFHLE1BQU0sc0JBQXNCLENBQUMsSUFBSSxFQUFFLGlCQUFpQixFQUFFLENBQUM7WUFDdEUsSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDWCx1RUFBdUU7Z0JBQ3ZFLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQzthQUNuRDtZQUNELE9BQU8sTUFBTSxDQUFDO1NBQ2Y7UUFBQyxPQUFPLE1BQU0sRUFBRTtZQUNmLElBQUksTUFBTSxZQUFZLFlBQVksRUFBRTtnQkFDbEMsTUFBTSxJQUFJLFlBQVksQ0FDcEIsbUJBQW1CLEVBQ25CO29CQUNFLE9BQU8sRUFBRSxHQUFHLE1BQU07a0tBQ29JO2lCQUN2SixFQUNELE1BQU0sQ0FDUCxDQUFDO2FBQ0g7aUJBQU07Z0JBQ0wsTUFBTSxNQUFNLENBQUM7YUFDZDtTQUNGO0lBQ0gsQ0FBQyxDQUFDO0lBRU0sVUFBVSxHQUFHLENBQUMsR0FBVyxFQUFtQyxFQUFFO1FBQ3BFLE1BQU0sRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDNUMsT0FBTztZQUNMLE1BQU0sRUFBRSxRQUFRO1lBQ2hCLEdBQUcsRUFBRSxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUM7U0FDL0IsQ0FBQztJQUNKLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQW1wbGlmeUZhdWx0IH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsYXRmb3JtLWNvcmUnO1xuaW1wb3J0IHsgR2V0T2JqZWN0Q29tbWFuZCwgTm9TdWNoQnVja2V0LCBTM0NsaWVudCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1zMyc7XG5cbi8qKlxuICogSGFuZGxlcyBmZXRjaGluZyBhbiBvYmplY3QgZnJvbSBhbiBzMyBidWNrZXQgYW5kIHBhcnNpbmcgdGhlIG9iamVjdCBjb250ZW50cyB0byBhIHN0cmluZ1xuICovXG5leHBvcnQgY2xhc3MgUzNTdHJpbmdPYmplY3RGZXRjaGVyIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gUzNTdHJpbmdPYmplY3RGZXRjaGVyIHdpdGggdGhlIHByb3ZpZGVkIHMzIGNsaWVudFxuICAgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBzM0NsaWVudDogUzNDbGllbnQpIHt9XG5cbiAgLyoqXG4gICAqIEZldGNoZXMgYW4gczMgb2JqZWN0IGFuZCBjb252ZXJ0cyBpdHMgY29udGVudHMgdG8gYSBzdHJpbmdcbiAgICovXG4gIGZldGNoID0gYXN5bmMgKHVyaTogc3RyaW5nKSA9PiB7XG4gICAgY29uc3QgeyBidWNrZXQsIGtleSB9ID0gdGhpcy5wYXJzZVMzVXJpKHVyaSk7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGdldFNjaGVtYUNvbW1hbmRSZXN1bHQgPSBhd2FpdCB0aGlzLnMzQ2xpZW50LnNlbmQoXG4gICAgICAgIG5ldyBHZXRPYmplY3RDb21tYW5kKHsgQnVja2V0OiBidWNrZXQsIEtleToga2V5IH0pXG4gICAgICApO1xuICAgICAgY29uc3Qgc2NoZW1hID0gYXdhaXQgZ2V0U2NoZW1hQ29tbWFuZFJlc3VsdC5Cb2R5Py50cmFuc2Zvcm1Ub1N0cmluZygpO1xuICAgICAgaWYgKCFzY2hlbWEpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGFtcGxpZnktYmFja2VuZC1ydWxlcy9wcmVmZXItYW1wbGlmeS1lcnJvcnNcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFcnJvciBvbiBwYXJzaW5nIG91dHB1dCBzY2hlbWEnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzY2hlbWE7XG4gICAgfSBjYXRjaCAoY2F1Z2h0KSB7XG4gICAgICBpZiAoY2F1Z2h0IGluc3RhbmNlb2YgTm9TdWNoQnVja2V0KSB7XG4gICAgICAgIHRocm93IG5ldyBBbXBsaWZ5RmF1bHQoXG4gICAgICAgICAgJ05vU3VjaEJ1Y2tldEZhdWx0JyxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBtZXNzYWdlOiBgJHtidWNrZXR9IGRvZXMgbm90IGV4aXN0LiBcXG5cbiAgICAgICAgICAgIFRyeSByZWRlcGxveWluZyB5b3VyIGNoYW5nZXMgYWdhaW4sIGlmIHRoZSBlcnJvciBwZXJzaXN0cywgY3JlYXRlIGEgYnVnIHJlcG9ydCBoZXJlOiBodHRwczovL2dpdGh1Yi5jb20vYXdzLWFtcGxpZnkvYW1wbGlmeS1iYWNrZW5kL2lzc3Vlcy9uZXcvY2hvb3NlYCxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNhdWdodFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgY2F1Z2h0O1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBwcml2YXRlIHBhcnNlUzNVcmkgPSAodXJpOiBzdHJpbmcpOiB7IGJ1Y2tldDogc3RyaW5nOyBrZXk6IHN0cmluZyB9ID0+IHtcbiAgICBjb25zdCB7IGhvc3RuYW1lLCBwYXRobmFtZSB9ID0gbmV3IFVSTCh1cmkpO1xuICAgIHJldHVybiB7XG4gICAgICBidWNrZXQ6IGhvc3RuYW1lLFxuICAgICAga2V5OiBwYXRobmFtZS5yZXBsYWNlKCcvJywgJycpLFxuICAgIH07XG4gIH07XG59XG4iXX0=