import { BackendOutputClientError, BackendOutputClientErrorType, } from '@aws-amplify/deployed-backend-client';
import { AmplifyUserError } from '@aws-amplify/platform-core';
/**
 * Common Error handling for BackendOutputClient.getOutput() in model-generator package.
 */
export const getBackendOutputWithErrorHandling = async (backendOutputClient, backendIdentifier) => {
    try {
        return await backendOutputClient.getOutput(backendIdentifier);
    }
    catch (error) {
        if (BackendOutputClientError.isBackendOutputClientError(error)) {
            switch (error.code) {
                case BackendOutputClientErrorType.DEPLOYMENT_IN_PROGRESS:
                    throw new AmplifyUserError('DeploymentInProgressError', {
                        message: 'Deployment is currently in progress.',
                        resolution: 'Re-run this command once the deployment completes.',
                    }, error);
                case BackendOutputClientErrorType.NO_STACK_FOUND:
                    throw new AmplifyUserError('StackDoesNotExistError', {
                        message: 'Stack does not exist.',
                        resolution: 'Ensure the CloudFormation stack ID or Amplify App ID and branch specified are correct and exists, then re-run this command.',
                    }, error);
                case BackendOutputClientErrorType.NO_OUTPUTS_FOUND:
                    throw new AmplifyUserError('AmplifyOutputsNotFoundError', {
                        message: 'Amplify outputs not found in stack metadata',
                        resolution: `Ensure the CloudFormation stack ID or Amplify App ID and branch specified are correct and exists.
      If this is a new sandbox or branch deployment, wait for the deployment to be successfully finished and try again.`,
                    }, error);
                case BackendOutputClientErrorType.CREDENTIALS_ERROR:
                    throw new AmplifyUserError('CredentialsError', {
                        message: 'Unable to get backend outputs due to invalid credentials.',
                        resolution: 'Ensure your AWS credentials are correctly set and refreshed.',
                    }, error);
                case BackendOutputClientErrorType.ACCESS_DENIED:
                    throw new AmplifyUserError('AccessDeniedError', {
                        message: 'Unable to get backend outputs due to insufficient permissions.',
                        resolution: 'Ensure you have permissions to call cloudformation:GetTemplateSummary.',
                    }, error);
                default:
                    throw error;
            }
        }
        throw error;
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0X2JhY2tlbmRfb3V0cHV0X3dpdGhfZXJyb3JfaGFuZGxpbmcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvZ2V0X2JhY2tlbmRfb3V0cHV0X3dpdGhfZXJyb3JfaGFuZGxpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVMLHdCQUF3QixFQUN4Qiw0QkFBNEIsR0FFN0IsTUFBTSxzQ0FBc0MsQ0FBQztBQUM5QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUU5RDs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGlDQUFpQyxHQUFHLEtBQUssRUFDcEQsbUJBQXdDLEVBQ3hDLGlCQUE0QyxFQUM1QyxFQUFFO0lBQ0YsSUFBSTtRQUNGLE9BQU8sTUFBTSxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsQ0FBQztLQUMvRDtJQUFDLE9BQU8sS0FBSyxFQUFFO1FBQ2QsSUFBSSx3QkFBd0IsQ0FBQywwQkFBMEIsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUM5RCxRQUFRLEtBQUssQ0FBQyxJQUFJLEVBQUU7Z0JBQ2xCLEtBQUssNEJBQTRCLENBQUMsc0JBQXNCO29CQUN0RCxNQUFNLElBQUksZ0JBQWdCLENBQ3hCLDJCQUEyQixFQUMzQjt3QkFDRSxPQUFPLEVBQUUsc0NBQXNDO3dCQUMvQyxVQUFVLEVBQUUsb0RBQW9EO3FCQUNqRSxFQUNELEtBQUssQ0FDTixDQUFDO2dCQUNKLEtBQUssNEJBQTRCLENBQUMsY0FBYztvQkFDOUMsTUFBTSxJQUFJLGdCQUFnQixDQUN4Qix3QkFBd0IsRUFDeEI7d0JBQ0UsT0FBTyxFQUFFLHVCQUF1Qjt3QkFDaEMsVUFBVSxFQUNSLDZIQUE2SDtxQkFDaEksRUFDRCxLQUFLLENBQ04sQ0FBQztnQkFDSixLQUFLLDRCQUE0QixDQUFDLGdCQUFnQjtvQkFDaEQsTUFBTSxJQUFJLGdCQUFnQixDQUN4Qiw2QkFBNkIsRUFDN0I7d0JBQ0UsT0FBTyxFQUFFLDZDQUE2Qzt3QkFDdEQsVUFBVSxFQUFFO3dIQUM4RjtxQkFDM0csRUFDRCxLQUFLLENBQ04sQ0FBQztnQkFDSixLQUFLLDRCQUE0QixDQUFDLGlCQUFpQjtvQkFDakQsTUFBTSxJQUFJLGdCQUFnQixDQUN4QixrQkFBa0IsRUFDbEI7d0JBQ0UsT0FBTyxFQUNMLDJEQUEyRDt3QkFDN0QsVUFBVSxFQUNSLDhEQUE4RDtxQkFDakUsRUFDRCxLQUFLLENBQ04sQ0FBQztnQkFDSixLQUFLLDRCQUE0QixDQUFDLGFBQWE7b0JBQzdDLE1BQU0sSUFBSSxnQkFBZ0IsQ0FDeEIsbUJBQW1CLEVBQ25CO3dCQUNFLE9BQU8sRUFDTCxnRUFBZ0U7d0JBQ2xFLFVBQVUsRUFDUix3RUFBd0U7cUJBQzNFLEVBQ0QsS0FBSyxDQUNOLENBQUM7Z0JBQ0o7b0JBQ0UsTUFBTSxLQUFLLENBQUM7YUFDZjtTQUNGO1FBQ0QsTUFBTSxLQUFLLENBQUM7S0FDYjtBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEJhY2tlbmRPdXRwdXRDbGllbnQsXG4gIEJhY2tlbmRPdXRwdXRDbGllbnRFcnJvcixcbiAgQmFja2VuZE91dHB1dENsaWVudEVycm9yVHlwZSxcbiAgRGVwbG95ZWRCYWNrZW5kSWRlbnRpZmllcixcbn0gZnJvbSAnQGF3cy1hbXBsaWZ5L2RlcGxveWVkLWJhY2tlbmQtY2xpZW50JztcbmltcG9ydCB7IEFtcGxpZnlVc2VyRXJyb3IgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGxhdGZvcm0tY29yZSc7XG5cbi8qKlxuICogQ29tbW9uIEVycm9yIGhhbmRsaW5nIGZvciBCYWNrZW5kT3V0cHV0Q2xpZW50LmdldE91dHB1dCgpIGluIG1vZGVsLWdlbmVyYXRvciBwYWNrYWdlLlxuICovXG5leHBvcnQgY29uc3QgZ2V0QmFja2VuZE91dHB1dFdpdGhFcnJvckhhbmRsaW5nID0gYXN5bmMgKFxuICBiYWNrZW5kT3V0cHV0Q2xpZW50OiBCYWNrZW5kT3V0cHV0Q2xpZW50LFxuICBiYWNrZW5kSWRlbnRpZmllcjogRGVwbG95ZWRCYWNrZW5kSWRlbnRpZmllclxuKSA9PiB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGF3YWl0IGJhY2tlbmRPdXRwdXRDbGllbnQuZ2V0T3V0cHV0KGJhY2tlbmRJZGVudGlmaWVyKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAoQmFja2VuZE91dHB1dENsaWVudEVycm9yLmlzQmFja2VuZE91dHB1dENsaWVudEVycm9yKGVycm9yKSkge1xuICAgICAgc3dpdGNoIChlcnJvci5jb2RlKSB7XG4gICAgICAgIGNhc2UgQmFja2VuZE91dHB1dENsaWVudEVycm9yVHlwZS5ERVBMT1lNRU5UX0lOX1BST0dSRVNTOlxuICAgICAgICAgIHRocm93IG5ldyBBbXBsaWZ5VXNlckVycm9yKFxuICAgICAgICAgICAgJ0RlcGxveW1lbnRJblByb2dyZXNzRXJyb3InLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBtZXNzYWdlOiAnRGVwbG95bWVudCBpcyBjdXJyZW50bHkgaW4gcHJvZ3Jlc3MuJyxcbiAgICAgICAgICAgICAgcmVzb2x1dGlvbjogJ1JlLXJ1biB0aGlzIGNvbW1hbmQgb25jZSB0aGUgZGVwbG95bWVudCBjb21wbGV0ZXMuJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvclxuICAgICAgICAgICk7XG4gICAgICAgIGNhc2UgQmFja2VuZE91dHB1dENsaWVudEVycm9yVHlwZS5OT19TVEFDS19GT1VORDpcbiAgICAgICAgICB0aHJvdyBuZXcgQW1wbGlmeVVzZXJFcnJvcihcbiAgICAgICAgICAgICdTdGFja0RvZXNOb3RFeGlzdEVycm9yJyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbWVzc2FnZTogJ1N0YWNrIGRvZXMgbm90IGV4aXN0LicsXG4gICAgICAgICAgICAgIHJlc29sdXRpb246XG4gICAgICAgICAgICAgICAgJ0Vuc3VyZSB0aGUgQ2xvdWRGb3JtYXRpb24gc3RhY2sgSUQgb3IgQW1wbGlmeSBBcHAgSUQgYW5kIGJyYW5jaCBzcGVjaWZpZWQgYXJlIGNvcnJlY3QgYW5kIGV4aXN0cywgdGhlbiByZS1ydW4gdGhpcyBjb21tYW5kLicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3JcbiAgICAgICAgICApO1xuICAgICAgICBjYXNlIEJhY2tlbmRPdXRwdXRDbGllbnRFcnJvclR5cGUuTk9fT1VUUFVUU19GT1VORDpcbiAgICAgICAgICB0aHJvdyBuZXcgQW1wbGlmeVVzZXJFcnJvcihcbiAgICAgICAgICAgICdBbXBsaWZ5T3V0cHV0c05vdEZvdW5kRXJyb3InLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBtZXNzYWdlOiAnQW1wbGlmeSBvdXRwdXRzIG5vdCBmb3VuZCBpbiBzdGFjayBtZXRhZGF0YScsXG4gICAgICAgICAgICAgIHJlc29sdXRpb246IGBFbnN1cmUgdGhlIENsb3VkRm9ybWF0aW9uIHN0YWNrIElEIG9yIEFtcGxpZnkgQXBwIElEIGFuZCBicmFuY2ggc3BlY2lmaWVkIGFyZSBjb3JyZWN0IGFuZCBleGlzdHMuXG4gICAgICBJZiB0aGlzIGlzIGEgbmV3IHNhbmRib3ggb3IgYnJhbmNoIGRlcGxveW1lbnQsIHdhaXQgZm9yIHRoZSBkZXBsb3ltZW50IHRvIGJlIHN1Y2Nlc3NmdWxseSBmaW5pc2hlZCBhbmQgdHJ5IGFnYWluLmAsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3JcbiAgICAgICAgICApO1xuICAgICAgICBjYXNlIEJhY2tlbmRPdXRwdXRDbGllbnRFcnJvclR5cGUuQ1JFREVOVElBTFNfRVJST1I6XG4gICAgICAgICAgdGhyb3cgbmV3IEFtcGxpZnlVc2VyRXJyb3IoXG4gICAgICAgICAgICAnQ3JlZGVudGlhbHNFcnJvcicsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG1lc3NhZ2U6XG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBnZXQgYmFja2VuZCBvdXRwdXRzIGR1ZSB0byBpbnZhbGlkIGNyZWRlbnRpYWxzLicsXG4gICAgICAgICAgICAgIHJlc29sdXRpb246XG4gICAgICAgICAgICAgICAgJ0Vuc3VyZSB5b3VyIEFXUyBjcmVkZW50aWFscyBhcmUgY29ycmVjdGx5IHNldCBhbmQgcmVmcmVzaGVkLicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3JcbiAgICAgICAgICApO1xuICAgICAgICBjYXNlIEJhY2tlbmRPdXRwdXRDbGllbnRFcnJvclR5cGUuQUNDRVNTX0RFTklFRDpcbiAgICAgICAgICB0aHJvdyBuZXcgQW1wbGlmeVVzZXJFcnJvcihcbiAgICAgICAgICAgICdBY2Nlc3NEZW5pZWRFcnJvcicsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG1lc3NhZ2U6XG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBnZXQgYmFja2VuZCBvdXRwdXRzIGR1ZSB0byBpbnN1ZmZpY2llbnQgcGVybWlzc2lvbnMuJyxcbiAgICAgICAgICAgICAgcmVzb2x1dGlvbjpcbiAgICAgICAgICAgICAgICAnRW5zdXJlIHlvdSBoYXZlIHBlcm1pc3Npb25zIHRvIGNhbGwgY2xvdWRmb3JtYXRpb246R2V0VGVtcGxhdGVTdW1tYXJ5LicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3JcbiAgICAgICAgICApO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcbiJdfQ==