import { AmplifyPrompter, printer } from '@aws-amplify/cli-core';
import { once } from 'events';
import { AmplifyUserError } from '@aws-amplify/platform-core';
/**
 * Command to set sandbox secret.
 */
export class SandboxSecretSetCommand {
    sandboxIdResolver;
    secretClient;
    readStream;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Set sandbox secret command.
     */
    constructor(sandboxIdResolver, secretClient, readStream = process.stdin) {
        this.sandboxIdResolver = sandboxIdResolver;
        this.secretClient = secretClient;
        this.readStream = readStream;
        this.command = 'set <secret-name>';
        this.describe = 'Set a sandbox secret';
    }
    /**
     * @inheritDoc
     */
    handler = async (args) => {
        const secretValue = await this.readSecretValue();
        const secretIdentifier = await this.secretClient.setSecret(await this.sandboxIdResolver.resolve(args.identifier), args.secretName, secretValue);
        printer.print(`Successfully created version ${secretIdentifier.version} of secret ${secretIdentifier.name}`);
    };
    /**
     * @inheritDoc
     */
    builder = (yargs) => {
        return yargs
            .positional('secret-name', {
            describe: 'Name of the secret to set',
            type: 'string',
            demandOption: true,
        })
            .check(async (argv) => {
            if (argv['secret-name']) {
                const secretNameRegex = /^[a-zA-Z0-9_.-]+$/;
                if (!argv['secret-name'].match(secretNameRegex)) {
                    throw new AmplifyUserError('InvalidCommandInputError', {
                        message: `Invalid secret name provided: ${argv['secret-name']}`,
                        resolution: 'Use a secret name that matches [a-zA-Z0-9_.-]+',
                    });
                }
            }
            return true;
        });
    };
    /**
     * Prompt (or) read secret value from stdin based on terminal interactive mode
     */
    readSecretValue = async () => {
        let secretValue = '';
        if (this.readStream.isTTY) {
            // This input is for interactive mode.
            secretValue = await AmplifyPrompter.secretValue();
        }
        else {
            // This allows to accept secret value from redirected input `|` and `>`.
            this.readStream.on('readable', () => {
                const chunk = this.readStream.read();
                if (chunk !== null) {
                    secretValue += chunk;
                }
            });
            // Wait for the end of the input.
            await once(this.readStream, 'end');
        }
        return secretValue;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveF9zZWNyZXRfc2V0X2NvbW1hbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tbWFuZHMvc2FuZGJveC9zYW5kYm94LXNlY3JldC9zYW5kYm94X3NlY3JldF9zZXRfY29tbWFuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE9BQU8sRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBR2pFLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFOUIsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFOUQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sdUJBQXVCO0lBaUJmO0lBQ0E7SUFDQTtJQWhCbkI7O09BRUc7SUFDTSxPQUFPLENBQVM7SUFFekI7O09BRUc7SUFDTSxRQUFRLENBQVM7SUFFMUI7O09BRUc7SUFDSCxZQUNtQixpQkFBMkMsRUFDM0MsWUFBMEIsRUFDMUIsYUFBeUIsT0FBTyxDQUFDLEtBQUs7UUFGdEMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUEwQjtRQUMzQyxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQixlQUFVLEdBQVYsVUFBVSxDQUE0QjtRQUV2RCxJQUFJLENBQUMsT0FBTyxHQUFHLG1CQUFtQixDQUFDO1FBQ25DLElBQUksQ0FBQyxRQUFRLEdBQUcsc0JBQXNCLENBQUM7SUFDekMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsT0FBTyxHQUFHLEtBQUssRUFDYixJQUEwRCxFQUMzQyxFQUFFO1FBQ2pCLE1BQU0sV0FBVyxHQUFHLE1BQU0sSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBRWpELE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FDeEQsTUFBTSxJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFDckQsSUFBSSxDQUFDLFVBQVUsRUFDZixXQUFXLENBQ1osQ0FBQztRQUNGLE9BQU8sQ0FBQyxLQUFLLENBQ1gsZ0NBQWdDLGdCQUFnQixDQUFDLE9BQU8sY0FBYyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsQ0FDOUYsQ0FBQztJQUNKLENBQUMsQ0FBQztJQUVGOztPQUVHO0lBQ0gsT0FBTyxHQUFHLENBQUMsS0FBVyxFQUEwQyxFQUFFO1FBQ2hFLE9BQU8sS0FBSzthQUNULFVBQVUsQ0FBQyxhQUFhLEVBQUU7WUFDekIsUUFBUSxFQUFFLDJCQUEyQjtZQUNyQyxJQUFJLEVBQUUsUUFBUTtZQUNkLFlBQVksRUFBRSxJQUFJO1NBQ25CLENBQUM7YUFDRCxLQUFLLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFO1lBQ3BCLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFO2dCQUN2QixNQUFNLGVBQWUsR0FBRyxtQkFBbUIsQ0FBQztnQkFDNUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLEVBQUU7b0JBQy9DLE1BQU0sSUFBSSxnQkFBZ0IsQ0FBQywwQkFBMEIsRUFBRTt3QkFDckQsT0FBTyxFQUFFLGlDQUFpQyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUU7d0JBQy9ELFVBQVUsRUFBRSxnREFBZ0Q7cUJBQzdELENBQUMsQ0FBQztpQkFDSjthQUNGO1lBQ0QsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQztJQUVGOztPQUVHO0lBQ0ssZUFBZSxHQUFHLEtBQUssSUFBcUIsRUFBRTtRQUNwRCxJQUFJLFdBQVcsR0FBRyxFQUFFLENBQUM7UUFDckIsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRTtZQUN6QixzQ0FBc0M7WUFDdEMsV0FBVyxHQUFHLE1BQU0sZUFBZSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ25EO2FBQU07WUFDTCx3RUFBd0U7WUFDeEUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRTtnQkFDbEMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDckMsSUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFO29CQUNsQixXQUFXLElBQUksS0FBSyxDQUFDO2lCQUN0QjtZQUNILENBQUMsQ0FBQyxDQUFDO1lBQ0gsaUNBQWlDO1lBQ2pDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDcEM7UUFDRCxPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFyZ3VtZW50c0NhbWVsQ2FzZSwgQXJndiwgQ29tbWFuZE1vZHVsZSB9IGZyb20gJ3lhcmdzJztcbmltcG9ydCB7IFNlY3JldENsaWVudCB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9iYWNrZW5kLXNlY3JldCc7XG5pbXBvcnQgeyBTYW5kYm94QmFja2VuZElkUmVzb2x2ZXIgfSBmcm9tICcuLi9zYW5kYm94X2lkX3Jlc29sdmVyLmpzJztcbmltcG9ydCB7IEFtcGxpZnlQcm9tcHRlciwgcHJpbnRlciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9jbGktY29yZSc7XG5pbXBvcnQgeyBBcmd1bWVudHNLZWJhYkNhc2UgfSBmcm9tICcuLi8uLi8uLi9rZWJhYl9jYXNlLmpzJztcbmltcG9ydCB7IFNhbmRib3hDb21tYW5kR2xvYmFsT3B0aW9ucyB9IGZyb20gJy4uL29wdGlvbl90eXBlcy5qcyc7XG5pbXBvcnQgeyBvbmNlIH0gZnJvbSAnZXZlbnRzJztcbmltcG9ydCB7IFJlYWRTdHJlYW0gfSBmcm9tICdub2RlOnR0eSc7XG5pbXBvcnQgeyBBbXBsaWZ5VXNlckVycm9yIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsYXRmb3JtLWNvcmUnO1xuXG4vKipcbiAqIENvbW1hbmQgdG8gc2V0IHNhbmRib3ggc2VjcmV0LlxuICovXG5leHBvcnQgY2xhc3MgU2FuZGJveFNlY3JldFNldENvbW1hbmRcbiAgaW1wbGVtZW50cyBDb21tYW5kTW9kdWxlPG9iamVjdCwgU2VjcmV0U2V0Q29tbWFuZE9wdGlvbnNLZWJhYkNhc2U+XG57XG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcmVhZG9ubHkgY29tbWFuZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcmVhZG9ubHkgZGVzY3JpYmU6IHN0cmluZztcblxuICAvKipcbiAgICogU2V0IHNhbmRib3ggc2VjcmV0IGNvbW1hbmQuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNhbmRib3hJZFJlc29sdmVyOiBTYW5kYm94QmFja2VuZElkUmVzb2x2ZXIsXG4gICAgcHJpdmF0ZSByZWFkb25seSBzZWNyZXRDbGllbnQ6IFNlY3JldENsaWVudCxcbiAgICBwcml2YXRlIHJlYWRvbmx5IHJlYWRTdHJlYW06IFJlYWRTdHJlYW0gPSBwcm9jZXNzLnN0ZGluXG4gICkge1xuICAgIHRoaXMuY29tbWFuZCA9ICdzZXQgPHNlY3JldC1uYW1lPic7XG4gICAgdGhpcy5kZXNjcmliZSA9ICdTZXQgYSBzYW5kYm94IHNlY3JldCc7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIGhhbmRsZXIgPSBhc3luYyAoXG4gICAgYXJnczogQXJndW1lbnRzQ2FtZWxDYXNlPFNlY3JldFNldENvbW1hbmRPcHRpb25zS2ViYWJDYXNlPlxuICApOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICBjb25zdCBzZWNyZXRWYWx1ZSA9IGF3YWl0IHRoaXMucmVhZFNlY3JldFZhbHVlKCk7XG5cbiAgICBjb25zdCBzZWNyZXRJZGVudGlmaWVyID0gYXdhaXQgdGhpcy5zZWNyZXRDbGllbnQuc2V0U2VjcmV0KFxuICAgICAgYXdhaXQgdGhpcy5zYW5kYm94SWRSZXNvbHZlci5yZXNvbHZlKGFyZ3MuaWRlbnRpZmllciksXG4gICAgICBhcmdzLnNlY3JldE5hbWUsXG4gICAgICBzZWNyZXRWYWx1ZVxuICAgICk7XG4gICAgcHJpbnRlci5wcmludChcbiAgICAgIGBTdWNjZXNzZnVsbHkgY3JlYXRlZCB2ZXJzaW9uICR7c2VjcmV0SWRlbnRpZmllci52ZXJzaW9ufSBvZiBzZWNyZXQgJHtzZWNyZXRJZGVudGlmaWVyLm5hbWV9YFxuICAgICk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBidWlsZGVyID0gKHlhcmdzOiBBcmd2KTogQXJndjxTZWNyZXRTZXRDb21tYW5kT3B0aW9uc0tlYmFiQ2FzZT4gPT4ge1xuICAgIHJldHVybiB5YXJnc1xuICAgICAgLnBvc2l0aW9uYWwoJ3NlY3JldC1uYW1lJywge1xuICAgICAgICBkZXNjcmliZTogJ05hbWUgb2YgdGhlIHNlY3JldCB0byBzZXQnLFxuICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgZGVtYW5kT3B0aW9uOiB0cnVlLFxuICAgICAgfSlcbiAgICAgIC5jaGVjayhhc3luYyAoYXJndikgPT4ge1xuICAgICAgICBpZiAoYXJndlsnc2VjcmV0LW5hbWUnXSkge1xuICAgICAgICAgIGNvbnN0IHNlY3JldE5hbWVSZWdleCA9IC9eW2EtekEtWjAtOV8uLV0rJC87XG4gICAgICAgICAgaWYgKCFhcmd2WydzZWNyZXQtbmFtZSddLm1hdGNoKHNlY3JldE5hbWVSZWdleCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBBbXBsaWZ5VXNlckVycm9yKCdJbnZhbGlkQ29tbWFuZElucHV0RXJyb3InLCB7XG4gICAgICAgICAgICAgIG1lc3NhZ2U6IGBJbnZhbGlkIHNlY3JldCBuYW1lIHByb3ZpZGVkOiAke2FyZ3ZbJ3NlY3JldC1uYW1lJ119YCxcbiAgICAgICAgICAgICAgcmVzb2x1dGlvbjogJ1VzZSBhIHNlY3JldCBuYW1lIHRoYXQgbWF0Y2hlcyBbYS16QS1aMC05Xy4tXSsnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFByb21wdCAob3IpIHJlYWQgc2VjcmV0IHZhbHVlIGZyb20gc3RkaW4gYmFzZWQgb24gdGVybWluYWwgaW50ZXJhY3RpdmUgbW9kZVxuICAgKi9cbiAgcHJpdmF0ZSByZWFkU2VjcmV0VmFsdWUgPSBhc3luYyAoKTogUHJvbWlzZTxzdHJpbmc+ID0+IHtcbiAgICBsZXQgc2VjcmV0VmFsdWUgPSAnJztcbiAgICBpZiAodGhpcy5yZWFkU3RyZWFtLmlzVFRZKSB7XG4gICAgICAvLyBUaGlzIGlucHV0IGlzIGZvciBpbnRlcmFjdGl2ZSBtb2RlLlxuICAgICAgc2VjcmV0VmFsdWUgPSBhd2FpdCBBbXBsaWZ5UHJvbXB0ZXIuc2VjcmV0VmFsdWUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVGhpcyBhbGxvd3MgdG8gYWNjZXB0IHNlY3JldCB2YWx1ZSBmcm9tIHJlZGlyZWN0ZWQgaW5wdXQgYHxgIGFuZCBgPmAuXG4gICAgICB0aGlzLnJlYWRTdHJlYW0ub24oJ3JlYWRhYmxlJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBjaHVuayA9IHRoaXMucmVhZFN0cmVhbS5yZWFkKCk7XG4gICAgICAgIGlmIChjaHVuayAhPT0gbnVsbCkge1xuICAgICAgICAgIHNlY3JldFZhbHVlICs9IGNodW5rO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8vIFdhaXQgZm9yIHRoZSBlbmQgb2YgdGhlIGlucHV0LlxuICAgICAgYXdhaXQgb25jZSh0aGlzLnJlYWRTdHJlYW0sICdlbmQnKTtcbiAgICB9XG4gICAgcmV0dXJuIHNlY3JldFZhbHVlO1xuICB9O1xufVxuXG50eXBlIFNlY3JldFNldENvbW1hbmRPcHRpb25zS2ViYWJDYXNlID0gQXJndW1lbnRzS2ViYWJDYXNlPFxuICB7XG4gICAgc2VjcmV0TmFtZTogc3RyaW5nO1xuICB9ICYgU2FuZGJveENvbW1hbmRHbG9iYWxPcHRpb25zXG4+O1xuIl19