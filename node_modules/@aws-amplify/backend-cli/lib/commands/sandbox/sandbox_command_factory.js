import { fileURLToPath } from 'node:url';
import { SandboxCommand, } from './sandbox_command.js';
import { SandboxSingletonFactory } from '@aws-amplify/sandbox';
import { SandboxDeleteCommand } from './sandbox-delete/sandbox_delete_command.js';
import { SandboxBackendIdResolver } from './sandbox_id_resolver.js';
import { ClientConfigGeneratorAdapter } from '../../client-config/client_config_generator_adapter.js';
import { LocalNamespaceResolver } from '../../backend-identifier/local_namespace_resolver.js';
import { createSandboxSecretCommand } from './sandbox-secret/sandbox_secret_command_factory.js';
import { PackageJsonReader, UsageDataEmitterFactory, } from '@aws-amplify/platform-core';
import { SandboxEventHandlerFactory } from './sandbox_event_handler_factory.js';
import { CommandMiddleware } from '../../command_middleware.js';
import { PackageManagerControllerFactory, format, printer, } from '@aws-amplify/cli-core';
import { S3Client } from '@aws-sdk/client-s3';
import { AmplifyClient } from '@aws-sdk/client-amplify';
import { CloudFormationClient } from '@aws-sdk/client-cloudformation';
/**
 * Creates wired sandbox command.
 */
export const createSandboxCommand = () => {
    const sandboxBackendIdPartsResolver = new SandboxBackendIdResolver(new LocalNamespaceResolver(new PackageJsonReader()));
    const sandboxFactory = new SandboxSingletonFactory(sandboxBackendIdPartsResolver.resolve, printer, format);
    const s3Client = new S3Client();
    const amplifyClient = new AmplifyClient();
    const cloudFormationClient = new CloudFormationClient();
    const awsClientProvider = {
        getS3Client: () => s3Client,
        getAmplifyClient: () => amplifyClient,
        getCloudFormationClient: () => cloudFormationClient,
    };
    const clientConfigGeneratorAdapter = new ClientConfigGeneratorAdapter(awsClientProvider);
    const libraryVersion = new PackageJsonReader().read(fileURLToPath(new URL('../../../package.json', import.meta.url))).version ?? '';
    const eventHandlerFactory = new SandboxEventHandlerFactory(sandboxBackendIdPartsResolver.resolve, async () => {
        const dependencies = await new PackageManagerControllerFactory()
            .getPackageManagerController()
            .tryGetDependencies();
        return await new UsageDataEmitterFactory().getInstance(libraryVersion, dependencies);
    });
    const commandMiddleWare = new CommandMiddleware(printer);
    return new SandboxCommand(sandboxFactory, [new SandboxDeleteCommand(sandboxFactory), createSandboxSecretCommand()], clientConfigGeneratorAdapter, commandMiddleWare, eventHandlerFactory.getSandboxEventHandlers);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveF9jb21tYW5kX2ZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbWFuZHMvc2FuZGJveC9zYW5kYm94X2NvbW1hbmRfZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3pDLE9BQU8sRUFDTCxjQUFjLEdBRWYsTUFBTSxzQkFBc0IsQ0FBQztBQUM5QixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUNsRixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSx3REFBd0QsQ0FBQztBQUN0RyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxzREFBc0QsQ0FBQztBQUM5RixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxvREFBb0QsQ0FBQztBQUNoRyxPQUFPLEVBQ0wsaUJBQWlCLEVBQ2pCLHVCQUF1QixHQUN4QixNQUFNLDRCQUE0QixDQUFDO0FBQ3BDLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ2hFLE9BQU8sRUFDTCwrQkFBK0IsRUFDL0IsTUFBTSxFQUNOLE9BQU8sR0FDUixNQUFNLHVCQUF1QixDQUFDO0FBQy9CLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUM5QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDeEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFdEU7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxHQUdsQyxFQUFFO0lBQ0YsTUFBTSw2QkFBNkIsR0FBRyxJQUFJLHdCQUF3QixDQUNoRSxJQUFJLHNCQUFzQixDQUFDLElBQUksaUJBQWlCLEVBQUUsQ0FBQyxDQUNwRCxDQUFDO0lBRUYsTUFBTSxjQUFjLEdBQUcsSUFBSSx1QkFBdUIsQ0FDaEQsNkJBQTZCLENBQUMsT0FBTyxFQUNyQyxPQUFPLEVBQ1AsTUFBTSxDQUNQLENBQUM7SUFDRixNQUFNLFFBQVEsR0FBRyxJQUFJLFFBQVEsRUFBRSxDQUFDO0lBQ2hDLE1BQU0sYUFBYSxHQUFHLElBQUksYUFBYSxFQUFFLENBQUM7SUFDMUMsTUFBTSxvQkFBb0IsR0FBRyxJQUFJLG9CQUFvQixFQUFFLENBQUM7SUFFeEQsTUFBTSxpQkFBaUIsR0FBRztRQUN4QixXQUFXLEVBQUUsR0FBRyxFQUFFLENBQUMsUUFBUTtRQUMzQixnQkFBZ0IsRUFBRSxHQUFHLEVBQUUsQ0FBQyxhQUFhO1FBQ3JDLHVCQUF1QixFQUFFLEdBQUcsRUFBRSxDQUFDLG9CQUFvQjtLQUNwRCxDQUFDO0lBQ0YsTUFBTSw0QkFBNEIsR0FBRyxJQUFJLDRCQUE0QixDQUNuRSxpQkFBaUIsQ0FDbEIsQ0FBQztJQUVGLE1BQU0sY0FBYyxHQUNsQixJQUFJLGlCQUFpQixFQUFFLENBQUMsSUFBSSxDQUMxQixhQUFhLENBQUMsSUFBSSxHQUFHLENBQUMsdUJBQXVCLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUNqRSxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUM7SUFFbEIsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLDBCQUEwQixDQUN4RCw2QkFBNkIsQ0FBQyxPQUFPLEVBQ3JDLEtBQUssSUFBSSxFQUFFO1FBQ1QsTUFBTSxZQUFZLEdBQUcsTUFBTSxJQUFJLCtCQUErQixFQUFFO2FBQzdELDJCQUEyQixFQUFFO2FBQzdCLGtCQUFrQixFQUFFLENBQUM7UUFDeEIsT0FBTyxNQUFNLElBQUksdUJBQXVCLEVBQUUsQ0FBQyxXQUFXLENBQ3BELGNBQWMsRUFDZCxZQUFZLENBQ2IsQ0FBQztJQUNKLENBQUMsQ0FDRixDQUFDO0lBRUYsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3pELE9BQU8sSUFBSSxjQUFjLENBQ3ZCLGNBQWMsRUFDZCxDQUFDLElBQUksb0JBQW9CLENBQUMsY0FBYyxDQUFDLEVBQUUsMEJBQTBCLEVBQUUsQ0FBQyxFQUN4RSw0QkFBNEIsRUFDNUIsaUJBQWlCLEVBQ2pCLG1CQUFtQixDQUFDLHVCQUF1QixDQUM1QyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tbWFuZE1vZHVsZSB9IGZyb20gJ3lhcmdzJztcbmltcG9ydCB7IGZpbGVVUkxUb1BhdGggfSBmcm9tICdub2RlOnVybCc7XG5pbXBvcnQge1xuICBTYW5kYm94Q29tbWFuZCxcbiAgU2FuZGJveENvbW1hbmRPcHRpb25zS2ViYWJDYXNlLFxufSBmcm9tICcuL3NhbmRib3hfY29tbWFuZC5qcyc7XG5pbXBvcnQgeyBTYW5kYm94U2luZ2xldG9uRmFjdG9yeSB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9zYW5kYm94JztcbmltcG9ydCB7IFNhbmRib3hEZWxldGVDb21tYW5kIH0gZnJvbSAnLi9zYW5kYm94LWRlbGV0ZS9zYW5kYm94X2RlbGV0ZV9jb21tYW5kLmpzJztcbmltcG9ydCB7IFNhbmRib3hCYWNrZW5kSWRSZXNvbHZlciB9IGZyb20gJy4vc2FuZGJveF9pZF9yZXNvbHZlci5qcyc7XG5pbXBvcnQgeyBDbGllbnRDb25maWdHZW5lcmF0b3JBZGFwdGVyIH0gZnJvbSAnLi4vLi4vY2xpZW50LWNvbmZpZy9jbGllbnRfY29uZmlnX2dlbmVyYXRvcl9hZGFwdGVyLmpzJztcbmltcG9ydCB7IExvY2FsTmFtZXNwYWNlUmVzb2x2ZXIgfSBmcm9tICcuLi8uLi9iYWNrZW5kLWlkZW50aWZpZXIvbG9jYWxfbmFtZXNwYWNlX3Jlc29sdmVyLmpzJztcbmltcG9ydCB7IGNyZWF0ZVNhbmRib3hTZWNyZXRDb21tYW5kIH0gZnJvbSAnLi9zYW5kYm94LXNlY3JldC9zYW5kYm94X3NlY3JldF9jb21tYW5kX2ZhY3RvcnkuanMnO1xuaW1wb3J0IHtcbiAgUGFja2FnZUpzb25SZWFkZXIsXG4gIFVzYWdlRGF0YUVtaXR0ZXJGYWN0b3J5LFxufSBmcm9tICdAYXdzLWFtcGxpZnkvcGxhdGZvcm0tY29yZSc7XG5pbXBvcnQgeyBTYW5kYm94RXZlbnRIYW5kbGVyRmFjdG9yeSB9IGZyb20gJy4vc2FuZGJveF9ldmVudF9oYW5kbGVyX2ZhY3RvcnkuanMnO1xuaW1wb3J0IHsgQ29tbWFuZE1pZGRsZXdhcmUgfSBmcm9tICcuLi8uLi9jb21tYW5kX21pZGRsZXdhcmUuanMnO1xuaW1wb3J0IHtcbiAgUGFja2FnZU1hbmFnZXJDb250cm9sbGVyRmFjdG9yeSxcbiAgZm9ybWF0LFxuICBwcmludGVyLFxufSBmcm9tICdAYXdzLWFtcGxpZnkvY2xpLWNvcmUnO1xuaW1wb3J0IHsgUzNDbGllbnQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtczMnO1xuaW1wb3J0IHsgQW1wbGlmeUNsaWVudCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1hbXBsaWZ5JztcbmltcG9ydCB7IENsb3VkRm9ybWF0aW9uQ2xpZW50IH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LWNsb3VkZm9ybWF0aW9uJztcblxuLyoqXG4gKiBDcmVhdGVzIHdpcmVkIHNhbmRib3ggY29tbWFuZC5cbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZVNhbmRib3hDb21tYW5kID0gKCk6IENvbW1hbmRNb2R1bGU8XG4gIG9iamVjdCxcbiAgU2FuZGJveENvbW1hbmRPcHRpb25zS2ViYWJDYXNlXG4+ID0+IHtcbiAgY29uc3Qgc2FuZGJveEJhY2tlbmRJZFBhcnRzUmVzb2x2ZXIgPSBuZXcgU2FuZGJveEJhY2tlbmRJZFJlc29sdmVyKFxuICAgIG5ldyBMb2NhbE5hbWVzcGFjZVJlc29sdmVyKG5ldyBQYWNrYWdlSnNvblJlYWRlcigpKVxuICApO1xuXG4gIGNvbnN0IHNhbmRib3hGYWN0b3J5ID0gbmV3IFNhbmRib3hTaW5nbGV0b25GYWN0b3J5KFxuICAgIHNhbmRib3hCYWNrZW5kSWRQYXJ0c1Jlc29sdmVyLnJlc29sdmUsXG4gICAgcHJpbnRlcixcbiAgICBmb3JtYXRcbiAgKTtcbiAgY29uc3QgczNDbGllbnQgPSBuZXcgUzNDbGllbnQoKTtcbiAgY29uc3QgYW1wbGlmeUNsaWVudCA9IG5ldyBBbXBsaWZ5Q2xpZW50KCk7XG4gIGNvbnN0IGNsb3VkRm9ybWF0aW9uQ2xpZW50ID0gbmV3IENsb3VkRm9ybWF0aW9uQ2xpZW50KCk7XG5cbiAgY29uc3QgYXdzQ2xpZW50UHJvdmlkZXIgPSB7XG4gICAgZ2V0UzNDbGllbnQ6ICgpID0+IHMzQ2xpZW50LFxuICAgIGdldEFtcGxpZnlDbGllbnQ6ICgpID0+IGFtcGxpZnlDbGllbnQsXG4gICAgZ2V0Q2xvdWRGb3JtYXRpb25DbGllbnQ6ICgpID0+IGNsb3VkRm9ybWF0aW9uQ2xpZW50LFxuICB9O1xuICBjb25zdCBjbGllbnRDb25maWdHZW5lcmF0b3JBZGFwdGVyID0gbmV3IENsaWVudENvbmZpZ0dlbmVyYXRvckFkYXB0ZXIoXG4gICAgYXdzQ2xpZW50UHJvdmlkZXJcbiAgKTtcblxuICBjb25zdCBsaWJyYXJ5VmVyc2lvbiA9XG4gICAgbmV3IFBhY2thZ2VKc29uUmVhZGVyKCkucmVhZChcbiAgICAgIGZpbGVVUkxUb1BhdGgobmV3IFVSTCgnLi4vLi4vLi4vcGFja2FnZS5qc29uJywgaW1wb3J0Lm1ldGEudXJsKSlcbiAgICApLnZlcnNpb24gPz8gJyc7XG5cbiAgY29uc3QgZXZlbnRIYW5kbGVyRmFjdG9yeSA9IG5ldyBTYW5kYm94RXZlbnRIYW5kbGVyRmFjdG9yeShcbiAgICBzYW5kYm94QmFja2VuZElkUGFydHNSZXNvbHZlci5yZXNvbHZlLFxuICAgIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGRlcGVuZGVuY2llcyA9IGF3YWl0IG5ldyBQYWNrYWdlTWFuYWdlckNvbnRyb2xsZXJGYWN0b3J5KClcbiAgICAgICAgLmdldFBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlcigpXG4gICAgICAgIC50cnlHZXREZXBlbmRlbmNpZXMoKTtcbiAgICAgIHJldHVybiBhd2FpdCBuZXcgVXNhZ2VEYXRhRW1pdHRlckZhY3RvcnkoKS5nZXRJbnN0YW5jZShcbiAgICAgICAgbGlicmFyeVZlcnNpb24sXG4gICAgICAgIGRlcGVuZGVuY2llc1xuICAgICAgKTtcbiAgICB9XG4gICk7XG5cbiAgY29uc3QgY29tbWFuZE1pZGRsZVdhcmUgPSBuZXcgQ29tbWFuZE1pZGRsZXdhcmUocHJpbnRlcik7XG4gIHJldHVybiBuZXcgU2FuZGJveENvbW1hbmQoXG4gICAgc2FuZGJveEZhY3RvcnksXG4gICAgW25ldyBTYW5kYm94RGVsZXRlQ29tbWFuZChzYW5kYm94RmFjdG9yeSksIGNyZWF0ZVNhbmRib3hTZWNyZXRDb21tYW5kKCldLFxuICAgIGNsaWVudENvbmZpZ0dlbmVyYXRvckFkYXB0ZXIsXG4gICAgY29tbWFuZE1pZGRsZVdhcmUsXG4gICAgZXZlbnRIYW5kbGVyRmFjdG9yeS5nZXRTYW5kYm94RXZlbnRIYW5kbGVyc1xuICApO1xufTtcbiJdfQ==