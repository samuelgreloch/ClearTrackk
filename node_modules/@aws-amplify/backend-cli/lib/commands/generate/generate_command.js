import { AmplifyUserError } from '@aws-amplify/platform-core';
/**
 * An entry point for generate command.
 */
export class GenerateCommand {
    generateOutputsCommand;
    generateFormsCommand;
    generateGraphqlClientCodeCommand;
    generateSchemaCommand;
    commandMiddleware;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Creates top level entry point for generate command.
     */
    constructor(generateOutputsCommand, generateFormsCommand, generateGraphqlClientCodeCommand, generateSchemaCommand, commandMiddleware) {
        this.generateOutputsCommand = generateOutputsCommand;
        this.generateFormsCommand = generateFormsCommand;
        this.generateGraphqlClientCodeCommand = generateGraphqlClientCodeCommand;
        this.generateSchemaCommand = generateSchemaCommand;
        this.commandMiddleware = commandMiddleware;
        this.command = 'generate';
        this.describe = 'Generates post deployment artifacts';
    }
    /**
     * @inheritDoc
     */
    handler = () => {
        // CommandModule requires handler implementation. But this is never called if top level command
        // is configured to require subcommand.
        // Help is printed by default in that case before ever attempting to call handler.
        throw new Error('Top level generate handler should never be called');
    };
    builder = (yargs) => {
        return (yargs
            .version(false)
            // Cast to erase options types used in internal sub command implementation. Otherwise, compiler fails here.
            .command(this.generateOutputsCommand)
            .command(this.generateFormsCommand)
            .command(this.generateGraphqlClientCodeCommand)
            .command(this.generateSchemaCommand)
            .demandCommand()
            .strictCommands()
            .recommendCommands()
            .option('profile', {
            describe: 'An AWS profile name.',
            type: 'string',
            array: false,
        })
            .check(async (argv) => {
            const stackNameRegex = /^[a-zA-Z][-a-zA-Z0-9]{1,127}$|^arn:[-a-zA-Z0-9:/._+]$/;
            if (argv['stack'] && typeof argv['stack'] === 'string') {
                if (!argv.stack.match(stackNameRegex)) {
                    throw new AmplifyUserError('InvalidCommandInputError', {
                        message: `Invalid --stack name provided: ${argv.stack}`,
                        resolution: 'Check the value of the stack name provided and try again.',
                    });
                }
            }
            return true;
        })
            .middleware([this.commandMiddleware.ensureAwsCredentialAndRegion]));
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVfY29tbWFuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9nZW5lcmF0ZS9nZW5lcmF0ZV9jb21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU1BLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRTlEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGVBQWU7SUFlUDtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBbEJuQjs7T0FFRztJQUNNLE9BQU8sQ0FBUztJQUV6Qjs7T0FFRztJQUNNLFFBQVEsQ0FBUztJQUUxQjs7T0FFRztJQUNILFlBQ21CLHNCQUE4QyxFQUM5QyxvQkFBMEMsRUFDMUMsZ0NBQWtFLEVBQ2xFLHFCQUE0QyxFQUM1QyxpQkFBb0M7UUFKcEMsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUF3QjtRQUM5Qyx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXNCO1FBQzFDLHFDQUFnQyxHQUFoQyxnQ0FBZ0MsQ0FBa0M7UUFDbEUsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUF1QjtRQUM1QyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBRXJELElBQUksQ0FBQyxPQUFPLEdBQUcsVUFBVSxDQUFDO1FBQzFCLElBQUksQ0FBQyxRQUFRLEdBQUcscUNBQXFDLENBQUM7SUFDeEQsQ0FBQztJQUVEOztPQUVHO0lBQ0gsT0FBTyxHQUFHLEdBQXlCLEVBQUU7UUFDbkMsK0ZBQStGO1FBQy9GLHVDQUF1QztRQUN2QyxrRkFBa0Y7UUFDbEYsTUFBTSxJQUFJLEtBQUssQ0FBQyxtREFBbUQsQ0FBQyxDQUFDO0lBQ3ZFLENBQUMsQ0FBQztJQUVGLE9BQU8sR0FBRyxDQUFDLEtBQVcsRUFBUSxFQUFFO1FBQzlCLE9BQU8sQ0FDTCxLQUFLO2FBQ0YsT0FBTyxDQUFDLEtBQUssQ0FBQztZQUNmLDJHQUEyRzthQUMxRyxPQUFPLENBQUMsSUFBSSxDQUFDLHNCQUFrRCxDQUFDO2FBQ2hFLE9BQU8sQ0FBQyxJQUFJLENBQUMsb0JBQWdELENBQUM7YUFDOUQsT0FBTyxDQUNOLElBQUksQ0FBQyxnQ0FBNEQsQ0FDbEU7YUFDQSxPQUFPLENBQUMsSUFBSSxDQUFDLHFCQUFpRCxDQUFDO2FBQy9ELGFBQWEsRUFBRTthQUNmLGNBQWMsRUFBRTthQUNoQixpQkFBaUIsRUFBRTthQUNuQixNQUFNLENBQUMsU0FBUyxFQUFFO1lBQ2pCLFFBQVEsRUFBRSxzQkFBc0I7WUFDaEMsSUFBSSxFQUFFLFFBQVE7WUFDZCxLQUFLLEVBQUUsS0FBSztTQUNiLENBQUM7YUFDRCxLQUFLLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFO1lBQ3BCLE1BQU0sY0FBYyxHQUNsQix1REFBdUQsQ0FBQztZQUMxRCxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxRQUFRLEVBQUU7Z0JBQ3RELElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsRUFBRTtvQkFDckMsTUFBTSxJQUFJLGdCQUFnQixDQUFDLDBCQUEwQixFQUFFO3dCQUNyRCxPQUFPLEVBQUUsa0NBQWtDLElBQUksQ0FBQyxLQUFLLEVBQUU7d0JBQ3ZELFVBQVUsRUFDUiwyREFBMkQ7cUJBQzlELENBQUMsQ0FBQztpQkFDSjthQUNGO1lBQ0QsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDLENBQUM7YUFDRCxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsNEJBQTRCLENBQUMsQ0FBQyxDQUNyRSxDQUFDO0lBQ0osQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcmd2LCBDb21tYW5kTW9kdWxlIH0gZnJvbSAneWFyZ3MnO1xuaW1wb3J0IHsgR2VuZXJhdGVPdXRwdXRzQ29tbWFuZCB9IGZyb20gJy4vb3V0cHV0cy9nZW5lcmF0ZV9vdXRwdXRzX2NvbW1hbmQuanMnO1xuaW1wb3J0IHsgR2VuZXJhdGVGb3Jtc0NvbW1hbmQgfSBmcm9tICcuL2Zvcm1zL2dlbmVyYXRlX2Zvcm1zX2NvbW1hbmQuanMnO1xuaW1wb3J0IHsgR2VuZXJhdGVHcmFwaHFsQ2xpZW50Q29kZUNvbW1hbmQgfSBmcm9tICcuL2dyYXBocWwtY2xpZW50LWNvZGUvZ2VuZXJhdGVfZ3JhcGhxbF9jbGllbnRfY29kZV9jb21tYW5kLmpzJztcbmltcG9ydCB7IENvbW1hbmRNaWRkbGV3YXJlIH0gZnJvbSAnLi4vLi4vY29tbWFuZF9taWRkbGV3YXJlLmpzJztcbmltcG9ydCB7IEdlbmVyYXRlU2NoZW1hQ29tbWFuZCB9IGZyb20gJy4vc2NoZW1hLWZyb20tZGF0YWJhc2UvZ2VuZXJhdGVfc2NoZW1hX2NvbW1hbmQuanMnO1xuaW1wb3J0IHsgQW1wbGlmeVVzZXJFcnJvciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbGF0Zm9ybS1jb3JlJztcblxuLyoqXG4gKiBBbiBlbnRyeSBwb2ludCBmb3IgZ2VuZXJhdGUgY29tbWFuZC5cbiAqL1xuZXhwb3J0IGNsYXNzIEdlbmVyYXRlQ29tbWFuZCBpbXBsZW1lbnRzIENvbW1hbmRNb2R1bGUge1xuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHJlYWRvbmx5IGNvbW1hbmQ6IHN0cmluZztcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHJlYWRvbmx5IGRlc2NyaWJlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgdG9wIGxldmVsIGVudHJ5IHBvaW50IGZvciBnZW5lcmF0ZSBjb21tYW5kLlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBnZW5lcmF0ZU91dHB1dHNDb21tYW5kOiBHZW5lcmF0ZU91dHB1dHNDb21tYW5kLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgZ2VuZXJhdGVGb3Jtc0NvbW1hbmQ6IEdlbmVyYXRlRm9ybXNDb21tYW5kLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgZ2VuZXJhdGVHcmFwaHFsQ2xpZW50Q29kZUNvbW1hbmQ6IEdlbmVyYXRlR3JhcGhxbENsaWVudENvZGVDb21tYW5kLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgZ2VuZXJhdGVTY2hlbWFDb21tYW5kOiBHZW5lcmF0ZVNjaGVtYUNvbW1hbmQsXG4gICAgcHJpdmF0ZSByZWFkb25seSBjb21tYW5kTWlkZGxld2FyZTogQ29tbWFuZE1pZGRsZXdhcmVcbiAgKSB7XG4gICAgdGhpcy5jb21tYW5kID0gJ2dlbmVyYXRlJztcbiAgICB0aGlzLmRlc2NyaWJlID0gJ0dlbmVyYXRlcyBwb3N0IGRlcGxveW1lbnQgYXJ0aWZhY3RzJztcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgaGFuZGxlciA9ICgpOiB2b2lkIHwgUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgLy8gQ29tbWFuZE1vZHVsZSByZXF1aXJlcyBoYW5kbGVyIGltcGxlbWVudGF0aW9uLiBCdXQgdGhpcyBpcyBuZXZlciBjYWxsZWQgaWYgdG9wIGxldmVsIGNvbW1hbmRcbiAgICAvLyBpcyBjb25maWd1cmVkIHRvIHJlcXVpcmUgc3ViY29tbWFuZC5cbiAgICAvLyBIZWxwIGlzIHByaW50ZWQgYnkgZGVmYXVsdCBpbiB0aGF0IGNhc2UgYmVmb3JlIGV2ZXIgYXR0ZW1wdGluZyB0byBjYWxsIGhhbmRsZXIuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdUb3AgbGV2ZWwgZ2VuZXJhdGUgaGFuZGxlciBzaG91bGQgbmV2ZXIgYmUgY2FsbGVkJyk7XG4gIH07XG5cbiAgYnVpbGRlciA9ICh5YXJnczogQXJndik6IEFyZ3YgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICB5YXJnc1xuICAgICAgICAudmVyc2lvbihmYWxzZSlcbiAgICAgICAgLy8gQ2FzdCB0byBlcmFzZSBvcHRpb25zIHR5cGVzIHVzZWQgaW4gaW50ZXJuYWwgc3ViIGNvbW1hbmQgaW1wbGVtZW50YXRpb24uIE90aGVyd2lzZSwgY29tcGlsZXIgZmFpbHMgaGVyZS5cbiAgICAgICAgLmNvbW1hbmQodGhpcy5nZW5lcmF0ZU91dHB1dHNDb21tYW5kIGFzIHVua25vd24gYXMgQ29tbWFuZE1vZHVsZSlcbiAgICAgICAgLmNvbW1hbmQodGhpcy5nZW5lcmF0ZUZvcm1zQ29tbWFuZCBhcyB1bmtub3duIGFzIENvbW1hbmRNb2R1bGUpXG4gICAgICAgIC5jb21tYW5kKFxuICAgICAgICAgIHRoaXMuZ2VuZXJhdGVHcmFwaHFsQ2xpZW50Q29kZUNvbW1hbmQgYXMgdW5rbm93biBhcyBDb21tYW5kTW9kdWxlXG4gICAgICAgIClcbiAgICAgICAgLmNvbW1hbmQodGhpcy5nZW5lcmF0ZVNjaGVtYUNvbW1hbmQgYXMgdW5rbm93biBhcyBDb21tYW5kTW9kdWxlKVxuICAgICAgICAuZGVtYW5kQ29tbWFuZCgpXG4gICAgICAgIC5zdHJpY3RDb21tYW5kcygpXG4gICAgICAgIC5yZWNvbW1lbmRDb21tYW5kcygpXG4gICAgICAgIC5vcHRpb24oJ3Byb2ZpbGUnLCB7XG4gICAgICAgICAgZGVzY3JpYmU6ICdBbiBBV1MgcHJvZmlsZSBuYW1lLicsXG4gICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgYXJyYXk6IGZhbHNlLFxuICAgICAgICB9KVxuICAgICAgICAuY2hlY2soYXN5bmMgKGFyZ3YpID0+IHtcbiAgICAgICAgICBjb25zdCBzdGFja05hbWVSZWdleCA9XG4gICAgICAgICAgICAvXlthLXpBLVpdWy1hLXpBLVowLTldezEsMTI3fSR8XmFybjpbLWEtekEtWjAtOTovLl8rXSQvO1xuICAgICAgICAgIGlmIChhcmd2WydzdGFjayddICYmIHR5cGVvZiBhcmd2WydzdGFjayddID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaWYgKCFhcmd2LnN0YWNrLm1hdGNoKHN0YWNrTmFtZVJlZ2V4KSkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgQW1wbGlmeVVzZXJFcnJvcignSW52YWxpZENvbW1hbmRJbnB1dEVycm9yJywge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBJbnZhbGlkIC0tc3RhY2sgbmFtZSBwcm92aWRlZDogJHthcmd2LnN0YWNrfWAsXG4gICAgICAgICAgICAgICAgcmVzb2x1dGlvbjpcbiAgICAgICAgICAgICAgICAgICdDaGVjayB0aGUgdmFsdWUgb2YgdGhlIHN0YWNrIG5hbWUgcHJvdmlkZWQgYW5kIHRyeSBhZ2Fpbi4nLFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0pXG4gICAgICAgIC5taWRkbGV3YXJlKFt0aGlzLmNvbW1hbmRNaWRkbGV3YXJlLmVuc3VyZUF3c0NyZWRlbnRpYWxBbmRSZWdpb25dKVxuICAgICk7XG4gIH07XG59XG4iXX0=