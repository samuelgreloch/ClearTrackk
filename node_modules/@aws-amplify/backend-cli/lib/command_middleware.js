import { fromNodeProviderChain } from '@aws-sdk/credential-providers';
import { loadConfig } from '@smithy/node-config-provider';
import { NODE_REGION_CONFIG_OPTIONS } from '@aws-sdk/region-config-resolver';
import { AmplifyUserError } from '@aws-amplify/platform-core';
import { format } from '@aws-amplify/cli-core';
/**
 * Contains middleware functions.
 */
export class CommandMiddleware {
    printer;
    /**
     * Creates command middleware.
     */
    constructor(printer) {
        this.printer = printer;
    }
    /**
     * Ensure AWS credentials and region of the input profile (or 'default' if undefined) are available in the provider chain.
     * If the input profile is defined, the environment variable AWS_PROFILE will be set accordingly.
     */
    ensureAwsCredentialAndRegion = async (argv) => {
        /**
         * The AWS CDK respects older CLI v1 variable names that are no longer supported in the
         * latest AWS SDK. Developers that use the older variables and switch between Amplify
         * and CDK tools will experience region mismatch failures when using Amplify tools. Variable
         * names known to cause such failures are mapped here for a better developer experience.
         */
        this.mapEnvironmentVariables('AWS_DEFAULT_REGION', 'AWS_REGION');
        this.mapEnvironmentVariables('AWS_DEFAULT_PROFILE', 'AWS_PROFILE');
        if (argv.profile) {
            process.env.AWS_PROFILE = argv.profile;
        }
        const profileSetupInstruction = `To configure a new Amplify profile, use ${format.normalizeAmpxCommand('configure profile')}.`;
        // Check credentials.
        try {
            await fromNodeProviderChain({
                ignoreCache: true,
            })();
        }
        catch (err) {
            const errorMessage = argv.profile
                ? `Failed to load AWS credentials for profile '${argv.profile}'`
                : 'Failed to load default AWS credentials';
            throw new AmplifyUserError('InvalidCredentialError', {
                message: errorMessage,
                resolution: profileSetupInstruction,
            }, err);
        }
        // Check region.
        let region = undefined;
        try {
            region = await loadConfig(NODE_REGION_CONFIG_OPTIONS, {
                ignoreCache: true,
            })();
        }
        catch (err) {
            const errorMessage = argv.profile
                ? `Failed to load AWS region for profile '${argv.profile}'`
                : 'Failed to load default AWS region';
            throw new AmplifyUserError('InvalidCredentialError', {
                message: errorMessage,
                resolution: profileSetupInstruction,
            }, err);
        }
        if (!region.trim()) {
            throw new AmplifyUserError('InvalidCredentialError', {
                message: 'The AWS region is blank',
                resolution: 'Ensure that a valid AWS region is provided in profile configuration or AWS_REGION environment variable.',
            });
        }
    };
    /**
     * Maps one environment variable name to the other
     */
    mapEnvironmentVariables(legacyName, preferredName) {
        if (!process.env[legacyName]) {
            return;
        }
        if (process.env[preferredName]) {
            this.printer.log(`Both the legacy '${legacyName}' and preferred '${preferredName}' environment variables detected. Using '${preferredName}'`);
            return;
        }
        this.printer.log(`Legacy environment variable '${legacyName}' detected. Mapping to '${preferredName}'`);
        process.env[preferredName] = process.env[legacyName];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZF9taWRkbGV3YXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbW1hbmRfbWlkZGxld2FyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUN0RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDMUQsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDN0UsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDOUQsT0FBTyxFQUFXLE1BQU0sRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRXhEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGlCQUFpQjtJQUlDO0lBSDdCOztPQUVHO0lBQ0gsWUFBNkIsT0FBZ0I7UUFBaEIsWUFBTyxHQUFQLE9BQU8sQ0FBUztJQUFHLENBQUM7SUFFakQ7OztPQUdHO0lBQ0gsNEJBQTRCLEdBQUcsS0FBSyxFQUdsQyxJQUEyQixFQUMzQixFQUFFO1FBQ0Y7Ozs7O1dBS0c7UUFDSCxJQUFJLENBQUMsdUJBQXVCLENBQUMsb0JBQW9CLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDakUsSUFBSSxDQUFDLHVCQUF1QixDQUFDLHFCQUFxQixFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBRW5FLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1NBQ3hDO1FBRUQsTUFBTSx1QkFBdUIsR0FBRywyQ0FBMkMsTUFBTSxDQUFDLG9CQUFvQixDQUNwRyxtQkFBbUIsQ0FDcEIsR0FBRyxDQUFDO1FBRUwscUJBQXFCO1FBQ3JCLElBQUk7WUFDRixNQUFNLHFCQUFxQixDQUFDO2dCQUMxQixXQUFXLEVBQUUsSUFBSTthQUNsQixDQUFDLEVBQUUsQ0FBQztTQUNOO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsT0FBTztnQkFDL0IsQ0FBQyxDQUFDLCtDQUErQyxJQUFJLENBQUMsT0FBTyxHQUFHO2dCQUNoRSxDQUFDLENBQUMsd0NBQXdDLENBQUM7WUFDN0MsTUFBTSxJQUFJLGdCQUFnQixDQUN4Qix3QkFBd0IsRUFDeEI7Z0JBQ0UsT0FBTyxFQUFFLFlBQVk7Z0JBQ3JCLFVBQVUsRUFBRSx1QkFBdUI7YUFDcEMsRUFDRCxHQUFZLENBQ2IsQ0FBQztTQUNIO1FBRUQsZ0JBQWdCO1FBQ2hCLElBQUksTUFBTSxHQUF1QixTQUFTLENBQUM7UUFDM0MsSUFBSTtZQUNGLE1BQU0sR0FBRyxNQUFNLFVBQVUsQ0FBQywwQkFBMEIsRUFBRTtnQkFDcEQsV0FBVyxFQUFFLElBQUk7YUFDbEIsQ0FBQyxFQUFFLENBQUM7U0FDTjtRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ1osTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU87Z0JBQy9CLENBQUMsQ0FBQywwQ0FBMEMsSUFBSSxDQUFDLE9BQU8sR0FBRztnQkFDM0QsQ0FBQyxDQUFDLG1DQUFtQyxDQUFDO1lBQ3hDLE1BQU0sSUFBSSxnQkFBZ0IsQ0FDeEIsd0JBQXdCLEVBQ3hCO2dCQUNFLE9BQU8sRUFBRSxZQUFZO2dCQUNyQixVQUFVLEVBQUUsdUJBQXVCO2FBQ3BDLEVBQ0QsR0FBWSxDQUNiLENBQUM7U0FDSDtRQUNELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDbEIsTUFBTSxJQUFJLGdCQUFnQixDQUFDLHdCQUF3QixFQUFFO2dCQUNuRCxPQUFPLEVBQUUseUJBQXlCO2dCQUNsQyxVQUFVLEVBQ1IseUdBQXlHO2FBQzVHLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQyxDQUFDO0lBRUY7O09BRUc7SUFDSyx1QkFBdUIsQ0FDN0IsVUFBa0IsRUFDbEIsYUFBcUI7UUFFckIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDNUIsT0FBTztTQUNSO1FBQ0QsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxFQUFFO1lBQzlCLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUNkLG9CQUFvQixVQUFVLG9CQUFvQixhQUFhLDRDQUE0QyxhQUFhLEdBQUcsQ0FDNUgsQ0FBQztZQUNGLE9BQU87U0FDUjtRQUNELElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUNkLGdDQUFnQyxVQUFVLDJCQUEyQixhQUFhLEdBQUcsQ0FDdEYsQ0FBQztRQUNGLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN2RCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcmd1bWVudHNDYW1lbENhc2UgfSBmcm9tICd5YXJncyc7XG5pbXBvcnQgeyBmcm9tTm9kZVByb3ZpZGVyQ2hhaW4gfSBmcm9tICdAYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVycyc7XG5pbXBvcnQgeyBsb2FkQ29uZmlnIH0gZnJvbSAnQHNtaXRoeS9ub2RlLWNvbmZpZy1wcm92aWRlcic7XG5pbXBvcnQgeyBOT0RFX1JFR0lPTl9DT05GSUdfT1BUSU9OUyB9IGZyb20gJ0Bhd3Mtc2RrL3JlZ2lvbi1jb25maWctcmVzb2x2ZXInO1xuaW1wb3J0IHsgQW1wbGlmeVVzZXJFcnJvciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbGF0Zm9ybS1jb3JlJztcbmltcG9ydCB7IFByaW50ZXIsIGZvcm1hdCB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9jbGktY29yZSc7XG5cbi8qKlxuICogQ29udGFpbnMgbWlkZGxld2FyZSBmdW5jdGlvbnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBDb21tYW5kTWlkZGxld2FyZSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGNvbW1hbmQgbWlkZGxld2FyZS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgcHJpbnRlcjogUHJpbnRlcikge31cblxuICAvKipcbiAgICogRW5zdXJlIEFXUyBjcmVkZW50aWFscyBhbmQgcmVnaW9uIG9mIHRoZSBpbnB1dCBwcm9maWxlIChvciAnZGVmYXVsdCcgaWYgdW5kZWZpbmVkKSBhcmUgYXZhaWxhYmxlIGluIHRoZSBwcm92aWRlciBjaGFpbi5cbiAgICogSWYgdGhlIGlucHV0IHByb2ZpbGUgaXMgZGVmaW5lZCwgdGhlIGVudmlyb25tZW50IHZhcmlhYmxlIEFXU19QUk9GSUxFIHdpbGwgYmUgc2V0IGFjY29yZGluZ2x5LlxuICAgKi9cbiAgZW5zdXJlQXdzQ3JlZGVudGlhbEFuZFJlZ2lvbiA9IGFzeW5jIDxcbiAgICBUIGV4dGVuZHMgeyBwcm9maWxlOiBzdHJpbmcgfCB1bmRlZmluZWQgfVxuICA+KFxuICAgIGFyZ3Y6IEFyZ3VtZW50c0NhbWVsQ2FzZTxUPlxuICApID0+IHtcbiAgICAvKipcbiAgICAgKiBUaGUgQVdTIENESyByZXNwZWN0cyBvbGRlciBDTEkgdjEgdmFyaWFibGUgbmFtZXMgdGhhdCBhcmUgbm8gbG9uZ2VyIHN1cHBvcnRlZCBpbiB0aGVcbiAgICAgKiBsYXRlc3QgQVdTIFNESy4gRGV2ZWxvcGVycyB0aGF0IHVzZSB0aGUgb2xkZXIgdmFyaWFibGVzIGFuZCBzd2l0Y2ggYmV0d2VlbiBBbXBsaWZ5XG4gICAgICogYW5kIENESyB0b29scyB3aWxsIGV4cGVyaWVuY2UgcmVnaW9uIG1pc21hdGNoIGZhaWx1cmVzIHdoZW4gdXNpbmcgQW1wbGlmeSB0b29scy4gVmFyaWFibGVcbiAgICAgKiBuYW1lcyBrbm93biB0byBjYXVzZSBzdWNoIGZhaWx1cmVzIGFyZSBtYXBwZWQgaGVyZSBmb3IgYSBiZXR0ZXIgZGV2ZWxvcGVyIGV4cGVyaWVuY2UuXG4gICAgICovXG4gICAgdGhpcy5tYXBFbnZpcm9ubWVudFZhcmlhYmxlcygnQVdTX0RFRkFVTFRfUkVHSU9OJywgJ0FXU19SRUdJT04nKTtcbiAgICB0aGlzLm1hcEVudmlyb25tZW50VmFyaWFibGVzKCdBV1NfREVGQVVMVF9QUk9GSUxFJywgJ0FXU19QUk9GSUxFJyk7XG5cbiAgICBpZiAoYXJndi5wcm9maWxlKSB7XG4gICAgICBwcm9jZXNzLmVudi5BV1NfUFJPRklMRSA9IGFyZ3YucHJvZmlsZTtcbiAgICB9XG5cbiAgICBjb25zdCBwcm9maWxlU2V0dXBJbnN0cnVjdGlvbiA9IGBUbyBjb25maWd1cmUgYSBuZXcgQW1wbGlmeSBwcm9maWxlLCB1c2UgJHtmb3JtYXQubm9ybWFsaXplQW1weENvbW1hbmQoXG4gICAgICAnY29uZmlndXJlIHByb2ZpbGUnXG4gICAgKX0uYDtcblxuICAgIC8vIENoZWNrIGNyZWRlbnRpYWxzLlxuICAgIHRyeSB7XG4gICAgICBhd2FpdCBmcm9tTm9kZVByb3ZpZGVyQ2hhaW4oe1xuICAgICAgICBpZ25vcmVDYWNoZTogdHJ1ZSxcbiAgICAgIH0pKCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBhcmd2LnByb2ZpbGVcbiAgICAgICAgPyBgRmFpbGVkIHRvIGxvYWQgQVdTIGNyZWRlbnRpYWxzIGZvciBwcm9maWxlICcke2FyZ3YucHJvZmlsZX0nYFxuICAgICAgICA6ICdGYWlsZWQgdG8gbG9hZCBkZWZhdWx0IEFXUyBjcmVkZW50aWFscyc7XG4gICAgICB0aHJvdyBuZXcgQW1wbGlmeVVzZXJFcnJvcihcbiAgICAgICAgJ0ludmFsaWRDcmVkZW50aWFsRXJyb3InLFxuICAgICAgICB7XG4gICAgICAgICAgbWVzc2FnZTogZXJyb3JNZXNzYWdlLFxuICAgICAgICAgIHJlc29sdXRpb246IHByb2ZpbGVTZXR1cEluc3RydWN0aW9uLFxuICAgICAgICB9LFxuICAgICAgICBlcnIgYXMgRXJyb3JcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgcmVnaW9uLlxuICAgIGxldCByZWdpb246IHN0cmluZyB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbiAgICB0cnkge1xuICAgICAgcmVnaW9uID0gYXdhaXQgbG9hZENvbmZpZyhOT0RFX1JFR0lPTl9DT05GSUdfT1BUSU9OUywge1xuICAgICAgICBpZ25vcmVDYWNoZTogdHJ1ZSxcbiAgICAgIH0pKCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBhcmd2LnByb2ZpbGVcbiAgICAgICAgPyBgRmFpbGVkIHRvIGxvYWQgQVdTIHJlZ2lvbiBmb3IgcHJvZmlsZSAnJHthcmd2LnByb2ZpbGV9J2BcbiAgICAgICAgOiAnRmFpbGVkIHRvIGxvYWQgZGVmYXVsdCBBV1MgcmVnaW9uJztcbiAgICAgIHRocm93IG5ldyBBbXBsaWZ5VXNlckVycm9yKFxuICAgICAgICAnSW52YWxpZENyZWRlbnRpYWxFcnJvcicsXG4gICAgICAgIHtcbiAgICAgICAgICBtZXNzYWdlOiBlcnJvck1lc3NhZ2UsXG4gICAgICAgICAgcmVzb2x1dGlvbjogcHJvZmlsZVNldHVwSW5zdHJ1Y3Rpb24sXG4gICAgICAgIH0sXG4gICAgICAgIGVyciBhcyBFcnJvclxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKCFyZWdpb24udHJpbSgpKSB7XG4gICAgICB0aHJvdyBuZXcgQW1wbGlmeVVzZXJFcnJvcignSW52YWxpZENyZWRlbnRpYWxFcnJvcicsIHtcbiAgICAgICAgbWVzc2FnZTogJ1RoZSBBV1MgcmVnaW9uIGlzIGJsYW5rJyxcbiAgICAgICAgcmVzb2x1dGlvbjpcbiAgICAgICAgICAnRW5zdXJlIHRoYXQgYSB2YWxpZCBBV1MgcmVnaW9uIGlzIHByb3ZpZGVkIGluIHByb2ZpbGUgY29uZmlndXJhdGlvbiBvciBBV1NfUkVHSU9OIGVudmlyb25tZW50IHZhcmlhYmxlLicsXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIE1hcHMgb25lIGVudmlyb25tZW50IHZhcmlhYmxlIG5hbWUgdG8gdGhlIG90aGVyXG4gICAqL1xuICBwcml2YXRlIG1hcEVudmlyb25tZW50VmFyaWFibGVzKFxuICAgIGxlZ2FjeU5hbWU6IHN0cmluZyxcbiAgICBwcmVmZXJyZWROYW1lOiBzdHJpbmdcbiAgKTogdm9pZCB7XG4gICAgaWYgKCFwcm9jZXNzLmVudltsZWdhY3lOYW1lXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAocHJvY2Vzcy5lbnZbcHJlZmVycmVkTmFtZV0pIHtcbiAgICAgIHRoaXMucHJpbnRlci5sb2coXG4gICAgICAgIGBCb3RoIHRoZSBsZWdhY3kgJyR7bGVnYWN5TmFtZX0nIGFuZCBwcmVmZXJyZWQgJyR7cHJlZmVycmVkTmFtZX0nIGVudmlyb25tZW50IHZhcmlhYmxlcyBkZXRlY3RlZC4gVXNpbmcgJyR7cHJlZmVycmVkTmFtZX0nYFxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5wcmludGVyLmxvZyhcbiAgICAgIGBMZWdhY3kgZW52aXJvbm1lbnQgdmFyaWFibGUgJyR7bGVnYWN5TmFtZX0nIGRldGVjdGVkLiBNYXBwaW5nIHRvICcke3ByZWZlcnJlZE5hbWV9J2BcbiAgICApO1xuICAgIHByb2Nlc3MuZW52W3ByZWZlcnJlZE5hbWVdID0gcHJvY2Vzcy5lbnZbbGVnYWN5TmFtZV07XG4gIH1cbn1cbiJdfQ==