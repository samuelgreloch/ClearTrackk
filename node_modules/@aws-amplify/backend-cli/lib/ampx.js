#!/usr/bin/env node
import { createMainParser } from './main_parser_factory.js';
import { attachUnhandledExceptionListeners, generateCommandFailureHandler, } from './error_handler.js';
import { extractSubCommands } from './extract_sub_commands.js';
import { AmplifyFault, PackageJsonReader, UsageDataEmitterFactory, } from '@aws-amplify/platform-core';
import { fileURLToPath } from 'node:url';
import { verifyCommandName } from './verify_command_name.js';
import { hideBin } from 'yargs/helpers';
import { PackageManagerControllerFactory, format } from '@aws-amplify/cli-core';
const packageJson = new PackageJsonReader().read(fileURLToPath(new URL('../package.json', import.meta.url)));
const libraryVersion = packageJson.version;
if (libraryVersion == undefined) {
    throw new AmplifyFault('UnknownVersionFault', {
        message: 'Library version cannot be determined. Check the library installation',
    });
}
const dependencies = await new PackageManagerControllerFactory()
    .getPackageManagerController()
    .tryGetDependencies();
const usageDataEmitter = await new UsageDataEmitterFactory().getInstance(libraryVersion, dependencies);
attachUnhandledExceptionListeners(usageDataEmitter);
verifyCommandName();
const parser = createMainParser(libraryVersion);
const errorHandler = generateCommandFailureHandler(parser, usageDataEmitter);
try {
    await parser.parseAsync(hideBin(process.argv));
    const metricDimension = {};
    const subCommands = extractSubCommands(parser);
    if (subCommands) {
        metricDimension.command = subCommands;
    }
    await usageDataEmitter.emitSuccess({}, metricDimension);
}
catch (e) {
    if (e instanceof Error) {
        await errorHandler(format.error(e), e);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW1weC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9hbXB4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUM1RCxPQUFPLEVBQ0wsaUNBQWlDLEVBQ2pDLDZCQUE2QixHQUM5QixNQUFNLG9CQUFvQixDQUFDO0FBQzVCLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQy9ELE9BQU8sRUFDTCxZQUFZLEVBQ1osaUJBQWlCLEVBQ2pCLHVCQUF1QixHQUN4QixNQUFNLDRCQUE0QixDQUFDO0FBQ3BDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDekMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDN0QsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4QyxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFaEYsTUFBTSxXQUFXLEdBQUcsSUFBSSxpQkFBaUIsRUFBRSxDQUFDLElBQUksQ0FDOUMsYUFBYSxDQUFDLElBQUksR0FBRyxDQUFDLGlCQUFpQixFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDM0QsQ0FBQztBQUNGLE1BQU0sY0FBYyxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUM7QUFFM0MsSUFBSSxjQUFjLElBQUksU0FBUyxFQUFFO0lBQy9CLE1BQU0sSUFBSSxZQUFZLENBQUMscUJBQXFCLEVBQUU7UUFDNUMsT0FBTyxFQUNMLHNFQUFzRTtLQUN6RSxDQUFDLENBQUM7Q0FDSjtBQUVELE1BQU0sWUFBWSxHQUFHLE1BQU0sSUFBSSwrQkFBK0IsRUFBRTtLQUM3RCwyQkFBMkIsRUFBRTtLQUM3QixrQkFBa0IsRUFBRSxDQUFDO0FBRXhCLE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxJQUFJLHVCQUF1QixFQUFFLENBQUMsV0FBVyxDQUN0RSxjQUFjLEVBQ2QsWUFBWSxDQUNiLENBQUM7QUFFRixpQ0FBaUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBRXBELGlCQUFpQixFQUFFLENBQUM7QUFFcEIsTUFBTSxNQUFNLEdBQUcsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDaEQsTUFBTSxZQUFZLEdBQUcsNkJBQTZCLENBQUMsTUFBTSxFQUFFLGdCQUFnQixDQUFDLENBQUM7QUFFN0UsSUFBSTtJQUNGLE1BQU0sTUFBTSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDL0MsTUFBTSxlQUFlLEdBQTJCLEVBQUUsQ0FBQztJQUNuRCxNQUFNLFdBQVcsR0FBRyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUUvQyxJQUFJLFdBQVcsRUFBRTtRQUNmLGVBQWUsQ0FBQyxPQUFPLEdBQUcsV0FBVyxDQUFDO0tBQ3ZDO0lBRUQsTUFBTSxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsRUFBRSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0NBQ3pEO0FBQUMsT0FBTyxDQUFDLEVBQUU7SUFDVixJQUFJLENBQUMsWUFBWSxLQUFLLEVBQUU7UUFDdEIsTUFBTSxZQUFZLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztLQUN4QztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgbm9kZVxuaW1wb3J0IHsgY3JlYXRlTWFpblBhcnNlciB9IGZyb20gJy4vbWFpbl9wYXJzZXJfZmFjdG9yeS5qcyc7XG5pbXBvcnQge1xuICBhdHRhY2hVbmhhbmRsZWRFeGNlcHRpb25MaXN0ZW5lcnMsXG4gIGdlbmVyYXRlQ29tbWFuZEZhaWx1cmVIYW5kbGVyLFxufSBmcm9tICcuL2Vycm9yX2hhbmRsZXIuanMnO1xuaW1wb3J0IHsgZXh0cmFjdFN1YkNvbW1hbmRzIH0gZnJvbSAnLi9leHRyYWN0X3N1Yl9jb21tYW5kcy5qcyc7XG5pbXBvcnQge1xuICBBbXBsaWZ5RmF1bHQsXG4gIFBhY2thZ2VKc29uUmVhZGVyLFxuICBVc2FnZURhdGFFbWl0dGVyRmFjdG9yeSxcbn0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsYXRmb3JtLWNvcmUnO1xuaW1wb3J0IHsgZmlsZVVSTFRvUGF0aCB9IGZyb20gJ25vZGU6dXJsJztcbmltcG9ydCB7IHZlcmlmeUNvbW1hbmROYW1lIH0gZnJvbSAnLi92ZXJpZnlfY29tbWFuZF9uYW1lLmpzJztcbmltcG9ydCB7IGhpZGVCaW4gfSBmcm9tICd5YXJncy9oZWxwZXJzJztcbmltcG9ydCB7IFBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlckZhY3RvcnksIGZvcm1hdCB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9jbGktY29yZSc7XG5cbmNvbnN0IHBhY2thZ2VKc29uID0gbmV3IFBhY2thZ2VKc29uUmVhZGVyKCkucmVhZChcbiAgZmlsZVVSTFRvUGF0aChuZXcgVVJMKCcuLi9wYWNrYWdlLmpzb24nLCBpbXBvcnQubWV0YS51cmwpKVxuKTtcbmNvbnN0IGxpYnJhcnlWZXJzaW9uID0gcGFja2FnZUpzb24udmVyc2lvbjtcblxuaWYgKGxpYnJhcnlWZXJzaW9uID09IHVuZGVmaW5lZCkge1xuICB0aHJvdyBuZXcgQW1wbGlmeUZhdWx0KCdVbmtub3duVmVyc2lvbkZhdWx0Jywge1xuICAgIG1lc3NhZ2U6XG4gICAgICAnTGlicmFyeSB2ZXJzaW9uIGNhbm5vdCBiZSBkZXRlcm1pbmVkLiBDaGVjayB0aGUgbGlicmFyeSBpbnN0YWxsYXRpb24nLFxuICB9KTtcbn1cblxuY29uc3QgZGVwZW5kZW5jaWVzID0gYXdhaXQgbmV3IFBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlckZhY3RvcnkoKVxuICAuZ2V0UGFja2FnZU1hbmFnZXJDb250cm9sbGVyKClcbiAgLnRyeUdldERlcGVuZGVuY2llcygpO1xuXG5jb25zdCB1c2FnZURhdGFFbWl0dGVyID0gYXdhaXQgbmV3IFVzYWdlRGF0YUVtaXR0ZXJGYWN0b3J5KCkuZ2V0SW5zdGFuY2UoXG4gIGxpYnJhcnlWZXJzaW9uLFxuICBkZXBlbmRlbmNpZXNcbik7XG5cbmF0dGFjaFVuaGFuZGxlZEV4Y2VwdGlvbkxpc3RlbmVycyh1c2FnZURhdGFFbWl0dGVyKTtcblxudmVyaWZ5Q29tbWFuZE5hbWUoKTtcblxuY29uc3QgcGFyc2VyID0gY3JlYXRlTWFpblBhcnNlcihsaWJyYXJ5VmVyc2lvbik7XG5jb25zdCBlcnJvckhhbmRsZXIgPSBnZW5lcmF0ZUNvbW1hbmRGYWlsdXJlSGFuZGxlcihwYXJzZXIsIHVzYWdlRGF0YUVtaXR0ZXIpO1xuXG50cnkge1xuICBhd2FpdCBwYXJzZXIucGFyc2VBc3luYyhoaWRlQmluKHByb2Nlc3MuYXJndikpO1xuICBjb25zdCBtZXRyaWNEaW1lbnNpb246IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fTtcbiAgY29uc3Qgc3ViQ29tbWFuZHMgPSBleHRyYWN0U3ViQ29tbWFuZHMocGFyc2VyKTtcblxuICBpZiAoc3ViQ29tbWFuZHMpIHtcbiAgICBtZXRyaWNEaW1lbnNpb24uY29tbWFuZCA9IHN1YkNvbW1hbmRzO1xuICB9XG5cbiAgYXdhaXQgdXNhZ2VEYXRhRW1pdHRlci5lbWl0U3VjY2Vzcyh7fSwgbWV0cmljRGltZW5zaW9uKTtcbn0gY2F0Y2ggKGUpIHtcbiAgaWYgKGUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIGF3YWl0IGVycm9ySGFuZGxlcihmb3JtYXQuZXJyb3IoZSksIGUpO1xuICB9XG59XG4iXX0=