/**
 * Resolves the backend id when branch or stack is passed as an arg, otherwise returns a sandbox backend identifier
 */
export class BackendIdentifierResolverWithFallback {
    defaultResolver;
    fallbackResolver;
    /**
     * Accepts the sandbox id resolver as a parameter
     */
    constructor(defaultResolver, fallbackResolver) {
        this.defaultResolver = defaultResolver;
        this.fallbackResolver = fallbackResolver;
    }
    /**
     * resolves to deployed backend id, falling back to the sandbox id if stack or appId and branch inputs are not provided
     */
    resolveDeployedBackendIdentifier = async (args) => {
        if (args.stack !== undefined ||
            args.appId !== undefined ||
            args.branch !== undefined) {
            return this.defaultResolver.resolveDeployedBackendIdentifier(args);
        }
        return this.fallbackResolver.resolve();
    };
    /**
     * Resolves deployed backend id to backend id, falling back to the sandbox id if stack or appId and branch inputs are not provided
     */
    resolveBackendIdentifier = async (args) => {
        if (args.stack !== undefined ||
            args.appId !== undefined ||
            args.branch !== undefined) {
            return this.defaultResolver.resolveBackendIdentifier(args);
        }
        return this.fallbackResolver.resolve();
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2VuZF9pZGVudGlmaWVyX3dpdGhfc2FuZGJveF9mYWxsYmFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9iYWNrZW5kLWlkZW50aWZpZXIvYmFja2VuZF9pZGVudGlmaWVyX3dpdGhfc2FuZGJveF9mYWxsYmFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFNQTs7R0FFRztBQUNILE1BQU0sT0FBTyxxQ0FBcUM7SUFPdEM7SUFDQTtJQUxWOztPQUVHO0lBQ0gsWUFDVSxlQUEwQyxFQUMxQyxnQkFBMEM7UUFEMUMsb0JBQWUsR0FBZixlQUFlLENBQTJCO1FBQzFDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBMEI7SUFDakQsQ0FBQztJQUNKOztPQUVHO0lBQ0gsZ0NBQWdDLEdBQUcsS0FBSyxFQUN0QyxJQUFpQyxFQUNqQyxFQUFFO1FBQ0YsSUFDRSxJQUFJLENBQUMsS0FBSyxLQUFLLFNBQVM7WUFDeEIsSUFBSSxDQUFDLEtBQUssS0FBSyxTQUFTO1lBQ3hCLElBQUksQ0FBQyxNQUFNLEtBQUssU0FBUyxFQUN6QjtZQUNBLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxnQ0FBZ0MsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNwRTtRQUVELE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3pDLENBQUMsQ0FBQztJQUNGOztPQUVHO0lBQ0gsd0JBQXdCLEdBQUcsS0FBSyxFQUFFLElBQWlDLEVBQUUsRUFBRTtRQUNyRSxJQUNFLElBQUksQ0FBQyxLQUFLLEtBQUssU0FBUztZQUN4QixJQUFJLENBQUMsS0FBSyxLQUFLLFNBQVM7WUFDeEIsSUFBSSxDQUFDLE1BQU0sS0FBSyxTQUFTLEVBQ3pCO1lBQ0EsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLHdCQUF3QixDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzVEO1FBRUQsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDekMsQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTYW5kYm94QmFja2VuZElkUmVzb2x2ZXIgfSBmcm9tICcuLi9jb21tYW5kcy9zYW5kYm94L3NhbmRib3hfaWRfcmVzb2x2ZXIuanMnO1xuaW1wb3J0IHtcbiAgQmFja2VuZElkZW50aWZpZXJQYXJhbWV0ZXJzLFxuICBCYWNrZW5kSWRlbnRpZmllclJlc29sdmVyLFxufSBmcm9tICcuL2JhY2tlbmRfaWRlbnRpZmllcl9yZXNvbHZlci5qcyc7XG5cbi8qKlxuICogUmVzb2x2ZXMgdGhlIGJhY2tlbmQgaWQgd2hlbiBicmFuY2ggb3Igc3RhY2sgaXMgcGFzc2VkIGFzIGFuIGFyZywgb3RoZXJ3aXNlIHJldHVybnMgYSBzYW5kYm94IGJhY2tlbmQgaWRlbnRpZmllclxuICovXG5leHBvcnQgY2xhc3MgQmFja2VuZElkZW50aWZpZXJSZXNvbHZlcldpdGhGYWxsYmFja1xuICBpbXBsZW1lbnRzIEJhY2tlbmRJZGVudGlmaWVyUmVzb2x2ZXJcbntcbiAgLyoqXG4gICAqIEFjY2VwdHMgdGhlIHNhbmRib3ggaWQgcmVzb2x2ZXIgYXMgYSBwYXJhbWV0ZXJcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZGVmYXVsdFJlc29sdmVyOiBCYWNrZW5kSWRlbnRpZmllclJlc29sdmVyLFxuICAgIHByaXZhdGUgZmFsbGJhY2tSZXNvbHZlcjogU2FuZGJveEJhY2tlbmRJZFJlc29sdmVyXG4gICkge31cbiAgLyoqXG4gICAqIHJlc29sdmVzIHRvIGRlcGxveWVkIGJhY2tlbmQgaWQsIGZhbGxpbmcgYmFjayB0byB0aGUgc2FuZGJveCBpZCBpZiBzdGFjayBvciBhcHBJZCBhbmQgYnJhbmNoIGlucHV0cyBhcmUgbm90IHByb3ZpZGVkXG4gICAqL1xuICByZXNvbHZlRGVwbG95ZWRCYWNrZW5kSWRlbnRpZmllciA9IGFzeW5jIChcbiAgICBhcmdzOiBCYWNrZW5kSWRlbnRpZmllclBhcmFtZXRlcnNcbiAgKSA9PiB7XG4gICAgaWYgKFxuICAgICAgYXJncy5zdGFjayAhPT0gdW5kZWZpbmVkIHx8XG4gICAgICBhcmdzLmFwcElkICE9PSB1bmRlZmluZWQgfHxcbiAgICAgIGFyZ3MuYnJhbmNoICE9PSB1bmRlZmluZWRcbiAgICApIHtcbiAgICAgIHJldHVybiB0aGlzLmRlZmF1bHRSZXNvbHZlci5yZXNvbHZlRGVwbG95ZWRCYWNrZW5kSWRlbnRpZmllcihhcmdzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5mYWxsYmFja1Jlc29sdmVyLnJlc29sdmUoKTtcbiAgfTtcbiAgLyoqXG4gICAqIFJlc29sdmVzIGRlcGxveWVkIGJhY2tlbmQgaWQgdG8gYmFja2VuZCBpZCwgZmFsbGluZyBiYWNrIHRvIHRoZSBzYW5kYm94IGlkIGlmIHN0YWNrIG9yIGFwcElkIGFuZCBicmFuY2ggaW5wdXRzIGFyZSBub3QgcHJvdmlkZWRcbiAgICovXG4gIHJlc29sdmVCYWNrZW5kSWRlbnRpZmllciA9IGFzeW5jIChhcmdzOiBCYWNrZW5kSWRlbnRpZmllclBhcmFtZXRlcnMpID0+IHtcbiAgICBpZiAoXG4gICAgICBhcmdzLnN0YWNrICE9PSB1bmRlZmluZWQgfHxcbiAgICAgIGFyZ3MuYXBwSWQgIT09IHVuZGVmaW5lZCB8fFxuICAgICAgYXJncy5icmFuY2ggIT09IHVuZGVmaW5lZFxuICAgICkge1xuICAgICAgcmV0dXJuIHRoaXMuZGVmYXVsdFJlc29sdmVyLnJlc29sdmVCYWNrZW5kSWRlbnRpZmllcihhcmdzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5mYWxsYmFja1Jlc29sdmVyLnJlc29sdmUoKTtcbiAgfTtcbn1cbiJdfQ==