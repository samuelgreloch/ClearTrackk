import { AmplifyData, AmplifyDynamoDbTableWrapper, } from '@aws-amplify/data-construct';
import { generateModelsSync } from '@aws-amplify/graphql-generator';
import * as path from 'path';
import { combineCDKSchemas, convertSchemaToCDK, isCombinedSchema, isDataSchema, } from './convert_schema.js';
import { convertFunctionNameMapToCDK } from './convert_functions.js';
import { buildConstructFactoryProvidedAuthConfig, convertAuthorizationModesToCDK, isUsingDefaultApiKeyAuth, } from './convert_authorization_modes.js';
import { validateAuthorizationModes } from './validate_authorization_modes.js';
import { AmplifyError, AmplifyUserError, CDKContextKey, TagName, } from '@aws-amplify/platform-core';
import { Aspects, RemovalPolicy, Tags } from 'aws-cdk-lib';
import { convertJsResolverDefinition } from './convert_js_resolvers.js';
import { AppSyncPolicyGenerator } from './app_sync_policy_generator.js';
import { Bucket } from 'aws-cdk-lib/aws-s3';
import { BucketDeployment, Source } from 'aws-cdk-lib/aws-s3-deployment';
import { convertLoggingOptionsToCDK } from './logging_options_parser.js';
const modelIntrospectionSchemaKey = 'modelIntrospectionSchema.json';
const defaultName = 'amplifyData';
/**
 * Singleton factory for AmplifyGraphqlApi constructs that can be used in Amplify project files.
 *
 * Exported for testing purpose only & should NOT be exported out of the package.
 */
export class DataFactory {
    props;
    importStack;
    // publicly accessible for testing purpose only.
    static factoryCount = 0;
    generator;
    /**
     * Create a new AmplifyConstruct
     */
    constructor(props, importStack = new Error().stack) {
        this.props = props;
        this.importStack = importStack;
        if (DataFactory.factoryCount > 0) {
            throw new AmplifyUserError('MultipleSingletonResourcesError', {
                message: 'Multiple `defineData` calls are not allowed within an Amplify backend',
                resolution: 'Remove all but one `defineData` call',
            });
        }
        DataFactory.factoryCount++;
    }
    /**
     * Gets an instance of the Data construct
     */
    getInstance = (props) => {
        const { constructContainer, outputStorageStrategy, importPathVerifier, resourceNameValidator, } = props;
        importPathVerifier?.verify(this.importStack, path.join('amplify', 'data', 'resource'), 'Amplify Data must be defined in amplify/data/resource.ts');
        if (this.props.name) {
            resourceNameValidator?.validate(this.props.name);
        }
        if (!this.generator) {
            this.generator = new DataGenerator(this.props, buildConstructFactoryProvidedAuthConfig(props.constructContainer
                .getConstructFactory('AuthResources')
                ?.getInstance(props)), props, outputStorageStrategy);
        }
        return constructContainer.getOrCompute(this.generator);
    };
}
class DataGenerator {
    props;
    providedAuthConfig;
    getInstanceProps;
    outputStorageStrategy;
    resourceGroupName = 'data';
    name;
    constructor(props, providedAuthConfig, getInstanceProps, outputStorageStrategy) {
        this.props = props;
        this.providedAuthConfig = providedAuthConfig;
        this.getInstanceProps = getInstanceProps;
        this.outputStorageStrategy = outputStorageStrategy;
        this.name = props.name ?? defaultName;
    }
    generateContainerEntry = ({ scope, ssmEnvironmentEntriesGenerator, backendSecretResolver, stableBackendIdentifiers, }) => {
        const amplifyGraphqlDefinitions = [];
        const schemasJsFunctions = [];
        const schemasFunctionSchemaAccess = [];
        let schemasLambdaFunctions = {};
        try {
            const schemas = isCombinedSchema(this.props.schema)
                ? this.props.schema.schemas
                : [this.props.schema];
            schemas.forEach((schema) => {
                if (isDataSchema(schema)) {
                    const { jsFunctions, functionSchemaAccess, lambdaFunctions } = schema.transform();
                    schemasJsFunctions.push(...jsFunctions);
                    schemasFunctionSchemaAccess.push(...functionSchemaAccess);
                    schemasLambdaFunctions = {
                        ...schemasLambdaFunctions,
                        ...lambdaFunctions,
                    };
                }
                amplifyGraphqlDefinitions.push(convertSchemaToCDK(schema, backendSecretResolver, stableBackendIdentifiers));
            });
        }
        catch (error) {
            throw new AmplifyUserError('InvalidSchemaError', {
                message: error instanceof Error
                    ? error.message
                    : 'Failed to parse schema definition.',
                resolution: 'Check your data schema definition for syntax and type errors.',
            }, error instanceof Error ? error : undefined);
        }
        let authorizationModes;
        try {
            authorizationModes = convertAuthorizationModesToCDK(this.getInstanceProps, this.providedAuthConfig, this.props.authorizationModes);
        }
        catch (error) {
            if (AmplifyError.isAmplifyError(error)) {
                throw error;
            }
            throw new AmplifyUserError('InvalidSchemaAuthError', {
                message: error instanceof Error
                    ? error.message
                    : 'Failed to parse authorization modes.',
                resolution: 'Ensure the auth rules on your schema are valid.',
            }, error instanceof Error ? error : undefined);
        }
        try {
            validateAuthorizationModes(this.props.authorizationModes, authorizationModes);
        }
        catch (error) {
            throw new AmplifyUserError('InvalidSchemaAuthError', {
                message: error instanceof Error
                    ? error.message
                    : 'Failed to validate authorization modes',
                resolution: 'Ensure the auth rules on your schema are valid.',
            }, error instanceof Error ? error : undefined);
        }
        const sandboxModeEnabled = isUsingDefaultApiKeyAuth(this.providedAuthConfig, this.props.authorizationModes);
        const propsFunctions = this.props.functions ?? {};
        const functionNameMap = convertFunctionNameMapToCDK(this.getInstanceProps, {
            ...propsFunctions,
            ...schemasLambdaFunctions,
        });
        let amplifyApi = undefined;
        let modelIntrospectionSchema = undefined;
        const isSandboxDeployment = scope.node.tryGetContext(CDKContextKey.DEPLOYMENT_TYPE) === 'sandbox';
        const cdkLoggingOptions = convertLoggingOptionsToCDK(this.props.logging ?? undefined);
        try {
            const combinedSchema = combineCDKSchemas(amplifyGraphqlDefinitions);
            modelIntrospectionSchema = generateModelsSync({
                schema: combinedSchema.schema,
                target: 'introspection',
            })['model-introspection.json'];
            amplifyApi = new AmplifyData(scope, this.name, {
                apiName: this.name,
                definition: combinedSchema,
                authorizationModes,
                outputStorageStrategy: this.outputStorageStrategy,
                functionNameMap,
                translationBehavior: {
                    sandboxModeEnabled,
                    /**
                     * The destructive updates should be always allowed in backend definition and not to be controlled on the IaC
                     * The CI/CD check should take the responsibility to validate if any tables are being replaced and determine whether to execute the changeset
                     */
                    allowDestructiveGraphqlSchemaUpdates: true,
                    _provisionHotswapFriendlyResources: isSandboxDeployment,
                },
                logging: cdkLoggingOptions,
            });
        }
        catch (error) {
            throw new AmplifyUserError('AmplifyDataConstructInitializationError', {
                message: 'Failed to instantiate data construct',
                resolution: 'See the underlying error message for more details.',
            }, error);
        }
        const modelIntrospectionSchemaBucket = new Bucket(scope, 'modelIntrospectionSchemaBucket', {
            enforceSSL: true,
            autoDeleteObjects: true,
            removalPolicy: RemovalPolicy.DESTROY,
        });
        new BucketDeployment(scope, 'modelIntrospectionSchemaBucketDeployment', {
            // See https://github.com/aws-amplify/amplify-category-api/pull/1939
            memoryLimit: 1536,
            destinationBucket: modelIntrospectionSchemaBucket,
            sources: [
                Source.data(modelIntrospectionSchemaKey, modelIntrospectionSchema),
            ],
        });
        Tags.of(amplifyApi).add(TagName.FRIENDLY_NAME, this.name);
        /**;
         * Enable the table replacement upon GSI update
         * This is allowed in sandbox mode ONLY
         */
        if (isSandboxDeployment) {
            Aspects.of(amplifyApi).add(new ReplaceTableUponGsiUpdateOverrideAspect());
        }
        convertJsResolverDefinition(scope, amplifyApi, schemasJsFunctions);
        const namePrefix = this.name === defaultName ? '' : defaultName;
        const ssmEnvironmentScopeContext = {
            [`${namePrefix}${this.name}_GRAPHQL_ENDPOINT`]: amplifyApi.resources.cfnResources.cfnGraphqlApi.attrGraphQlUrl,
            [`${namePrefix}${this.name}_MODEL_INTROSPECTION_SCHEMA_BUCKET_NAME`]: modelIntrospectionSchemaBucket.bucketName,
            [`${namePrefix}${this.name}_MODEL_INTROSPECTION_SCHEMA_KEY`]: modelIntrospectionSchemaKey,
            ['AMPLIFY_DATA_DEFAULT_NAME']: `${namePrefix}${this.name}`,
        };
        const backwardsCompatibleScopeContext = `${this.name}_GRAPHQL_ENDPOINT` !==
            `${namePrefix}${this.name}_GRAPHQL_ENDPOINT`
            ? {
                // @deprecated
                [`${this.name}_GRAPHQL_ENDPOINT`]: amplifyApi.resources.cfnResources.cfnGraphqlApi.attrGraphQlUrl,
            }
            : {};
        const ssmEnvironmentEntries = ssmEnvironmentEntriesGenerator.generateSsmEnvironmentEntries({
            ...ssmEnvironmentScopeContext,
            ...backwardsCompatibleScopeContext,
        });
        const policyGenerator = new AppSyncPolicyGenerator(amplifyApi.resources.graphqlApi, `${modelIntrospectionSchemaBucket.bucketArn}/${modelIntrospectionSchemaKey}`);
        schemasFunctionSchemaAccess.forEach((accessDefinition) => {
            const policy = policyGenerator.generateGraphqlAccessPolicy(accessDefinition.actions);
            accessDefinition.resourceProvider
                .getInstance(this.getInstanceProps)
                .getResourceAccessAcceptor()
                .acceptResourceAccess(policy, ssmEnvironmentEntries);
        });
        return amplifyApi;
    };
}
const REPLACE_TABLE_UPON_GSI_UPDATE_ATTRIBUTE_NAME = 'replaceTableUponGsiUpdate';
/**
 * Aspect class to modify the amplify managed DynamoDB table
 * to allow table replacement upon GSI update
 */
class ReplaceTableUponGsiUpdateOverrideAspect {
    visit(scope) {
        if (AmplifyDynamoDbTableWrapper.isAmplifyDynamoDbTableResource(scope)) {
            // These value setters are not exposed in the wrapper
            // Need to use the property override to escape the hatch
            scope.addPropertyOverride(REPLACE_TABLE_UPON_GSI_UPDATE_ATTRIBUTE_NAME, true);
        }
    }
}
/**
 * Creates a factory that implements ConstructFactory<AmplifyGraphqlApi>
 */
export const defineData = (props) => new DataFactory(props, new Error().stack);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWFBLE9BQU8sRUFDTCxXQUFXLEVBQ1gsMkJBQTJCLEdBRzVCLE1BQU0sNkJBQTZCLENBQUM7QUFFckMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDcEUsT0FBTyxLQUFLLElBQUksTUFBTSxNQUFNLENBQUM7QUFFN0IsT0FBTyxFQUNMLGlCQUFpQixFQUNqQixrQkFBa0IsRUFDbEIsZ0JBQWdCLEVBQ2hCLFlBQVksR0FDYixNQUFNLHFCQUFxQixDQUFDO0FBQzdCLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3JFLE9BQU8sRUFFTCx1Q0FBdUMsRUFDdkMsOEJBQThCLEVBQzlCLHdCQUF3QixHQUN6QixNQUFNLGtDQUFrQyxDQUFDO0FBQzFDLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQy9FLE9BQU8sRUFDTCxZQUFZLEVBQ1osZ0JBQWdCLEVBQ2hCLGFBQWEsRUFDYixPQUFPLEdBQ1IsTUFBTSw0QkFBNEIsQ0FBQztBQUNwQyxPQUFPLEVBQUUsT0FBTyxFQUFXLGFBQWEsRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDcEUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDeEUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFLeEUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzVDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUN6RSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUN6RSxNQUFNLDJCQUEyQixHQUFHLCtCQUErQixDQUFDO0FBQ3BFLE1BQU0sV0FBVyxHQUFHLGFBQWEsQ0FBQztBQUVsQzs7OztHQUlHO0FBQ0gsTUFBTSxPQUFPLFdBQVc7SUFVSDtJQUNBO0lBVm5CLGdEQUFnRDtJQUNoRCxNQUFNLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQztJQUVoQixTQUFTLENBQW1DO0lBRXBEOztPQUVHO0lBQ0gsWUFDbUIsS0FBZ0IsRUFDaEIsY0FBYyxJQUFJLEtBQUssRUFBRSxDQUFDLEtBQUs7UUFEL0IsVUFBSyxHQUFMLEtBQUssQ0FBVztRQUNoQixnQkFBVyxHQUFYLFdBQVcsQ0FBb0I7UUFFaEQsSUFBSSxXQUFXLENBQUMsWUFBWSxHQUFHLENBQUMsRUFBRTtZQUNoQyxNQUFNLElBQUksZ0JBQWdCLENBQUMsaUNBQWlDLEVBQUU7Z0JBQzVELE9BQU8sRUFDTCx1RUFBdUU7Z0JBQ3pFLFVBQVUsRUFBRSxzQ0FBc0M7YUFDbkQsQ0FBQyxDQUFDO1NBQ0o7UUFDRCxXQUFXLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVEOztPQUVHO0lBQ0gsV0FBVyxHQUFHLENBQUMsS0FBdUMsRUFBZSxFQUFFO1FBQ3JFLE1BQU0sRUFDSixrQkFBa0IsRUFDbEIscUJBQXFCLEVBQ3JCLGtCQUFrQixFQUNsQixxQkFBcUIsR0FDdEIsR0FBRyxLQUFLLENBQUM7UUFDVixrQkFBa0IsRUFBRSxNQUFNLENBQ3hCLElBQUksQ0FBQyxXQUFXLEVBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxVQUFVLENBQUMsRUFDeEMsMERBQTBELENBQzNELENBQUM7UUFDRixJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFO1lBQ25CLHFCQUFxQixFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2xEO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDbkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLGFBQWEsQ0FDaEMsSUFBSSxDQUFDLEtBQUssRUFDVix1Q0FBdUMsQ0FDckMsS0FBSyxDQUFDLGtCQUFrQjtpQkFDckIsbUJBQW1CLENBRWxCLGVBQWUsQ0FBQztnQkFDbEIsRUFBRSxXQUFXLENBQUMsS0FBSyxDQUFDLENBQ3ZCLEVBQ0QsS0FBSyxFQUNMLHFCQUFxQixDQUN0QixDQUFDO1NBQ0g7UUFDRCxPQUFPLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFnQixDQUFDO0lBQ3hFLENBQUMsQ0FBQzs7QUFHSixNQUFNLGFBQWE7SUFLRTtJQUNBO0lBQ0E7SUFDQTtJQVBWLGlCQUFpQixHQUE2QixNQUFNLENBQUM7SUFDN0MsSUFBSSxDQUFTO0lBRTlCLFlBQ21CLEtBQWdCLEVBQ2hCLGtCQUFrRCxFQUNsRCxnQkFBa0QsRUFDbEQscUJBQWtFO1FBSGxFLFVBQUssR0FBTCxLQUFLLENBQVc7UUFDaEIsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFnQztRQUNsRCxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtDO1FBQ2xELDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBNkM7UUFFbkYsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxJQUFJLFdBQVcsQ0FBQztJQUN4QyxDQUFDO0lBRUQsc0JBQXNCLEdBQUcsQ0FBQyxFQUN4QixLQUFLLEVBQ0wsOEJBQThCLEVBQzlCLHFCQUFxQixFQUNyQix3QkFBd0IsR0FDSSxFQUFFLEVBQUU7UUFDaEMsTUFBTSx5QkFBeUIsR0FBNkIsRUFBRSxDQUFDO1FBQy9ELE1BQU0sa0JBQWtCLEdBQWlCLEVBQUUsQ0FBQztRQUM1QyxNQUFNLDJCQUEyQixHQUEyQixFQUFFLENBQUM7UUFDL0QsSUFBSSxzQkFBc0IsR0FHdEIsRUFBRSxDQUFDO1FBQ1AsSUFBSTtZQUNGLE1BQU0sT0FBTyxHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDO2dCQUNqRCxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTztnQkFDM0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUV4QixPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7Z0JBQ3pCLElBQUksWUFBWSxDQUFDLE1BQU0sQ0FBQyxFQUFFO29CQUN4QixNQUFNLEVBQUUsV0FBVyxFQUFFLG9CQUFvQixFQUFFLGVBQWUsRUFBRSxHQUMxRCxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7b0JBQ3JCLGtCQUFrQixDQUFDLElBQUksQ0FBQyxHQUFHLFdBQVcsQ0FBQyxDQUFDO29CQUN4QywyQkFBMkIsQ0FBQyxJQUFJLENBQUMsR0FBRyxvQkFBb0IsQ0FBQyxDQUFDO29CQUMxRCxzQkFBc0IsR0FBRzt3QkFDdkIsR0FBRyxzQkFBc0I7d0JBQ3pCLEdBQUcsZUFBZTtxQkFDbkIsQ0FBQztpQkFDSDtnQkFFRCx5QkFBeUIsQ0FBQyxJQUFJLENBQzVCLGtCQUFrQixDQUNoQixNQUFNLEVBQ04scUJBQXFCLEVBQ3JCLHdCQUF3QixDQUN6QixDQUNGLENBQUM7WUFDSixDQUFDLENBQUMsQ0FBQztTQUNKO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxNQUFNLElBQUksZ0JBQWdCLENBQ3hCLG9CQUFvQixFQUNwQjtnQkFDRSxPQUFPLEVBQ0wsS0FBSyxZQUFZLEtBQUs7b0JBQ3BCLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTztvQkFDZixDQUFDLENBQUMsb0NBQW9DO2dCQUMxQyxVQUFVLEVBQ1IsK0RBQStEO2FBQ2xFLEVBQ0QsS0FBSyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQzNDLENBQUM7U0FDSDtRQUVELElBQUksa0JBQWtCLENBQUM7UUFDdkIsSUFBSTtZQUNGLGtCQUFrQixHQUFHLDhCQUE4QixDQUNqRCxJQUFJLENBQUMsZ0JBQWdCLEVBQ3JCLElBQUksQ0FBQyxrQkFBa0IsRUFDdkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FDOUIsQ0FBQztTQUNIO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxJQUFJLFlBQVksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ3RDLE1BQU0sS0FBSyxDQUFDO2FBQ2I7WUFDRCxNQUFNLElBQUksZ0JBQWdCLENBQ3hCLHdCQUF3QixFQUN4QjtnQkFDRSxPQUFPLEVBQ0wsS0FBSyxZQUFZLEtBQUs7b0JBQ3BCLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTztvQkFDZixDQUFDLENBQUMsc0NBQXNDO2dCQUM1QyxVQUFVLEVBQUUsaURBQWlEO2FBQzlELEVBQ0QsS0FBSyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQzNDLENBQUM7U0FDSDtRQUVELElBQUk7WUFDRiwwQkFBMEIsQ0FDeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsRUFDN0Isa0JBQWtCLENBQ25CLENBQUM7U0FDSDtRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ2QsTUFBTSxJQUFJLGdCQUFnQixDQUN4Qix3QkFBd0IsRUFDeEI7Z0JBQ0UsT0FBTyxFQUNMLEtBQUssWUFBWSxLQUFLO29CQUNwQixDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU87b0JBQ2YsQ0FBQyxDQUFDLHdDQUF3QztnQkFDOUMsVUFBVSxFQUFFLGlEQUFpRDthQUM5RCxFQUNELEtBQUssWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUMzQyxDQUFDO1NBQ0g7UUFFRCxNQUFNLGtCQUFrQixHQUFHLHdCQUF3QixDQUNqRCxJQUFJLENBQUMsa0JBQWtCLEVBQ3ZCLElBQUksQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQzlCLENBQUM7UUFFRixNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsSUFBSSxFQUFFLENBQUM7UUFFbEQsTUFBTSxlQUFlLEdBQUcsMkJBQTJCLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQ3pFLEdBQUcsY0FBYztZQUNqQixHQUFHLHNCQUFzQjtTQUMxQixDQUFDLENBQUM7UUFDSCxJQUFJLFVBQVUsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSx3QkFBd0IsR0FBdUIsU0FBUyxDQUFDO1FBRTdELE1BQU0sbUJBQW1CLEdBQ3ZCLEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsS0FBSyxTQUFTLENBQUM7UUFFeEUsTUFBTSxpQkFBaUIsR0FBRywwQkFBMEIsQ0FDbEQsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLElBQUksU0FBUyxDQUNoQyxDQUFDO1FBRUYsSUFBSTtZQUNGLE1BQU0sY0FBYyxHQUFHLGlCQUFpQixDQUFDLHlCQUF5QixDQUFDLENBQUM7WUFDcEUsd0JBQXdCLEdBQUcsa0JBQWtCLENBQUM7Z0JBQzVDLE1BQU0sRUFBRSxjQUFjLENBQUMsTUFBTTtnQkFDN0IsTUFBTSxFQUFFLGVBQWU7YUFDeEIsQ0FBQyxDQUFDLDBCQUEwQixDQUFDLENBQUM7WUFFL0IsVUFBVSxHQUFHLElBQUksV0FBVyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUM3QyxPQUFPLEVBQUUsSUFBSSxDQUFDLElBQUk7Z0JBQ2xCLFVBQVUsRUFBRSxjQUFjO2dCQUMxQixrQkFBa0I7Z0JBQ2xCLHFCQUFxQixFQUFFLElBQUksQ0FBQyxxQkFBcUI7Z0JBQ2pELGVBQWU7Z0JBQ2YsbUJBQW1CLEVBQUU7b0JBQ25CLGtCQUFrQjtvQkFDbEI7Ozt1QkFHRztvQkFDSCxvQ0FBb0MsRUFBRSxJQUFJO29CQUMxQyxrQ0FBa0MsRUFBRSxtQkFBbUI7aUJBQ3hEO2dCQUNELE9BQU8sRUFBRSxpQkFBaUI7YUFDM0IsQ0FBQyxDQUFDO1NBQ0o7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLE1BQU0sSUFBSSxnQkFBZ0IsQ0FDeEIseUNBQXlDLEVBQ3pDO2dCQUNFLE9BQU8sRUFBRSxzQ0FBc0M7Z0JBQy9DLFVBQVUsRUFBRSxvREFBb0Q7YUFDakUsRUFDRCxLQUFjLENBQ2YsQ0FBQztTQUNIO1FBRUQsTUFBTSw4QkFBOEIsR0FBRyxJQUFJLE1BQU0sQ0FDL0MsS0FBSyxFQUNMLGdDQUFnQyxFQUNoQztZQUNFLFVBQVUsRUFBRSxJQUFJO1lBQ2hCLGlCQUFpQixFQUFFLElBQUk7WUFDdkIsYUFBYSxFQUFFLGFBQWEsQ0FBQyxPQUFPO1NBQ3JDLENBQ0YsQ0FBQztRQUNGLElBQUksZ0JBQWdCLENBQUMsS0FBSyxFQUFFLDBDQUEwQyxFQUFFO1lBQ3RFLG9FQUFvRTtZQUNwRSxXQUFXLEVBQUUsSUFBSTtZQUNqQixpQkFBaUIsRUFBRSw4QkFBOEI7WUFDakQsT0FBTyxFQUFFO2dCQUNQLE1BQU0sQ0FBQyxJQUFJLENBQUMsMkJBQTJCLEVBQUUsd0JBQXdCLENBQUM7YUFDbkU7U0FDRixDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUUxRDs7O1dBR0c7UUFDSCxJQUFJLG1CQUFtQixFQUFFO1lBQ3ZCLE9BQU8sQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksdUNBQXVDLEVBQUUsQ0FBQyxDQUFDO1NBQzNFO1FBRUQsMkJBQTJCLENBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1FBRW5FLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxJQUFJLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQztRQUVoRSxNQUFNLDBCQUEwQixHQUFHO1lBQ2pDLENBQUMsR0FBRyxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksbUJBQW1CLENBQUMsRUFDNUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLGNBQWM7WUFDaEUsQ0FBQyxHQUFHLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSx5Q0FBeUMsQ0FBQyxFQUNsRSw4QkFBOEIsQ0FBQyxVQUFVO1lBQzNDLENBQUMsR0FBRyxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksaUNBQWlDLENBQUMsRUFDMUQsMkJBQTJCO1lBQzdCLENBQUMsMkJBQTJCLENBQUMsRUFBRSxHQUFHLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFO1NBQzNELENBQUM7UUFFRixNQUFNLCtCQUErQixHQUNuQyxHQUFHLElBQUksQ0FBQyxJQUFJLG1CQUFtQjtZQUMvQixHQUFHLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxtQkFBbUI7WUFDMUMsQ0FBQyxDQUFDO2dCQUNFLGNBQWM7Z0JBQ2QsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLG1CQUFtQixDQUFDLEVBQy9CLFVBQVUsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxjQUFjO2FBQ2pFO1lBQ0gsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUVULE1BQU0scUJBQXFCLEdBQ3pCLDhCQUE4QixDQUFDLDZCQUE2QixDQUFDO1lBQzNELEdBQUcsMEJBQTBCO1lBQzdCLEdBQUcsK0JBQStCO1NBQ25DLENBQUMsQ0FBQztRQUVMLE1BQU0sZUFBZSxHQUFHLElBQUksc0JBQXNCLENBQ2hELFVBQVUsQ0FBQyxTQUFTLENBQUMsVUFBVSxFQUMvQixHQUFHLDhCQUE4QixDQUFDLFNBQVMsSUFBSSwyQkFBMkIsRUFBRSxDQUM3RSxDQUFDO1FBRUYsMkJBQTJCLENBQUMsT0FBTyxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsRUFBRTtZQUN2RCxNQUFNLE1BQU0sR0FBRyxlQUFlLENBQUMsMkJBQTJCLENBQ3hELGdCQUFnQixDQUFDLE9BQU8sQ0FDekIsQ0FBQztZQUNGLGdCQUFnQixDQUFDLGdCQUFnQjtpQkFDOUIsV0FBVyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztpQkFDbEMseUJBQXlCLEVBQUU7aUJBQzNCLG9CQUFvQixDQUFDLE1BQU0sRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO1FBQ3pELENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQyxDQUFDO0NBQ0g7QUFFRCxNQUFNLDRDQUE0QyxHQUNoRCwyQkFBMkIsQ0FBQztBQUU5Qjs7O0dBR0c7QUFDSCxNQUFNLHVDQUF1QztJQUNwQyxLQUFLLENBQUMsS0FBaUI7UUFDNUIsSUFBSSwyQkFBMkIsQ0FBQyw4QkFBOEIsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNyRSxxREFBcUQ7WUFDckQsd0RBQXdEO1lBQ3hELEtBQUssQ0FBQyxtQkFBbUIsQ0FDdkIsNENBQTRDLEVBQzVDLElBQUksQ0FDTCxDQUFDO1NBQ0g7SUFDSCxDQUFDO0NBQ0Y7QUFFRDs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxDQUFDLEtBQWdCLEVBQWlDLEVBQUUsQ0FDNUUsSUFBSSxXQUFXLENBQUMsS0FBSyxFQUFFLElBQUksS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQge1xuICBBbXBsaWZ5RnVuY3Rpb24sXG4gIEFtcGxpZnlSZXNvdXJjZUdyb3VwTmFtZSxcbiAgQXV0aFJlc291cmNlcyxcbiAgQmFja2VuZE91dHB1dFN0b3JhZ2VTdHJhdGVneSxcbiAgQ29uc3RydWN0Q29udGFpbmVyRW50cnlHZW5lcmF0b3IsXG4gIENvbnN0cnVjdEZhY3RvcnksXG4gIENvbnN0cnVjdEZhY3RvcnlHZXRJbnN0YW5jZVByb3BzLFxuICBHZW5lcmF0ZUNvbnRhaW5lckVudHJ5UHJvcHMsXG4gIFJlZmVyZW5jZUF1dGhSZXNvdXJjZXMsXG4gIFJlc291cmNlUHJvdmlkZXIsXG59IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbHVnaW4tdHlwZXMnO1xuaW1wb3J0IHtcbiAgQW1wbGlmeURhdGEsXG4gIEFtcGxpZnlEeW5hbW9EYlRhYmxlV3JhcHBlcixcbiAgSUFtcGxpZnlEYXRhRGVmaW5pdGlvbixcbiAgVHJhbnNsYXRpb25CZWhhdmlvcixcbn0gZnJvbSAnQGF3cy1hbXBsaWZ5L2RhdGEtY29uc3RydWN0JztcbmltcG9ydCB7IEdyYXBocWxPdXRwdXQgfSBmcm9tICdAYXdzLWFtcGxpZnkvYmFja2VuZC1vdXRwdXQtc2NoZW1hcyc7XG5pbXBvcnQgeyBnZW5lcmF0ZU1vZGVsc1N5bmMgfSBmcm9tICdAYXdzLWFtcGxpZnkvZ3JhcGhxbC1nZW5lcmF0b3InO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IEFtcGxpZnlEYXRhRXJyb3IsIERhdGFQcm9wcyB9IGZyb20gJy4vdHlwZXMuanMnO1xuaW1wb3J0IHtcbiAgY29tYmluZUNES1NjaGVtYXMsXG4gIGNvbnZlcnRTY2hlbWFUb0NESyxcbiAgaXNDb21iaW5lZFNjaGVtYSxcbiAgaXNEYXRhU2NoZW1hLFxufSBmcm9tICcuL2NvbnZlcnRfc2NoZW1hLmpzJztcbmltcG9ydCB7IGNvbnZlcnRGdW5jdGlvbk5hbWVNYXBUb0NESyB9IGZyb20gJy4vY29udmVydF9mdW5jdGlvbnMuanMnO1xuaW1wb3J0IHtcbiAgUHJvdmlkZWRBdXRoQ29uZmlnLFxuICBidWlsZENvbnN0cnVjdEZhY3RvcnlQcm92aWRlZEF1dGhDb25maWcsXG4gIGNvbnZlcnRBdXRob3JpemF0aW9uTW9kZXNUb0NESyxcbiAgaXNVc2luZ0RlZmF1bHRBcGlLZXlBdXRoLFxufSBmcm9tICcuL2NvbnZlcnRfYXV0aG9yaXphdGlvbl9tb2Rlcy5qcyc7XG5pbXBvcnQgeyB2YWxpZGF0ZUF1dGhvcml6YXRpb25Nb2RlcyB9IGZyb20gJy4vdmFsaWRhdGVfYXV0aG9yaXphdGlvbl9tb2Rlcy5qcyc7XG5pbXBvcnQge1xuICBBbXBsaWZ5RXJyb3IsXG4gIEFtcGxpZnlVc2VyRXJyb3IsXG4gIENES0NvbnRleHRLZXksXG4gIFRhZ05hbWUsXG59IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbGF0Zm9ybS1jb3JlJztcbmltcG9ydCB7IEFzcGVjdHMsIElBc3BlY3QsIFJlbW92YWxQb2xpY3ksIFRhZ3MgfSBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgeyBjb252ZXJ0SnNSZXNvbHZlckRlZmluaXRpb24gfSBmcm9tICcuL2NvbnZlcnRfanNfcmVzb2x2ZXJzLmpzJztcbmltcG9ydCB7IEFwcFN5bmNQb2xpY3lHZW5lcmF0b3IgfSBmcm9tICcuL2FwcF9zeW5jX3BvbGljeV9nZW5lcmF0b3IuanMnO1xuaW1wb3J0IHtcbiAgRnVuY3Rpb25TY2hlbWFBY2Nlc3MsXG4gIEpzUmVzb2x2ZXIsXG59IGZyb20gJ0Bhd3MtYW1wbGlmeS9kYXRhLXNjaGVtYS10eXBlcyc7XG5pbXBvcnQgeyBCdWNrZXQgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtczMnO1xuaW1wb3J0IHsgQnVja2V0RGVwbG95bWVudCwgU291cmNlIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLXMzLWRlcGxveW1lbnQnO1xuaW1wb3J0IHsgY29udmVydExvZ2dpbmdPcHRpb25zVG9DREsgfSBmcm9tICcuL2xvZ2dpbmdfb3B0aW9uc19wYXJzZXIuanMnO1xuY29uc3QgbW9kZWxJbnRyb3NwZWN0aW9uU2NoZW1hS2V5ID0gJ21vZGVsSW50cm9zcGVjdGlvblNjaGVtYS5qc29uJztcbmNvbnN0IGRlZmF1bHROYW1lID0gJ2FtcGxpZnlEYXRhJztcblxuLyoqXG4gKiBTaW5nbGV0b24gZmFjdG9yeSBmb3IgQW1wbGlmeUdyYXBocWxBcGkgY29uc3RydWN0cyB0aGF0IGNhbiBiZSB1c2VkIGluIEFtcGxpZnkgcHJvamVjdCBmaWxlcy5cbiAqXG4gKiBFeHBvcnRlZCBmb3IgdGVzdGluZyBwdXJwb3NlIG9ubHkgJiBzaG91bGQgTk9UIGJlIGV4cG9ydGVkIG91dCBvZiB0aGUgcGFja2FnZS5cbiAqL1xuZXhwb3J0IGNsYXNzIERhdGFGYWN0b3J5IGltcGxlbWVudHMgQ29uc3RydWN0RmFjdG9yeTxBbXBsaWZ5RGF0YT4ge1xuICAvLyBwdWJsaWNseSBhY2Nlc3NpYmxlIGZvciB0ZXN0aW5nIHB1cnBvc2Ugb25seS5cbiAgc3RhdGljIGZhY3RvcnlDb3VudCA9IDA7XG5cbiAgcHJpdmF0ZSBnZW5lcmF0b3I6IENvbnN0cnVjdENvbnRhaW5lckVudHJ5R2VuZXJhdG9yO1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgQW1wbGlmeUNvbnN0cnVjdFxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBwcm9wczogRGF0YVByb3BzLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgaW1wb3J0U3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFja1xuICApIHtcbiAgICBpZiAoRGF0YUZhY3RvcnkuZmFjdG9yeUNvdW50ID4gMCkge1xuICAgICAgdGhyb3cgbmV3IEFtcGxpZnlVc2VyRXJyb3IoJ011bHRpcGxlU2luZ2xldG9uUmVzb3VyY2VzRXJyb3InLCB7XG4gICAgICAgIG1lc3NhZ2U6XG4gICAgICAgICAgJ011bHRpcGxlIGBkZWZpbmVEYXRhYCBjYWxscyBhcmUgbm90IGFsbG93ZWQgd2l0aGluIGFuIEFtcGxpZnkgYmFja2VuZCcsXG4gICAgICAgIHJlc29sdXRpb246ICdSZW1vdmUgYWxsIGJ1dCBvbmUgYGRlZmluZURhdGFgIGNhbGwnLFxuICAgICAgfSk7XG4gICAgfVxuICAgIERhdGFGYWN0b3J5LmZhY3RvcnlDb3VudCsrO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgYW4gaW5zdGFuY2Ugb2YgdGhlIERhdGEgY29uc3RydWN0XG4gICAqL1xuICBnZXRJbnN0YW5jZSA9IChwcm9wczogQ29uc3RydWN0RmFjdG9yeUdldEluc3RhbmNlUHJvcHMpOiBBbXBsaWZ5RGF0YSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgY29uc3RydWN0Q29udGFpbmVyLFxuICAgICAgb3V0cHV0U3RvcmFnZVN0cmF0ZWd5LFxuICAgICAgaW1wb3J0UGF0aFZlcmlmaWVyLFxuICAgICAgcmVzb3VyY2VOYW1lVmFsaWRhdG9yLFxuICAgIH0gPSBwcm9wcztcbiAgICBpbXBvcnRQYXRoVmVyaWZpZXI/LnZlcmlmeShcbiAgICAgIHRoaXMuaW1wb3J0U3RhY2ssXG4gICAgICBwYXRoLmpvaW4oJ2FtcGxpZnknLCAnZGF0YScsICdyZXNvdXJjZScpLFxuICAgICAgJ0FtcGxpZnkgRGF0YSBtdXN0IGJlIGRlZmluZWQgaW4gYW1wbGlmeS9kYXRhL3Jlc291cmNlLnRzJ1xuICAgICk7XG4gICAgaWYgKHRoaXMucHJvcHMubmFtZSkge1xuICAgICAgcmVzb3VyY2VOYW1lVmFsaWRhdG9yPy52YWxpZGF0ZSh0aGlzLnByb3BzLm5hbWUpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuZ2VuZXJhdG9yKSB7XG4gICAgICB0aGlzLmdlbmVyYXRvciA9IG5ldyBEYXRhR2VuZXJhdG9yKFxuICAgICAgICB0aGlzLnByb3BzLFxuICAgICAgICBidWlsZENvbnN0cnVjdEZhY3RvcnlQcm92aWRlZEF1dGhDb25maWcoXG4gICAgICAgICAgcHJvcHMuY29uc3RydWN0Q29udGFpbmVyXG4gICAgICAgICAgICAuZ2V0Q29uc3RydWN0RmFjdG9yeTxcbiAgICAgICAgICAgICAgUmVzb3VyY2VQcm92aWRlcjxBdXRoUmVzb3VyY2VzIHwgUmVmZXJlbmNlQXV0aFJlc291cmNlcz5cbiAgICAgICAgICAgID4oJ0F1dGhSZXNvdXJjZXMnKVxuICAgICAgICAgICAgPy5nZXRJbnN0YW5jZShwcm9wcylcbiAgICAgICAgKSxcbiAgICAgICAgcHJvcHMsXG4gICAgICAgIG91dHB1dFN0b3JhZ2VTdHJhdGVneVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnN0cnVjdENvbnRhaW5lci5nZXRPckNvbXB1dGUodGhpcy5nZW5lcmF0b3IpIGFzIEFtcGxpZnlEYXRhO1xuICB9O1xufVxuXG5jbGFzcyBEYXRhR2VuZXJhdG9yIGltcGxlbWVudHMgQ29uc3RydWN0Q29udGFpbmVyRW50cnlHZW5lcmF0b3Ige1xuICByZWFkb25seSByZXNvdXJjZUdyb3VwTmFtZTogQW1wbGlmeVJlc291cmNlR3JvdXBOYW1lID0gJ2RhdGEnO1xuICBwcml2YXRlIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IHByb3BzOiBEYXRhUHJvcHMsXG4gICAgcHJpdmF0ZSByZWFkb25seSBwcm92aWRlZEF1dGhDb25maWc6IFByb3ZpZGVkQXV0aENvbmZpZyB8IHVuZGVmaW5lZCxcbiAgICBwcml2YXRlIHJlYWRvbmx5IGdldEluc3RhbmNlUHJvcHM6IENvbnN0cnVjdEZhY3RvcnlHZXRJbnN0YW5jZVByb3BzLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgb3V0cHV0U3RvcmFnZVN0cmF0ZWd5OiBCYWNrZW5kT3V0cHV0U3RvcmFnZVN0cmF0ZWd5PEdyYXBocWxPdXRwdXQ+XG4gICkge1xuICAgIHRoaXMubmFtZSA9IHByb3BzLm5hbWUgPz8gZGVmYXVsdE5hbWU7XG4gIH1cblxuICBnZW5lcmF0ZUNvbnRhaW5lckVudHJ5ID0gKHtcbiAgICBzY29wZSxcbiAgICBzc21FbnZpcm9ubWVudEVudHJpZXNHZW5lcmF0b3IsXG4gICAgYmFja2VuZFNlY3JldFJlc29sdmVyLFxuICAgIHN0YWJsZUJhY2tlbmRJZGVudGlmaWVycyxcbiAgfTogR2VuZXJhdGVDb250YWluZXJFbnRyeVByb3BzKSA9PiB7XG4gICAgY29uc3QgYW1wbGlmeUdyYXBocWxEZWZpbml0aW9uczogSUFtcGxpZnlEYXRhRGVmaW5pdGlvbltdID0gW107XG4gICAgY29uc3Qgc2NoZW1hc0pzRnVuY3Rpb25zOiBKc1Jlc29sdmVyW10gPSBbXTtcbiAgICBjb25zdCBzY2hlbWFzRnVuY3Rpb25TY2hlbWFBY2Nlc3M6IEZ1bmN0aW9uU2NoZW1hQWNjZXNzW10gPSBbXTtcbiAgICBsZXQgc2NoZW1hc0xhbWJkYUZ1bmN0aW9uczogUmVjb3JkPFxuICAgICAgc3RyaW5nLFxuICAgICAgQ29uc3RydWN0RmFjdG9yeTxBbXBsaWZ5RnVuY3Rpb24+XG4gICAgPiA9IHt9O1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBzY2hlbWFzID0gaXNDb21iaW5lZFNjaGVtYSh0aGlzLnByb3BzLnNjaGVtYSlcbiAgICAgICAgPyB0aGlzLnByb3BzLnNjaGVtYS5zY2hlbWFzXG4gICAgICAgIDogW3RoaXMucHJvcHMuc2NoZW1hXTtcblxuICAgICAgc2NoZW1hcy5mb3JFYWNoKChzY2hlbWEpID0+IHtcbiAgICAgICAgaWYgKGlzRGF0YVNjaGVtYShzY2hlbWEpKSB7XG4gICAgICAgICAgY29uc3QgeyBqc0Z1bmN0aW9ucywgZnVuY3Rpb25TY2hlbWFBY2Nlc3MsIGxhbWJkYUZ1bmN0aW9ucyB9ID1cbiAgICAgICAgICAgIHNjaGVtYS50cmFuc2Zvcm0oKTtcbiAgICAgICAgICBzY2hlbWFzSnNGdW5jdGlvbnMucHVzaCguLi5qc0Z1bmN0aW9ucyk7XG4gICAgICAgICAgc2NoZW1hc0Z1bmN0aW9uU2NoZW1hQWNjZXNzLnB1c2goLi4uZnVuY3Rpb25TY2hlbWFBY2Nlc3MpO1xuICAgICAgICAgIHNjaGVtYXNMYW1iZGFGdW5jdGlvbnMgPSB7XG4gICAgICAgICAgICAuLi5zY2hlbWFzTGFtYmRhRnVuY3Rpb25zLFxuICAgICAgICAgICAgLi4ubGFtYmRhRnVuY3Rpb25zLFxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBhbXBsaWZ5R3JhcGhxbERlZmluaXRpb25zLnB1c2goXG4gICAgICAgICAgY29udmVydFNjaGVtYVRvQ0RLKFxuICAgICAgICAgICAgc2NoZW1hLFxuICAgICAgICAgICAgYmFja2VuZFNlY3JldFJlc29sdmVyLFxuICAgICAgICAgICAgc3RhYmxlQmFja2VuZElkZW50aWZpZXJzXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBBbXBsaWZ5VXNlckVycm9yPEFtcGxpZnlEYXRhRXJyb3I+KFxuICAgICAgICAnSW52YWxpZFNjaGVtYUVycm9yJyxcbiAgICAgICAge1xuICAgICAgICAgIG1lc3NhZ2U6XG4gICAgICAgICAgICBlcnJvciBpbnN0YW5jZW9mIEVycm9yXG4gICAgICAgICAgICAgID8gZXJyb3IubWVzc2FnZVxuICAgICAgICAgICAgICA6ICdGYWlsZWQgdG8gcGFyc2Ugc2NoZW1hIGRlZmluaXRpb24uJyxcbiAgICAgICAgICByZXNvbHV0aW9uOlxuICAgICAgICAgICAgJ0NoZWNrIHlvdXIgZGF0YSBzY2hlbWEgZGVmaW5pdGlvbiBmb3Igc3ludGF4IGFuZCB0eXBlIGVycm9ycy4nLFxuICAgICAgICB9LFxuICAgICAgICBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IgOiB1bmRlZmluZWRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgbGV0IGF1dGhvcml6YXRpb25Nb2RlcztcbiAgICB0cnkge1xuICAgICAgYXV0aG9yaXphdGlvbk1vZGVzID0gY29udmVydEF1dGhvcml6YXRpb25Nb2Rlc1RvQ0RLKFxuICAgICAgICB0aGlzLmdldEluc3RhbmNlUHJvcHMsXG4gICAgICAgIHRoaXMucHJvdmlkZWRBdXRoQ29uZmlnLFxuICAgICAgICB0aGlzLnByb3BzLmF1dGhvcml6YXRpb25Nb2Rlc1xuICAgICAgKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgaWYgKEFtcGxpZnlFcnJvci5pc0FtcGxpZnlFcnJvcihlcnJvcikpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgQW1wbGlmeVVzZXJFcnJvcjxBbXBsaWZ5RGF0YUVycm9yPihcbiAgICAgICAgJ0ludmFsaWRTY2hlbWFBdXRoRXJyb3InLFxuICAgICAgICB7XG4gICAgICAgICAgbWVzc2FnZTpcbiAgICAgICAgICAgIGVycm9yIGluc3RhbmNlb2YgRXJyb3JcbiAgICAgICAgICAgICAgPyBlcnJvci5tZXNzYWdlXG4gICAgICAgICAgICAgIDogJ0ZhaWxlZCB0byBwYXJzZSBhdXRob3JpemF0aW9uIG1vZGVzLicsXG4gICAgICAgICAgcmVzb2x1dGlvbjogJ0Vuc3VyZSB0aGUgYXV0aCBydWxlcyBvbiB5b3VyIHNjaGVtYSBhcmUgdmFsaWQuJyxcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yIDogdW5kZWZpbmVkXG4gICAgICApO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICB2YWxpZGF0ZUF1dGhvcml6YXRpb25Nb2RlcyhcbiAgICAgICAgdGhpcy5wcm9wcy5hdXRob3JpemF0aW9uTW9kZXMsXG4gICAgICAgIGF1dGhvcml6YXRpb25Nb2Rlc1xuICAgICAgKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgbmV3IEFtcGxpZnlVc2VyRXJyb3I8QW1wbGlmeURhdGFFcnJvcj4oXG4gICAgICAgICdJbnZhbGlkU2NoZW1hQXV0aEVycm9yJyxcbiAgICAgICAge1xuICAgICAgICAgIG1lc3NhZ2U6XG4gICAgICAgICAgICBlcnJvciBpbnN0YW5jZW9mIEVycm9yXG4gICAgICAgICAgICAgID8gZXJyb3IubWVzc2FnZVxuICAgICAgICAgICAgICA6ICdGYWlsZWQgdG8gdmFsaWRhdGUgYXV0aG9yaXphdGlvbiBtb2RlcycsXG4gICAgICAgICAgcmVzb2x1dGlvbjogJ0Vuc3VyZSB0aGUgYXV0aCBydWxlcyBvbiB5b3VyIHNjaGVtYSBhcmUgdmFsaWQuJyxcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yIDogdW5kZWZpbmVkXG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IHNhbmRib3hNb2RlRW5hYmxlZCA9IGlzVXNpbmdEZWZhdWx0QXBpS2V5QXV0aChcbiAgICAgIHRoaXMucHJvdmlkZWRBdXRoQ29uZmlnLFxuICAgICAgdGhpcy5wcm9wcy5hdXRob3JpemF0aW9uTW9kZXNcbiAgICApO1xuXG4gICAgY29uc3QgcHJvcHNGdW5jdGlvbnMgPSB0aGlzLnByb3BzLmZ1bmN0aW9ucyA/PyB7fTtcblxuICAgIGNvbnN0IGZ1bmN0aW9uTmFtZU1hcCA9IGNvbnZlcnRGdW5jdGlvbk5hbWVNYXBUb0NESyh0aGlzLmdldEluc3RhbmNlUHJvcHMsIHtcbiAgICAgIC4uLnByb3BzRnVuY3Rpb25zLFxuICAgICAgLi4uc2NoZW1hc0xhbWJkYUZ1bmN0aW9ucyxcbiAgICB9KTtcbiAgICBsZXQgYW1wbGlmeUFwaSA9IHVuZGVmaW5lZDtcbiAgICBsZXQgbW9kZWxJbnRyb3NwZWN0aW9uU2NoZW1hOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG5cbiAgICBjb25zdCBpc1NhbmRib3hEZXBsb3ltZW50ID1cbiAgICAgIHNjb3BlLm5vZGUudHJ5R2V0Q29udGV4dChDREtDb250ZXh0S2V5LkRFUExPWU1FTlRfVFlQRSkgPT09ICdzYW5kYm94JztcblxuICAgIGNvbnN0IGNka0xvZ2dpbmdPcHRpb25zID0gY29udmVydExvZ2dpbmdPcHRpb25zVG9DREsoXG4gICAgICB0aGlzLnByb3BzLmxvZ2dpbmcgPz8gdW5kZWZpbmVkXG4gICAgKTtcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCBjb21iaW5lZFNjaGVtYSA9IGNvbWJpbmVDREtTY2hlbWFzKGFtcGxpZnlHcmFwaHFsRGVmaW5pdGlvbnMpO1xuICAgICAgbW9kZWxJbnRyb3NwZWN0aW9uU2NoZW1hID0gZ2VuZXJhdGVNb2RlbHNTeW5jKHtcbiAgICAgICAgc2NoZW1hOiBjb21iaW5lZFNjaGVtYS5zY2hlbWEsXG4gICAgICAgIHRhcmdldDogJ2ludHJvc3BlY3Rpb24nLFxuICAgICAgfSlbJ21vZGVsLWludHJvc3BlY3Rpb24uanNvbiddO1xuXG4gICAgICBhbXBsaWZ5QXBpID0gbmV3IEFtcGxpZnlEYXRhKHNjb3BlLCB0aGlzLm5hbWUsIHtcbiAgICAgICAgYXBpTmFtZTogdGhpcy5uYW1lLFxuICAgICAgICBkZWZpbml0aW9uOiBjb21iaW5lZFNjaGVtYSxcbiAgICAgICAgYXV0aG9yaXphdGlvbk1vZGVzLFxuICAgICAgICBvdXRwdXRTdG9yYWdlU3RyYXRlZ3k6IHRoaXMub3V0cHV0U3RvcmFnZVN0cmF0ZWd5LFxuICAgICAgICBmdW5jdGlvbk5hbWVNYXAsXG4gICAgICAgIHRyYW5zbGF0aW9uQmVoYXZpb3I6IHtcbiAgICAgICAgICBzYW5kYm94TW9kZUVuYWJsZWQsXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogVGhlIGRlc3RydWN0aXZlIHVwZGF0ZXMgc2hvdWxkIGJlIGFsd2F5cyBhbGxvd2VkIGluIGJhY2tlbmQgZGVmaW5pdGlvbiBhbmQgbm90IHRvIGJlIGNvbnRyb2xsZWQgb24gdGhlIElhQ1xuICAgICAgICAgICAqIFRoZSBDSS9DRCBjaGVjayBzaG91bGQgdGFrZSB0aGUgcmVzcG9uc2liaWxpdHkgdG8gdmFsaWRhdGUgaWYgYW55IHRhYmxlcyBhcmUgYmVpbmcgcmVwbGFjZWQgYW5kIGRldGVybWluZSB3aGV0aGVyIHRvIGV4ZWN1dGUgdGhlIGNoYW5nZXNldFxuICAgICAgICAgICAqL1xuICAgICAgICAgIGFsbG93RGVzdHJ1Y3RpdmVHcmFwaHFsU2NoZW1hVXBkYXRlczogdHJ1ZSxcbiAgICAgICAgICBfcHJvdmlzaW9uSG90c3dhcEZyaWVuZGx5UmVzb3VyY2VzOiBpc1NhbmRib3hEZXBsb3ltZW50LFxuICAgICAgICB9LFxuICAgICAgICBsb2dnaW5nOiBjZGtMb2dnaW5nT3B0aW9ucyxcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgQW1wbGlmeVVzZXJFcnJvcihcbiAgICAgICAgJ0FtcGxpZnlEYXRhQ29uc3RydWN0SW5pdGlhbGl6YXRpb25FcnJvcicsXG4gICAgICAgIHtcbiAgICAgICAgICBtZXNzYWdlOiAnRmFpbGVkIHRvIGluc3RhbnRpYXRlIGRhdGEgY29uc3RydWN0JyxcbiAgICAgICAgICByZXNvbHV0aW9uOiAnU2VlIHRoZSB1bmRlcmx5aW5nIGVycm9yIG1lc3NhZ2UgZm9yIG1vcmUgZGV0YWlscy4nLFxuICAgICAgICB9LFxuICAgICAgICBlcnJvciBhcyBFcnJvclxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCBtb2RlbEludHJvc3BlY3Rpb25TY2hlbWFCdWNrZXQgPSBuZXcgQnVja2V0KFxuICAgICAgc2NvcGUsXG4gICAgICAnbW9kZWxJbnRyb3NwZWN0aW9uU2NoZW1hQnVja2V0JyxcbiAgICAgIHtcbiAgICAgICAgZW5mb3JjZVNTTDogdHJ1ZSxcbiAgICAgICAgYXV0b0RlbGV0ZU9iamVjdHM6IHRydWUsXG4gICAgICAgIHJlbW92YWxQb2xpY3k6IFJlbW92YWxQb2xpY3kuREVTVFJPWSxcbiAgICAgIH1cbiAgICApO1xuICAgIG5ldyBCdWNrZXREZXBsb3ltZW50KHNjb3BlLCAnbW9kZWxJbnRyb3NwZWN0aW9uU2NoZW1hQnVja2V0RGVwbG95bWVudCcsIHtcbiAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYXdzLWFtcGxpZnkvYW1wbGlmeS1jYXRlZ29yeS1hcGkvcHVsbC8xOTM5XG4gICAgICBtZW1vcnlMaW1pdDogMTUzNixcbiAgICAgIGRlc3RpbmF0aW9uQnVja2V0OiBtb2RlbEludHJvc3BlY3Rpb25TY2hlbWFCdWNrZXQsXG4gICAgICBzb3VyY2VzOiBbXG4gICAgICAgIFNvdXJjZS5kYXRhKG1vZGVsSW50cm9zcGVjdGlvblNjaGVtYUtleSwgbW9kZWxJbnRyb3NwZWN0aW9uU2NoZW1hKSxcbiAgICAgIF0sXG4gICAgfSk7XG5cbiAgICBUYWdzLm9mKGFtcGxpZnlBcGkpLmFkZChUYWdOYW1lLkZSSUVORExZX05BTUUsIHRoaXMubmFtZSk7XG5cbiAgICAvKio7XG4gICAgICogRW5hYmxlIHRoZSB0YWJsZSByZXBsYWNlbWVudCB1cG9uIEdTSSB1cGRhdGVcbiAgICAgKiBUaGlzIGlzIGFsbG93ZWQgaW4gc2FuZGJveCBtb2RlIE9OTFlcbiAgICAgKi9cbiAgICBpZiAoaXNTYW5kYm94RGVwbG95bWVudCkge1xuICAgICAgQXNwZWN0cy5vZihhbXBsaWZ5QXBpKS5hZGQobmV3IFJlcGxhY2VUYWJsZVVwb25Hc2lVcGRhdGVPdmVycmlkZUFzcGVjdCgpKTtcbiAgICB9XG5cbiAgICBjb252ZXJ0SnNSZXNvbHZlckRlZmluaXRpb24oc2NvcGUsIGFtcGxpZnlBcGksIHNjaGVtYXNKc0Z1bmN0aW9ucyk7XG5cbiAgICBjb25zdCBuYW1lUHJlZml4ID0gdGhpcy5uYW1lID09PSBkZWZhdWx0TmFtZSA/ICcnIDogZGVmYXVsdE5hbWU7XG5cbiAgICBjb25zdCBzc21FbnZpcm9ubWVudFNjb3BlQ29udGV4dCA9IHtcbiAgICAgIFtgJHtuYW1lUHJlZml4fSR7dGhpcy5uYW1lfV9HUkFQSFFMX0VORFBPSU5UYF06XG4gICAgICAgIGFtcGxpZnlBcGkucmVzb3VyY2VzLmNmblJlc291cmNlcy5jZm5HcmFwaHFsQXBpLmF0dHJHcmFwaFFsVXJsLFxuICAgICAgW2Ake25hbWVQcmVmaXh9JHt0aGlzLm5hbWV9X01PREVMX0lOVFJPU1BFQ1RJT05fU0NIRU1BX0JVQ0tFVF9OQU1FYF06XG4gICAgICAgIG1vZGVsSW50cm9zcGVjdGlvblNjaGVtYUJ1Y2tldC5idWNrZXROYW1lLFxuICAgICAgW2Ake25hbWVQcmVmaXh9JHt0aGlzLm5hbWV9X01PREVMX0lOVFJPU1BFQ1RJT05fU0NIRU1BX0tFWWBdOlxuICAgICAgICBtb2RlbEludHJvc3BlY3Rpb25TY2hlbWFLZXksXG4gICAgICBbJ0FNUExJRllfREFUQV9ERUZBVUxUX05BTUUnXTogYCR7bmFtZVByZWZpeH0ke3RoaXMubmFtZX1gLFxuICAgIH07XG5cbiAgICBjb25zdCBiYWNrd2FyZHNDb21wYXRpYmxlU2NvcGVDb250ZXh0ID1cbiAgICAgIGAke3RoaXMubmFtZX1fR1JBUEhRTF9FTkRQT0lOVGAgIT09XG4gICAgICBgJHtuYW1lUHJlZml4fSR7dGhpcy5uYW1lfV9HUkFQSFFMX0VORFBPSU5UYFxuICAgICAgICA/IHtcbiAgICAgICAgICAgIC8vIEBkZXByZWNhdGVkXG4gICAgICAgICAgICBbYCR7dGhpcy5uYW1lfV9HUkFQSFFMX0VORFBPSU5UYF06XG4gICAgICAgICAgICAgIGFtcGxpZnlBcGkucmVzb3VyY2VzLmNmblJlc291cmNlcy5jZm5HcmFwaHFsQXBpLmF0dHJHcmFwaFFsVXJsLFxuICAgICAgICAgIH1cbiAgICAgICAgOiB7fTtcblxuICAgIGNvbnN0IHNzbUVudmlyb25tZW50RW50cmllcyA9XG4gICAgICBzc21FbnZpcm9ubWVudEVudHJpZXNHZW5lcmF0b3IuZ2VuZXJhdGVTc21FbnZpcm9ubWVudEVudHJpZXMoe1xuICAgICAgICAuLi5zc21FbnZpcm9ubWVudFNjb3BlQ29udGV4dCxcbiAgICAgICAgLi4uYmFja3dhcmRzQ29tcGF0aWJsZVNjb3BlQ29udGV4dCxcbiAgICAgIH0pO1xuXG4gICAgY29uc3QgcG9saWN5R2VuZXJhdG9yID0gbmV3IEFwcFN5bmNQb2xpY3lHZW5lcmF0b3IoXG4gICAgICBhbXBsaWZ5QXBpLnJlc291cmNlcy5ncmFwaHFsQXBpLFxuICAgICAgYCR7bW9kZWxJbnRyb3NwZWN0aW9uU2NoZW1hQnVja2V0LmJ1Y2tldEFybn0vJHttb2RlbEludHJvc3BlY3Rpb25TY2hlbWFLZXl9YFxuICAgICk7XG5cbiAgICBzY2hlbWFzRnVuY3Rpb25TY2hlbWFBY2Nlc3MuZm9yRWFjaCgoYWNjZXNzRGVmaW5pdGlvbikgPT4ge1xuICAgICAgY29uc3QgcG9saWN5ID0gcG9saWN5R2VuZXJhdG9yLmdlbmVyYXRlR3JhcGhxbEFjY2Vzc1BvbGljeShcbiAgICAgICAgYWNjZXNzRGVmaW5pdGlvbi5hY3Rpb25zXG4gICAgICApO1xuICAgICAgYWNjZXNzRGVmaW5pdGlvbi5yZXNvdXJjZVByb3ZpZGVyXG4gICAgICAgIC5nZXRJbnN0YW5jZSh0aGlzLmdldEluc3RhbmNlUHJvcHMpXG4gICAgICAgIC5nZXRSZXNvdXJjZUFjY2Vzc0FjY2VwdG9yKClcbiAgICAgICAgLmFjY2VwdFJlc291cmNlQWNjZXNzKHBvbGljeSwgc3NtRW52aXJvbm1lbnRFbnRyaWVzKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBhbXBsaWZ5QXBpO1xuICB9O1xufVxuXG5jb25zdCBSRVBMQUNFX1RBQkxFX1VQT05fR1NJX1VQREFURV9BVFRSSUJVVEVfTkFNRToga2V5b2YgVHJhbnNsYXRpb25CZWhhdmlvciA9XG4gICdyZXBsYWNlVGFibGVVcG9uR3NpVXBkYXRlJztcblxuLyoqXG4gKiBBc3BlY3QgY2xhc3MgdG8gbW9kaWZ5IHRoZSBhbXBsaWZ5IG1hbmFnZWQgRHluYW1vREIgdGFibGVcbiAqIHRvIGFsbG93IHRhYmxlIHJlcGxhY2VtZW50IHVwb24gR1NJIHVwZGF0ZVxuICovXG5jbGFzcyBSZXBsYWNlVGFibGVVcG9uR3NpVXBkYXRlT3ZlcnJpZGVBc3BlY3QgaW1wbGVtZW50cyBJQXNwZWN0IHtcbiAgcHVibGljIHZpc2l0KHNjb3BlOiBJQ29uc3RydWN0KTogdm9pZCB7XG4gICAgaWYgKEFtcGxpZnlEeW5hbW9EYlRhYmxlV3JhcHBlci5pc0FtcGxpZnlEeW5hbW9EYlRhYmxlUmVzb3VyY2Uoc2NvcGUpKSB7XG4gICAgICAvLyBUaGVzZSB2YWx1ZSBzZXR0ZXJzIGFyZSBub3QgZXhwb3NlZCBpbiB0aGUgd3JhcHBlclxuICAgICAgLy8gTmVlZCB0byB1c2UgdGhlIHByb3BlcnR5IG92ZXJyaWRlIHRvIGVzY2FwZSB0aGUgaGF0Y2hcbiAgICAgIHNjb3BlLmFkZFByb3BlcnR5T3ZlcnJpZGUoXG4gICAgICAgIFJFUExBQ0VfVEFCTEVfVVBPTl9HU0lfVVBEQVRFX0FUVFJJQlVURV9OQU1FLFxuICAgICAgICB0cnVlXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBmYWN0b3J5IHRoYXQgaW1wbGVtZW50cyBDb25zdHJ1Y3RGYWN0b3J5PEFtcGxpZnlHcmFwaHFsQXBpPlxuICovXG5leHBvcnQgY29uc3QgZGVmaW5lRGF0YSA9IChwcm9wczogRGF0YVByb3BzKTogQ29uc3RydWN0RmFjdG9yeTxBbXBsaWZ5RGF0YT4gPT5cbiAgbmV3IERhdGFGYWN0b3J5KHByb3BzLCBuZXcgRXJyb3IoKS5zdGFjayk7XG4iXX0=