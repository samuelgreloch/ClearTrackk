import { existsSync as _existsSync } from 'fs';
import _fsp from 'fs/promises';
import { execa as _execa } from 'execa';
import * as _path from 'path';
import { LogLevel } from '../printer/printer.js';
import { format } from '../format/format.js';
import { executeWithDebugLogger as _executeWithDebugLogger } from './execute_with_debugger_logger.js';
import { PackageManagerControllerBase } from './package_manager_controller_base.js';
import { YarnModernLockFileReader } from './lock-file-reader/yarn_modern_lock_file_reader.js';
/**
 * YarnModernPackageManagerController is an abstraction around yarn modern (yarn v2+) commands that are needed to initialize a project and install dependencies
 */
export class YarnModernPackageManagerController extends PackageManagerControllerBase {
    cwd;
    printer;
    fsp;
    path;
    execa;
    executeWithDebugLogger;
    existsSync;
    lockFileReader;
    /**
     * constructor
     */
    constructor(cwd, printer, fsp = _fsp, path = _path, execa = _execa, executeWithDebugLogger = _executeWithDebugLogger, existsSync = _existsSync, lockFileReader = new YarnModernLockFileReader()) {
        super(cwd, 'yarn', ['init', '--yes'], 'add', lockFileReader, fsp, path, execa, executeWithDebugLogger, existsSync);
        this.cwd = cwd;
        this.printer = printer;
        this.fsp = fsp;
        this.path = path;
        this.execa = execa;
        this.executeWithDebugLogger = executeWithDebugLogger;
        this.existsSync = existsSync;
        this.lockFileReader = lockFileReader;
    }
    initializeTsConfig = async (targetDir) => {
        await this.addLockFile(targetDir);
        await this.addTypescript(targetDir);
        await super.initializeTsConfig(targetDir);
    };
    /**
     * addLockFile - adds a yarn.lock file to the project root for yarn v2+
     */
    addLockFile = async (targetDir) => {
        try {
            await this.fsp.writeFile(this.path.resolve(targetDir, 'yarn.lock'), '');
        }
        catch (error) {
            if (typeof error === 'string') {
                this.printer.log(format.error(`Error creating ${targetDir}/yarn.lock ${error}}`), LogLevel.ERROR);
            }
            else if (error instanceof Error) {
                this.printer.log(format.error(`Error creating ${targetDir}/yarn.lock ${error.message}}`), LogLevel.ERROR);
            }
        }
    };
    addTypescript = async (targetDir) => {
        await this.executeWithDebugLogger(targetDir, 'yarn', ['add', 'typescript@^5'], this.execa);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieWFybl9tb2Rlcm5fcGFja2FnZV9tYW5hZ2VyX2NvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcGFja2FnZS1tYW5hZ2VyLWNvbnRyb2xsZXIveWFybl9tb2Rlcm5fcGFja2FnZV9tYW5hZ2VyX2NvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsSUFBSSxXQUFXLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFDL0MsT0FBTyxJQUFJLE1BQU0sYUFBYSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxLQUFLLElBQUksTUFBTSxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBQ3hDLE9BQU8sS0FBSyxLQUFLLE1BQU0sTUFBTSxDQUFDO0FBQzlCLE9BQU8sRUFBRSxRQUFRLEVBQVcsTUFBTSx1QkFBdUIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDN0MsT0FBTyxFQUFFLHNCQUFzQixJQUFJLHVCQUF1QixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDdEcsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDcEYsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sb0RBQW9ELENBQUM7QUFFOUY7O0dBRUc7QUFDSCxNQUFNLE9BQU8sa0NBQW1DLFNBQVEsNEJBQTRCO0lBSzdEO0lBQ0Y7SUFDRTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFYckI7O09BRUc7SUFDSCxZQUNxQixHQUFXLEVBQ2IsT0FBZ0IsRUFDZCxNQUFNLElBQUksRUFDVixPQUFPLEtBQUssRUFDWixRQUFRLE1BQU0sRUFDZCx5QkFBeUIsdUJBQXVCLEVBQ2hELGFBQWEsV0FBVyxFQUN4QixpQkFBaUIsSUFBSSx3QkFBd0IsRUFBRTtRQUVsRSxLQUFLLENBQ0gsR0FBRyxFQUNILE1BQU0sRUFDTixDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsRUFDakIsS0FBSyxFQUNMLGNBQWMsRUFDZCxHQUFHLEVBQ0gsSUFBSSxFQUNKLEtBQUssRUFDTCxzQkFBc0IsRUFDdEIsVUFBVSxDQUNYLENBQUM7UUFwQmlCLFFBQUcsR0FBSCxHQUFHLENBQVE7UUFDYixZQUFPLEdBQVAsT0FBTyxDQUFTO1FBQ2QsUUFBRyxHQUFILEdBQUcsQ0FBTztRQUNWLFNBQUksR0FBSixJQUFJLENBQVE7UUFDWixVQUFLLEdBQUwsS0FBSyxDQUFTO1FBQ2QsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUEwQjtRQUNoRCxlQUFVLEdBQVYsVUFBVSxDQUFjO1FBQ3hCLG1CQUFjLEdBQWQsY0FBYyxDQUFpQztJQWNwRSxDQUFDO0lBRUQsa0JBQWtCLEdBQUcsS0FBSyxFQUFFLFNBQWlCLEVBQUUsRUFBRTtRQUMvQyxNQUFNLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDbEMsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sS0FBSyxDQUFDLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzVDLENBQUMsQ0FBQztJQUVGOztPQUVHO0lBQ0ssV0FBVyxHQUFHLEtBQUssRUFBRSxTQUFpQixFQUFFLEVBQUU7UUFDaEQsSUFBSTtZQUNGLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQ3pFO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtnQkFDN0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQ2QsTUFBTSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsU0FBUyxjQUFjLEtBQUssR0FBRyxDQUFDLEVBQy9ELFFBQVEsQ0FBQyxLQUFLLENBQ2YsQ0FBQzthQUNIO2lCQUFNLElBQUksS0FBSyxZQUFZLEtBQUssRUFBRTtnQkFDakMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQ2QsTUFBTSxDQUFDLEtBQUssQ0FDVixrQkFBa0IsU0FBUyxjQUFjLEtBQUssQ0FBQyxPQUFPLEdBQUcsQ0FDMUQsRUFDRCxRQUFRLENBQUMsS0FBSyxDQUNmLENBQUM7YUFDSDtTQUNGO0lBQ0gsQ0FBQyxDQUFDO0lBRU0sYUFBYSxHQUFHLEtBQUssRUFBRSxTQUFpQixFQUFFLEVBQUU7UUFDbEQsTUFBTSxJQUFJLENBQUMsc0JBQXNCLENBQy9CLFNBQVMsRUFDVCxNQUFNLEVBQ04sQ0FBQyxLQUFLLEVBQUUsZUFBZSxDQUFDLEVBQ3hCLElBQUksQ0FBQyxLQUFLLENBQ1gsQ0FBQztJQUNKLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXhpc3RzU3luYyBhcyBfZXhpc3RzU3luYyB9IGZyb20gJ2ZzJztcbmltcG9ydCBfZnNwIGZyb20gJ2ZzL3Byb21pc2VzJztcbmltcG9ydCB7IGV4ZWNhIGFzIF9leGVjYSB9IGZyb20gJ2V4ZWNhJztcbmltcG9ydCAqIGFzIF9wYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgTG9nTGV2ZWwsIFByaW50ZXIgfSBmcm9tICcuLi9wcmludGVyL3ByaW50ZXIuanMnO1xuaW1wb3J0IHsgZm9ybWF0IH0gZnJvbSAnLi4vZm9ybWF0L2Zvcm1hdC5qcyc7XG5pbXBvcnQgeyBleGVjdXRlV2l0aERlYnVnTG9nZ2VyIGFzIF9leGVjdXRlV2l0aERlYnVnTG9nZ2VyIH0gZnJvbSAnLi9leGVjdXRlX3dpdGhfZGVidWdnZXJfbG9nZ2VyLmpzJztcbmltcG9ydCB7IFBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlckJhc2UgfSBmcm9tICcuL3BhY2thZ2VfbWFuYWdlcl9jb250cm9sbGVyX2Jhc2UuanMnO1xuaW1wb3J0IHsgWWFybk1vZGVybkxvY2tGaWxlUmVhZGVyIH0gZnJvbSAnLi9sb2NrLWZpbGUtcmVhZGVyL3lhcm5fbW9kZXJuX2xvY2tfZmlsZV9yZWFkZXIuanMnO1xuXG4vKipcbiAqIFlhcm5Nb2Rlcm5QYWNrYWdlTWFuYWdlckNvbnRyb2xsZXIgaXMgYW4gYWJzdHJhY3Rpb24gYXJvdW5kIHlhcm4gbW9kZXJuICh5YXJuIHYyKykgY29tbWFuZHMgdGhhdCBhcmUgbmVlZGVkIHRvIGluaXRpYWxpemUgYSBwcm9qZWN0IGFuZCBpbnN0YWxsIGRlcGVuZGVuY2llc1xuICovXG5leHBvcnQgY2xhc3MgWWFybk1vZGVyblBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlciBleHRlbmRzIFBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlckJhc2Uge1xuICAvKipcbiAgICogY29uc3RydWN0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCByZWFkb25seSBjd2Q6IHN0cmluZyxcbiAgICBwcml2YXRlIHJlYWRvbmx5IHByaW50ZXI6IFByaW50ZXIsXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGZzcCA9IF9mc3AsXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IHBhdGggPSBfcGF0aCxcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgZXhlY2EgPSBfZXhlY2EsXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGV4ZWN1dGVXaXRoRGVidWdMb2dnZXIgPSBfZXhlY3V0ZVdpdGhEZWJ1Z0xvZ2dlcixcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgZXhpc3RzU3luYyA9IF9leGlzdHNTeW5jLFxuICAgIHByb3RlY3RlZCByZWFkb25seSBsb2NrRmlsZVJlYWRlciA9IG5ldyBZYXJuTW9kZXJuTG9ja0ZpbGVSZWFkZXIoKVxuICApIHtcbiAgICBzdXBlcihcbiAgICAgIGN3ZCxcbiAgICAgICd5YXJuJyxcbiAgICAgIFsnaW5pdCcsICctLXllcyddLFxuICAgICAgJ2FkZCcsXG4gICAgICBsb2NrRmlsZVJlYWRlcixcbiAgICAgIGZzcCxcbiAgICAgIHBhdGgsXG4gICAgICBleGVjYSxcbiAgICAgIGV4ZWN1dGVXaXRoRGVidWdMb2dnZXIsXG4gICAgICBleGlzdHNTeW5jXG4gICAgKTtcbiAgfVxuXG4gIGluaXRpYWxpemVUc0NvbmZpZyA9IGFzeW5jICh0YXJnZXREaXI6IHN0cmluZykgPT4ge1xuICAgIGF3YWl0IHRoaXMuYWRkTG9ja0ZpbGUodGFyZ2V0RGlyKTtcbiAgICBhd2FpdCB0aGlzLmFkZFR5cGVzY3JpcHQodGFyZ2V0RGlyKTtcbiAgICBhd2FpdCBzdXBlci5pbml0aWFsaXplVHNDb25maWcodGFyZ2V0RGlyKTtcbiAgfTtcblxuICAvKipcbiAgICogYWRkTG9ja0ZpbGUgLSBhZGRzIGEgeWFybi5sb2NrIGZpbGUgdG8gdGhlIHByb2plY3Qgcm9vdCBmb3IgeWFybiB2MitcbiAgICovXG4gIHByaXZhdGUgYWRkTG9ja0ZpbGUgPSBhc3luYyAodGFyZ2V0RGlyOiBzdHJpbmcpID0+IHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy5mc3Aud3JpdGVGaWxlKHRoaXMucGF0aC5yZXNvbHZlKHRhcmdldERpciwgJ3lhcm4ubG9jaycpLCAnJyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGlmICh0eXBlb2YgZXJyb3IgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMucHJpbnRlci5sb2coXG4gICAgICAgICAgZm9ybWF0LmVycm9yKGBFcnJvciBjcmVhdGluZyAke3RhcmdldERpcn0veWFybi5sb2NrICR7ZXJyb3J9fWApLFxuICAgICAgICAgIExvZ0xldmVsLkVSUk9SXG4gICAgICAgICk7XG4gICAgICB9IGVsc2UgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgdGhpcy5wcmludGVyLmxvZyhcbiAgICAgICAgICBmb3JtYXQuZXJyb3IoXG4gICAgICAgICAgICBgRXJyb3IgY3JlYXRpbmcgJHt0YXJnZXREaXJ9L3lhcm4ubG9jayAke2Vycm9yLm1lc3NhZ2V9fWBcbiAgICAgICAgICApLFxuICAgICAgICAgIExvZ0xldmVsLkVSUk9SXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHByaXZhdGUgYWRkVHlwZXNjcmlwdCA9IGFzeW5jICh0YXJnZXREaXI6IHN0cmluZykgPT4ge1xuICAgIGF3YWl0IHRoaXMuZXhlY3V0ZVdpdGhEZWJ1Z0xvZ2dlcihcbiAgICAgIHRhcmdldERpcixcbiAgICAgICd5YXJuJyxcbiAgICAgIFsnYWRkJywgJ3R5cGVzY3JpcHRAXjUnXSxcbiAgICAgIHRoaXMuZXhlY2FcbiAgICApO1xuICB9O1xufVxuIl19