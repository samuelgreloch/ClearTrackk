import fsp from 'fs/promises';
import path from 'path';
import { printer } from '../../printer.js';
import { LogLevel } from '../../printer/printer.js';
/**
 * PnpmLockFileReader is an abstraction around the logic used to read and parse lock file contents
 */
export class PnpmLockFileReader {
    getLockFileContentsFromCwd = async () => {
        const eolRegex = '[\r\n]';
        const dependencies = [];
        const pnpmLockPath = path.resolve(process.cwd(), 'pnpm-lock.yaml');
        try {
            const pnpmLockContents = await fsp.readFile(pnpmLockPath, 'utf-8');
            const pnpmLockContentsArray = pnpmLockContents.split(new RegExp(`${eolRegex}${eolRegex}`));
            const startOfPackagesIndex = pnpmLockContentsArray.indexOf('packages:');
            if (startOfPackagesIndex === -1) {
                return { dependencies };
            }
            const pnpmLockPackages = pnpmLockContentsArray.slice(startOfPackagesIndex + 1);
            for (const pnpmDependencyBlock of pnpmLockPackages) {
                // Get line that contains dependency name and version and remove quotes and colon
                const pnpmDependencyLine = pnpmDependencyBlock
                    .trim()
                    .split(new RegExp(eolRegex))[0]
                    .replaceAll(/[':]/g, '');
                const dependencyName = pnpmDependencyLine.slice(0, pnpmDependencyLine.lastIndexOf('@'));
                const dependencyVersion = pnpmDependencyLine.slice(pnpmDependencyLine.lastIndexOf('@') + 1);
                dependencies.push({ name: dependencyName, version: dependencyVersion });
            }
        }
        catch (error) {
            printer.log(`Failed to get lock file contents because ${pnpmLockPath} does not exist or is not parse-able`, LogLevel.DEBUG);
            return;
        }
        return { dependencies };
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG5wbV9sb2NrX2ZpbGVfcmVhZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3BhY2thZ2UtbWFuYWdlci1jb250cm9sbGVyL2xvY2stZmlsZS1yZWFkZXIvcG5wbV9sb2NrX2ZpbGVfcmVhZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sR0FBRyxNQUFNLGFBQWEsQ0FBQztBQUM5QixPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFFeEIsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUVwRDs7R0FFRztBQUNILE1BQU0sT0FBTyxrQkFBa0I7SUFDN0IsMEJBQTBCLEdBQUcsS0FBSyxJQUVoQyxFQUFFO1FBQ0YsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQzFCLE1BQU0sWUFBWSxHQUFzQixFQUFFLENBQUM7UUFDM0MsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztRQUVuRSxJQUFJO1lBQ0YsTUFBTSxnQkFBZ0IsR0FBRyxNQUFNLEdBQUcsQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ25FLE1BQU0scUJBQXFCLEdBQUcsZ0JBQWdCLENBQUMsS0FBSyxDQUNsRCxJQUFJLE1BQU0sQ0FBQyxHQUFHLFFBQVEsR0FBRyxRQUFRLEVBQUUsQ0FBQyxDQUNyQyxDQUFDO1lBRUYsTUFBTSxvQkFBb0IsR0FBRyxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDeEUsSUFBSSxvQkFBb0IsS0FBSyxDQUFDLENBQUMsRUFBRTtnQkFDL0IsT0FBTyxFQUFFLFlBQVksRUFBRSxDQUFDO2FBQ3pCO1lBQ0QsTUFBTSxnQkFBZ0IsR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQ2xELG9CQUFvQixHQUFHLENBQUMsQ0FDekIsQ0FBQztZQUVGLEtBQUssTUFBTSxtQkFBbUIsSUFBSSxnQkFBZ0IsRUFBRTtnQkFDbEQsaUZBQWlGO2dCQUNqRixNQUFNLGtCQUFrQixHQUFHLG1CQUFtQjtxQkFDM0MsSUFBSSxFQUFFO3FCQUNOLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztxQkFDOUIsVUFBVSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFDM0IsTUFBTSxjQUFjLEdBQUcsa0JBQWtCLENBQUMsS0FBSyxDQUM3QyxDQUFDLEVBQ0Qsa0JBQWtCLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUNwQyxDQUFDO2dCQUNGLE1BQU0saUJBQWlCLEdBQUcsa0JBQWtCLENBQUMsS0FBSyxDQUNoRCxrQkFBa0IsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUN4QyxDQUFDO2dCQUVGLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxDQUFDLENBQUM7YUFDekU7U0FDRjtRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ2QsT0FBTyxDQUFDLEdBQUcsQ0FDVCw0Q0FBNEMsWUFBWSxzQ0FBc0MsRUFDOUYsUUFBUSxDQUFDLEtBQUssQ0FDZixDQUFDO1lBQ0YsT0FBTztTQUNSO1FBRUQsT0FBTyxFQUFFLFlBQVksRUFBRSxDQUFDO0lBQzFCLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGVwZW5kZW5jeSB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbHVnaW4tdHlwZXMnO1xuaW1wb3J0IGZzcCBmcm9tICdmcy9wcm9taXNlcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IExvY2tGaWxlQ29udGVudHMsIExvY2tGaWxlUmVhZGVyIH0gZnJvbSAnLi90eXBlcy5qcyc7XG5pbXBvcnQgeyBwcmludGVyIH0gZnJvbSAnLi4vLi4vcHJpbnRlci5qcyc7XG5pbXBvcnQgeyBMb2dMZXZlbCB9IGZyb20gJy4uLy4uL3ByaW50ZXIvcHJpbnRlci5qcyc7XG5cbi8qKlxuICogUG5wbUxvY2tGaWxlUmVhZGVyIGlzIGFuIGFic3RyYWN0aW9uIGFyb3VuZCB0aGUgbG9naWMgdXNlZCB0byByZWFkIGFuZCBwYXJzZSBsb2NrIGZpbGUgY29udGVudHNcbiAqL1xuZXhwb3J0IGNsYXNzIFBucG1Mb2NrRmlsZVJlYWRlciBpbXBsZW1lbnRzIExvY2tGaWxlUmVhZGVyIHtcbiAgZ2V0TG9ja0ZpbGVDb250ZW50c0Zyb21Dd2QgPSBhc3luYyAoKTogUHJvbWlzZTxcbiAgICBMb2NrRmlsZUNvbnRlbnRzIHwgdW5kZWZpbmVkXG4gID4gPT4ge1xuICAgIGNvbnN0IGVvbFJlZ2V4ID0gJ1tcXHJcXG5dJztcbiAgICBjb25zdCBkZXBlbmRlbmNpZXM6IEFycmF5PERlcGVuZGVuY3k+ID0gW107XG4gICAgY29uc3QgcG5wbUxvY2tQYXRoID0gcGF0aC5yZXNvbHZlKHByb2Nlc3MuY3dkKCksICdwbnBtLWxvY2sueWFtbCcpO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHBucG1Mb2NrQ29udGVudHMgPSBhd2FpdCBmc3AucmVhZEZpbGUocG5wbUxvY2tQYXRoLCAndXRmLTgnKTtcbiAgICAgIGNvbnN0IHBucG1Mb2NrQ29udGVudHNBcnJheSA9IHBucG1Mb2NrQ29udGVudHMuc3BsaXQoXG4gICAgICAgIG5ldyBSZWdFeHAoYCR7ZW9sUmVnZXh9JHtlb2xSZWdleH1gKVxuICAgICAgKTtcblxuICAgICAgY29uc3Qgc3RhcnRPZlBhY2thZ2VzSW5kZXggPSBwbnBtTG9ja0NvbnRlbnRzQXJyYXkuaW5kZXhPZigncGFja2FnZXM6Jyk7XG4gICAgICBpZiAoc3RhcnRPZlBhY2thZ2VzSW5kZXggPT09IC0xKSB7XG4gICAgICAgIHJldHVybiB7IGRlcGVuZGVuY2llcyB9O1xuICAgICAgfVxuICAgICAgY29uc3QgcG5wbUxvY2tQYWNrYWdlcyA9IHBucG1Mb2NrQ29udGVudHNBcnJheS5zbGljZShcbiAgICAgICAgc3RhcnRPZlBhY2thZ2VzSW5kZXggKyAxXG4gICAgICApO1xuXG4gICAgICBmb3IgKGNvbnN0IHBucG1EZXBlbmRlbmN5QmxvY2sgb2YgcG5wbUxvY2tQYWNrYWdlcykge1xuICAgICAgICAvLyBHZXQgbGluZSB0aGF0IGNvbnRhaW5zIGRlcGVuZGVuY3kgbmFtZSBhbmQgdmVyc2lvbiBhbmQgcmVtb3ZlIHF1b3RlcyBhbmQgY29sb25cbiAgICAgICAgY29uc3QgcG5wbURlcGVuZGVuY3lMaW5lID0gcG5wbURlcGVuZGVuY3lCbG9ja1xuICAgICAgICAgIC50cmltKClcbiAgICAgICAgICAuc3BsaXQobmV3IFJlZ0V4cChlb2xSZWdleCkpWzBdXG4gICAgICAgICAgLnJlcGxhY2VBbGwoL1snOl0vZywgJycpO1xuICAgICAgICBjb25zdCBkZXBlbmRlbmN5TmFtZSA9IHBucG1EZXBlbmRlbmN5TGluZS5zbGljZShcbiAgICAgICAgICAwLFxuICAgICAgICAgIHBucG1EZXBlbmRlbmN5TGluZS5sYXN0SW5kZXhPZignQCcpXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGRlcGVuZGVuY3lWZXJzaW9uID0gcG5wbURlcGVuZGVuY3lMaW5lLnNsaWNlKFxuICAgICAgICAgIHBucG1EZXBlbmRlbmN5TGluZS5sYXN0SW5kZXhPZignQCcpICsgMVxuICAgICAgICApO1xuXG4gICAgICAgIGRlcGVuZGVuY2llcy5wdXNoKHsgbmFtZTogZGVwZW5kZW5jeU5hbWUsIHZlcnNpb246IGRlcGVuZGVuY3lWZXJzaW9uIH0pO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBwcmludGVyLmxvZyhcbiAgICAgICAgYEZhaWxlZCB0byBnZXQgbG9jayBmaWxlIGNvbnRlbnRzIGJlY2F1c2UgJHtwbnBtTG9ja1BhdGh9IGRvZXMgbm90IGV4aXN0IG9yIGlzIG5vdCBwYXJzZS1hYmxlYCxcbiAgICAgICAgTG9nTGV2ZWwuREVCVUdcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgZGVwZW5kZW5jaWVzIH07XG4gIH07XG59XG4iXX0=