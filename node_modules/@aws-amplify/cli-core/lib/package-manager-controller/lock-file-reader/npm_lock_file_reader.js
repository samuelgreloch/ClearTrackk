import fsp from 'fs/promises';
import path from 'path';
import z from 'zod';
import { printer } from '../../printer.js';
import { LogLevel } from '../../printer/printer.js';
/**
 * NpmLockFileReader is an abstraction around the logic used to read and parse lock file contents
 */
export class NpmLockFileReader {
    getLockFileContentsFromCwd = async () => {
        const dependencies = [];
        const packageLockJsonPath = path.resolve(process.cwd(), 'package-lock.json');
        let packageLockJson;
        try {
            const jsonLockContents = await fsp.readFile(packageLockJsonPath, 'utf-8');
            const jsonLockParsedValue = JSON.parse(jsonLockContents);
            // This will strip fields that are not part of the package lock schema
            packageLockJson = packageLockJsonSchema.parse(jsonLockParsedValue);
        }
        catch (error) {
            printer.log(`Failed to get lock file contents because ${packageLockJsonPath} does not exist or is not parse-able`, LogLevel.DEBUG);
            return;
        }
        for (const key in packageLockJson.packages) {
            if (key === '') {
                // Skip root project in packages
                continue;
            }
            const dependencyVersion = packageLockJson.packages[key].version;
            // Version may not exist if package is a symbolic link
            if (dependencyVersion) {
                // Remove "node_modules/" prefix
                const dependencyName = key.replace(/^node_modules\//, '');
                dependencies.push({
                    name: dependencyName,
                    version: dependencyVersion,
                });
            }
        }
        return { dependencies };
    };
}
const packageLockJsonSchema = z.object({
    packages: z
        .record(z.string(), z.object({
        version: z.string().optional(),
    }))
        .optional(),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnBtX2xvY2tfZmlsZV9yZWFkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcGFja2FnZS1tYW5hZ2VyLWNvbnRyb2xsZXIvbG9jay1maWxlLXJlYWRlci9ucG1fbG9ja19maWxlX3JlYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEdBQUcsTUFBTSxhQUFhLENBQUM7QUFDOUIsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBQ3hCLE9BQU8sQ0FBQyxNQUFNLEtBQUssQ0FBQztBQUVwQixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDM0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRXBEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGlCQUFpQjtJQUM1QiwwQkFBMEIsR0FBRyxLQUFLLElBRWhDLEVBQUU7UUFDRixNQUFNLFlBQVksR0FBc0IsRUFBRSxDQUFDO1FBQzNDLE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FDdEMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUNiLG1CQUFtQixDQUNwQixDQUFDO1FBQ0YsSUFBSSxlQUFlLENBQUM7UUFDcEIsSUFBSTtZQUNGLE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxHQUFHLENBQUMsUUFBUSxDQUFDLG1CQUFtQixFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQzFFLE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQ3pELHNFQUFzRTtZQUN0RSxlQUFlLEdBQUcscUJBQXFCLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUM7U0FDcEU7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLE9BQU8sQ0FBQyxHQUFHLENBQ1QsNENBQTRDLG1CQUFtQixzQ0FBc0MsRUFDckcsUUFBUSxDQUFDLEtBQUssQ0FDZixDQUFDO1lBQ0YsT0FBTztTQUNSO1FBRUQsS0FBSyxNQUFNLEdBQUcsSUFBSSxlQUFlLENBQUMsUUFBUSxFQUFFO1lBQzFDLElBQUksR0FBRyxLQUFLLEVBQUUsRUFBRTtnQkFDZCxnQ0FBZ0M7Z0JBQ2hDLFNBQVM7YUFDVjtZQUNELE1BQU0saUJBQWlCLEdBQUcsZUFBZSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFFaEUsc0RBQXNEO1lBQ3RELElBQUksaUJBQWlCLEVBQUU7Z0JBQ3JCLGdDQUFnQztnQkFDaEMsTUFBTSxjQUFjLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFDMUQsWUFBWSxDQUFDLElBQUksQ0FBQztvQkFDaEIsSUFBSSxFQUFFLGNBQWM7b0JBQ3BCLE9BQU8sRUFBRSxpQkFBaUI7aUJBQzNCLENBQUMsQ0FBQzthQUNKO1NBQ0Y7UUFFRCxPQUFPLEVBQUUsWUFBWSxFQUFFLENBQUM7SUFDMUIsQ0FBQyxDQUFDO0NBQ0g7QUFFRCxNQUFNLHFCQUFxQixHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFDckMsUUFBUSxFQUFFLENBQUM7U0FDUixNQUFNLENBQ0wsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUNWLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFDUCxPQUFPLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRTtLQUMvQixDQUFDLENBQ0g7U0FDQSxRQUFRLEVBQUU7Q0FDZCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEZXBlbmRlbmN5IH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsdWdpbi10eXBlcyc7XG5pbXBvcnQgZnNwIGZyb20gJ2ZzL3Byb21pc2VzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHogZnJvbSAnem9kJztcbmltcG9ydCB7IExvY2tGaWxlQ29udGVudHMsIExvY2tGaWxlUmVhZGVyIH0gZnJvbSAnLi90eXBlcy5qcyc7XG5pbXBvcnQgeyBwcmludGVyIH0gZnJvbSAnLi4vLi4vcHJpbnRlci5qcyc7XG5pbXBvcnQgeyBMb2dMZXZlbCB9IGZyb20gJy4uLy4uL3ByaW50ZXIvcHJpbnRlci5qcyc7XG5cbi8qKlxuICogTnBtTG9ja0ZpbGVSZWFkZXIgaXMgYW4gYWJzdHJhY3Rpb24gYXJvdW5kIHRoZSBsb2dpYyB1c2VkIHRvIHJlYWQgYW5kIHBhcnNlIGxvY2sgZmlsZSBjb250ZW50c1xuICovXG5leHBvcnQgY2xhc3MgTnBtTG9ja0ZpbGVSZWFkZXIgaW1wbGVtZW50cyBMb2NrRmlsZVJlYWRlciB7XG4gIGdldExvY2tGaWxlQ29udGVudHNGcm9tQ3dkID0gYXN5bmMgKCk6IFByb21pc2U8XG4gICAgTG9ja0ZpbGVDb250ZW50cyB8IHVuZGVmaW5lZFxuICA+ID0+IHtcbiAgICBjb25zdCBkZXBlbmRlbmNpZXM6IEFycmF5PERlcGVuZGVuY3k+ID0gW107XG4gICAgY29uc3QgcGFja2FnZUxvY2tKc29uUGF0aCA9IHBhdGgucmVzb2x2ZShcbiAgICAgIHByb2Nlc3MuY3dkKCksXG4gICAgICAncGFja2FnZS1sb2NrLmpzb24nXG4gICAgKTtcbiAgICBsZXQgcGFja2FnZUxvY2tKc29uO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBqc29uTG9ja0NvbnRlbnRzID0gYXdhaXQgZnNwLnJlYWRGaWxlKHBhY2thZ2VMb2NrSnNvblBhdGgsICd1dGYtOCcpO1xuICAgICAgY29uc3QganNvbkxvY2tQYXJzZWRWYWx1ZSA9IEpTT04ucGFyc2UoanNvbkxvY2tDb250ZW50cyk7XG4gICAgICAvLyBUaGlzIHdpbGwgc3RyaXAgZmllbGRzIHRoYXQgYXJlIG5vdCBwYXJ0IG9mIHRoZSBwYWNrYWdlIGxvY2sgc2NoZW1hXG4gICAgICBwYWNrYWdlTG9ja0pzb24gPSBwYWNrYWdlTG9ja0pzb25TY2hlbWEucGFyc2UoanNvbkxvY2tQYXJzZWRWYWx1ZSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHByaW50ZXIubG9nKFxuICAgICAgICBgRmFpbGVkIHRvIGdldCBsb2NrIGZpbGUgY29udGVudHMgYmVjYXVzZSAke3BhY2thZ2VMb2NrSnNvblBhdGh9IGRvZXMgbm90IGV4aXN0IG9yIGlzIG5vdCBwYXJzZS1hYmxlYCxcbiAgICAgICAgTG9nTGV2ZWwuREVCVUdcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBrZXkgaW4gcGFja2FnZUxvY2tKc29uLnBhY2thZ2VzKSB7XG4gICAgICBpZiAoa2V5ID09PSAnJykge1xuICAgICAgICAvLyBTa2lwIHJvb3QgcHJvamVjdCBpbiBwYWNrYWdlc1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGRlcGVuZGVuY3lWZXJzaW9uID0gcGFja2FnZUxvY2tKc29uLnBhY2thZ2VzW2tleV0udmVyc2lvbjtcblxuICAgICAgLy8gVmVyc2lvbiBtYXkgbm90IGV4aXN0IGlmIHBhY2thZ2UgaXMgYSBzeW1ib2xpYyBsaW5rXG4gICAgICBpZiAoZGVwZW5kZW5jeVZlcnNpb24pIHtcbiAgICAgICAgLy8gUmVtb3ZlIFwibm9kZV9tb2R1bGVzL1wiIHByZWZpeFxuICAgICAgICBjb25zdCBkZXBlbmRlbmN5TmFtZSA9IGtleS5yZXBsYWNlKC9ebm9kZV9tb2R1bGVzXFwvLywgJycpO1xuICAgICAgICBkZXBlbmRlbmNpZXMucHVzaCh7XG4gICAgICAgICAgbmFtZTogZGVwZW5kZW5jeU5hbWUsXG4gICAgICAgICAgdmVyc2lvbjogZGVwZW5kZW5jeVZlcnNpb24sXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7IGRlcGVuZGVuY2llcyB9O1xuICB9O1xufVxuXG5jb25zdCBwYWNrYWdlTG9ja0pzb25TY2hlbWEgPSB6Lm9iamVjdCh7XG4gIHBhY2thZ2VzOiB6XG4gICAgLnJlY29yZChcbiAgICAgIHouc3RyaW5nKCksXG4gICAgICB6Lm9iamVjdCh7XG4gICAgICAgIHZlcnNpb246IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICAgIH0pXG4gICAgKVxuICAgIC5vcHRpb25hbCgpLFxufSk7XG4iXX0=