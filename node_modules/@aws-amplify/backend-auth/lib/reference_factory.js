import { authAccessBuilder as _authAccessBuilder } from './access_builder.js';
import path from 'path';
import { AmplifyUserError, TagName } from '@aws-amplify/platform-core';
import { AuthAccessPolicyArbiterFactory } from './auth_access_policy_arbiter.js';
import { Stack, Tags } from 'aws-cdk-lib';
import { UserPoolAccessPolicyFactory } from './userpool_access_policy_factory.js';
import { AmplifyAuthFactory } from './factory.js';
import { AmplifyReferenceAuth } from './reference_construct.js';
/**
 * Singleton factory for AmplifyReferenceAuth that can be used in Amplify project files.
 *
 * Exported for testing purpose only & should NOT be exported out of the package.
 */
export class AmplifyReferenceAuthFactory {
    props;
    importStack;
    provides = 'AuthResources';
    generator;
    /**
     * Set the properties that will be used to initialize AmplifyReferenceAuth
     */
    constructor(props, 
    // eslint-disable-next-line amplify-backend-rules/prefer-amplify-errors
    importStack = new Error().stack) {
        this.props = props;
        this.importStack = importStack;
        if (AmplifyAuthFactory.factoryCount > 0) {
            throw new AmplifyUserError('MultipleSingletonResourcesError', {
                message: 'Multiple `defineAuth` or `referenceAuth` calls are not allowed within an Amplify backend',
                resolution: 'Remove all but one `defineAuth` or `referenceAuth` call',
            });
        }
        AmplifyAuthFactory.factoryCount++;
    }
    /**
     * Get a singleton instance of AmplifyReferenceAuth
     */
    getInstance = (getInstanceProps) => {
        const { constructContainer, importPathVerifier } = getInstanceProps;
        importPathVerifier?.verify(this.importStack, path.join('amplify', 'auth', 'resource'), 'Amplify Auth must be defined in amplify/auth/resource.ts');
        if (!this.generator) {
            this.generator = new AmplifyReferenceAuthGenerator(this.props, getInstanceProps);
        }
        return constructContainer.getOrCompute(this.generator);
    };
}
class AmplifyReferenceAuthGenerator {
    props;
    getInstanceProps;
    authAccessBuilder;
    authAccessPolicyArbiterFactory;
    resourceGroupName = 'auth';
    name;
    constructor(props, getInstanceProps, authAccessBuilder = _authAccessBuilder, authAccessPolicyArbiterFactory = new AuthAccessPolicyArbiterFactory()) {
        this.props = props;
        this.getInstanceProps = getInstanceProps;
        this.authAccessBuilder = authAccessBuilder;
        this.authAccessPolicyArbiterFactory = authAccessPolicyArbiterFactory;
        this.name = 'amplifyAuth';
    }
    generateContainerEntry = ({ scope, ssmEnvironmentEntriesGenerator, }) => {
        const authProps = {
            ...this.props,
            outputStorageStrategy: this.getInstanceProps.outputStorageStrategy,
        };
        let authConstruct;
        try {
            authConstruct = new AmplifyReferenceAuth(scope, this.name, authProps);
        }
        catch (error) {
            throw new AmplifyUserError('AmplifyReferenceAuthConstructInitializationError', {
                message: 'Failed to instantiate reference auth construct',
                resolution: 'See the underlying error message for more details.',
            }, error);
        }
        Tags.of(authConstruct).add(TagName.FRIENDLY_NAME, this.name);
        const authConstructMixin = {
            ...authConstruct,
            /**
             * Returns a resourceAccessAcceptor for the given role
             * @param roleIdentifier Either the auth or unauth role name or the name of a UserPool group
             */
            getResourceAccessAcceptor: (roleIdentifier) => ({
                identifier: `${roleIdentifier}ResourceAccessAcceptor`,
                acceptResourceAccess: (policy) => {
                    const role = roleNameIsAuthRoleName(roleIdentifier)
                        ? authConstruct.resources[roleIdentifier]
                        : authConstruct.resources.groups?.[roleIdentifier]?.role;
                    if (!role) {
                        throw new AmplifyUserError('InvalidResourceAccessConfigError', {
                            message: `No auth IAM role found for "${roleIdentifier}".`,
                            resolution: `If you are trying to configure UserPool group access, ensure that the group name is specified correctly.`,
                        });
                    }
                    policy.attachToRole(role);
                },
            }),
            stack: Stack.of(authConstruct),
        };
        if (!this.props.access) {
            return authConstructMixin;
        }
        // props.access is the access callback defined by the customer
        // here we inject the authAccessBuilder into the callback and run it
        // this produces the access definition that will be used to create the auth access policies
        const accessDefinition = this.props.access(this.authAccessBuilder);
        const ssmEnvironmentEntries = ssmEnvironmentEntriesGenerator.generateSsmEnvironmentEntries({
            [`${this.name}_USERPOOL_ID`]: authConstructMixin.resources.userPool.userPoolId,
        });
        const authPolicyArbiter = this.authAccessPolicyArbiterFactory.getInstance(accessDefinition, this.getInstanceProps, ssmEnvironmentEntries, new UserPoolAccessPolicyFactory(authConstruct.resources.userPool));
        authPolicyArbiter.arbitratePolicies();
        return authConstructMixin;
    };
}
const roleNameIsAuthRoleName = (roleName) => {
    return (roleName === 'authenticatedUserIamRole' ||
        roleName === 'unauthenticatedUserIamRole');
};
/**
 * Provide references to existing auth resources.
 */
export const referenceAuth = (props) => {
    return new AmplifyReferenceAuthFactory(props, 
    // eslint-disable-next-line amplify-backend-rules/prefer-amplify-errors
    new Error().stack);
};
//# sourceMappingURL=data:application/json;base64,