import { AmplifyStorage } from './construct.js';
import { StorageAccessOrchestratorFactory } from './storage_access_orchestrator.js';
import { EventType } from 'aws-cdk-lib/aws-s3';
import { StorageAccessPolicyFactory } from './storage_access_policy_factory.js';
import { Tags } from 'aws-cdk-lib';
import { TagName } from '@aws-amplify/platform-core';
/**
 * Generates a single instance of storage resources
 */
export class StorageContainerEntryGenerator {
    props;
    getInstanceProps;
    storageAccessOrchestratorFactory;
    resourceGroupName = 'storage';
    /**
     * Initialize with context from storage factory
     */
    constructor(props, getInstanceProps, storageAccessOrchestratorFactory = new StorageAccessOrchestratorFactory()) {
        this.props = props;
        this.getInstanceProps = getInstanceProps;
        this.storageAccessOrchestratorFactory = storageAccessOrchestratorFactory;
    }
    generateContainerEntry = ({ scope, ssmEnvironmentEntriesGenerator, }) => {
        const amplifyStorage = new AmplifyStorage(scope, this.props.name, {
            ...this.props,
            outputStorageStrategy: this.getInstanceProps.outputStorageStrategy,
        });
        Tags.of(amplifyStorage).add(TagName.FRIENDLY_NAME, this.props.name);
        Object.entries(this.props.triggers || {}).forEach(([triggerEvent, handlerFactory]) => {
            const events = [];
            const handler = handlerFactory.getInstance(this.getInstanceProps)
                .resources.lambda;
            // triggerEvent is converted string from Object.entries
            switch (triggerEvent) {
                case 'onDelete':
                    events.push(EventType.OBJECT_REMOVED);
                    break;
                case 'onUpload':
                    events.push(EventType.OBJECT_CREATED);
                    break;
            }
            amplifyStorage.addTrigger(events, handler);
        });
        if (!this.props.access) {
            return amplifyStorage;
        }
        // generate the ssm environment context necessary to access the s3 bucket (in this case, just the bucket name)
        const ssmEnvironmentEntries = ssmEnvironmentEntriesGenerator.generateSsmEnvironmentEntries({
            [`${this.props.name}_BUCKET_NAME`]: amplifyStorage.resources.bucket.bucketName,
        });
        // we pass the access definition along with other dependencies to the storageAccessOrchestrator
        const storageAccessOrchestrator = this.storageAccessOrchestratorFactory.getInstance(this.props.access, this.getInstanceProps, ssmEnvironmentEntries, new StorageAccessPolicyFactory(amplifyStorage.resources.bucket));
        // the orchestrator generates policies according to the accessDefinition and attaches the policies to appropriate roles
        const storageAccessOutput = storageAccessOrchestrator.orchestrateStorageAccess();
        amplifyStorage.addAccessDefinition(storageAccessOutput);
        return amplifyStorage;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZV9jb250YWluZXJfZW50cnlfZ2VuZXJhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3N0b3JhZ2VfY29udGFpbmVyX2VudHJ5X2dlbmVyYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFNQSxPQUFPLEVBQUUsY0FBYyxFQUE4QixNQUFNLGdCQUFnQixDQUFDO0FBQzVFLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBRXBGLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUMvQyxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUNoRixPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ25DLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUVyRDs7R0FFRztBQUNILE1BQU0sT0FBTyw4QkFBOEI7SUFTdEI7SUFDQTtJQUNBO0lBUlYsaUJBQWlCLEdBQTZCLFNBQVMsQ0FBQztJQUVqRTs7T0FFRztJQUNILFlBQ21CLEtBQWlDLEVBQ2pDLGdCQUFrRCxFQUNsRCxtQ0FBcUUsSUFBSSxnQ0FBZ0MsRUFBRTtRQUYzRyxVQUFLLEdBQUwsS0FBSyxDQUE0QjtRQUNqQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtDO1FBQ2xELHFDQUFnQyxHQUFoQyxnQ0FBZ0MsQ0FBMkU7SUFDM0gsQ0FBQztJQUVKLHNCQUFzQixHQUFHLENBQUMsRUFDeEIsS0FBSyxFQUNMLDhCQUE4QixHQUNGLEVBQUUsRUFBRTtRQUNoQyxNQUFNLGNBQWMsR0FBRyxJQUFJLGNBQWMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUU7WUFDaEUsR0FBRyxJQUFJLENBQUMsS0FBSztZQUNiLHFCQUFxQixFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxxQkFBcUI7U0FDbkUsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLEVBQUUsQ0FBQyxjQUFjLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXBFLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTyxDQUMvQyxDQUFDLENBQUMsWUFBWSxFQUFFLGNBQWMsQ0FBQyxFQUFFLEVBQUU7WUFDakMsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDO1lBQ2xCLE1BQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDO2lCQUM5RCxTQUFTLENBQUMsTUFBTSxDQUFDO1lBQ3BCLHVEQUF1RDtZQUN2RCxRQUFRLFlBQTBDLEVBQUU7Z0JBQ2xELEtBQUssVUFBVTtvQkFDYixNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQztvQkFDdEMsTUFBTTtnQkFDUixLQUFLLFVBQVU7b0JBQ2IsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLENBQUM7b0JBQ3RDLE1BQU07YUFDVDtZQUNELGNBQWMsQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzdDLENBQUMsQ0FDRixDQUFDO1FBRUYsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1lBQ3RCLE9BQU8sY0FBYyxDQUFDO1NBQ3ZCO1FBRUQsOEdBQThHO1FBQzlHLE1BQU0scUJBQXFCLEdBQ3pCLDhCQUE4QixDQUFDLDZCQUE2QixDQUFDO1lBQzNELENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksY0FBYyxDQUFDLEVBQ2hDLGNBQWMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFVBQVU7U0FDN0MsQ0FBQyxDQUFDO1FBRUwsK0ZBQStGO1FBQy9GLE1BQU0seUJBQXlCLEdBQzdCLElBQUksQ0FBQyxnQ0FBZ0MsQ0FBQyxXQUFXLENBQy9DLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUNqQixJQUFJLENBQUMsZ0JBQWdCLEVBQ3JCLHFCQUFxQixFQUNyQixJQUFJLDBCQUEwQixDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQ2hFLENBQUM7UUFFSix1SEFBdUg7UUFDdkgsTUFBTSxtQkFBbUIsR0FDdkIseUJBQXlCLENBQUMsd0JBQXdCLEVBQUUsQ0FBQztRQUN2RCxjQUFjLENBQUMsbUJBQW1CLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUV4RCxPQUFPLGNBQWMsQ0FBQztJQUN4QixDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFtcGxpZnlSZXNvdXJjZUdyb3VwTmFtZSxcbiAgQ29uc3RydWN0Q29udGFpbmVyRW50cnlHZW5lcmF0b3IsXG4gIENvbnN0cnVjdEZhY3RvcnlHZXRJbnN0YW5jZVByb3BzLFxuICBHZW5lcmF0ZUNvbnRhaW5lckVudHJ5UHJvcHMsXG59IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbHVnaW4tdHlwZXMnO1xuaW1wb3J0IHsgQW1wbGlmeVN0b3JhZ2UsIEFtcGxpZnlTdG9yYWdlVHJpZ2dlckV2ZW50IH0gZnJvbSAnLi9jb25zdHJ1Y3QuanMnO1xuaW1wb3J0IHsgU3RvcmFnZUFjY2Vzc09yY2hlc3RyYXRvckZhY3RvcnkgfSBmcm9tICcuL3N0b3JhZ2VfYWNjZXNzX29yY2hlc3RyYXRvci5qcyc7XG5pbXBvcnQgeyBBbXBsaWZ5U3RvcmFnZUZhY3RvcnlQcm9wcyB9IGZyb20gJy4vdHlwZXMuanMnO1xuaW1wb3J0IHsgRXZlbnRUeXBlIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLXMzJztcbmltcG9ydCB7IFN0b3JhZ2VBY2Nlc3NQb2xpY3lGYWN0b3J5IH0gZnJvbSAnLi9zdG9yYWdlX2FjY2Vzc19wb2xpY3lfZmFjdG9yeS5qcyc7XG5pbXBvcnQgeyBUYWdzIH0gZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHsgVGFnTmFtZSB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbGF0Zm9ybS1jb3JlJztcblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBzaW5nbGUgaW5zdGFuY2Ugb2Ygc3RvcmFnZSByZXNvdXJjZXNcbiAqL1xuZXhwb3J0IGNsYXNzIFN0b3JhZ2VDb250YWluZXJFbnRyeUdlbmVyYXRvclxuICBpbXBsZW1lbnRzIENvbnN0cnVjdENvbnRhaW5lckVudHJ5R2VuZXJhdG9yXG57XG4gIHJlYWRvbmx5IHJlc291cmNlR3JvdXBOYW1lOiBBbXBsaWZ5UmVzb3VyY2VHcm91cE5hbWUgPSAnc3RvcmFnZSc7XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemUgd2l0aCBjb250ZXh0IGZyb20gc3RvcmFnZSBmYWN0b3J5XG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IHByb3BzOiBBbXBsaWZ5U3RvcmFnZUZhY3RvcnlQcm9wcyxcbiAgICBwcml2YXRlIHJlYWRvbmx5IGdldEluc3RhbmNlUHJvcHM6IENvbnN0cnVjdEZhY3RvcnlHZXRJbnN0YW5jZVByb3BzLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgc3RvcmFnZUFjY2Vzc09yY2hlc3RyYXRvckZhY3Rvcnk6IFN0b3JhZ2VBY2Nlc3NPcmNoZXN0cmF0b3JGYWN0b3J5ID0gbmV3IFN0b3JhZ2VBY2Nlc3NPcmNoZXN0cmF0b3JGYWN0b3J5KClcbiAgKSB7fVxuXG4gIGdlbmVyYXRlQ29udGFpbmVyRW50cnkgPSAoe1xuICAgIHNjb3BlLFxuICAgIHNzbUVudmlyb25tZW50RW50cmllc0dlbmVyYXRvcixcbiAgfTogR2VuZXJhdGVDb250YWluZXJFbnRyeVByb3BzKSA9PiB7XG4gICAgY29uc3QgYW1wbGlmeVN0b3JhZ2UgPSBuZXcgQW1wbGlmeVN0b3JhZ2Uoc2NvcGUsIHRoaXMucHJvcHMubmFtZSwge1xuICAgICAgLi4udGhpcy5wcm9wcyxcbiAgICAgIG91dHB1dFN0b3JhZ2VTdHJhdGVneTogdGhpcy5nZXRJbnN0YW5jZVByb3BzLm91dHB1dFN0b3JhZ2VTdHJhdGVneSxcbiAgICB9KTtcblxuICAgIFRhZ3Mub2YoYW1wbGlmeVN0b3JhZ2UpLmFkZChUYWdOYW1lLkZSSUVORExZX05BTUUsIHRoaXMucHJvcHMubmFtZSk7XG5cbiAgICBPYmplY3QuZW50cmllcyh0aGlzLnByb3BzLnRyaWdnZXJzIHx8IHt9KS5mb3JFYWNoKFxuICAgICAgKFt0cmlnZ2VyRXZlbnQsIGhhbmRsZXJGYWN0b3J5XSkgPT4ge1xuICAgICAgICBjb25zdCBldmVudHMgPSBbXTtcbiAgICAgICAgY29uc3QgaGFuZGxlciA9IGhhbmRsZXJGYWN0b3J5LmdldEluc3RhbmNlKHRoaXMuZ2V0SW5zdGFuY2VQcm9wcylcbiAgICAgICAgICAucmVzb3VyY2VzLmxhbWJkYTtcbiAgICAgICAgLy8gdHJpZ2dlckV2ZW50IGlzIGNvbnZlcnRlZCBzdHJpbmcgZnJvbSBPYmplY3QuZW50cmllc1xuICAgICAgICBzd2l0Y2ggKHRyaWdnZXJFdmVudCBhcyBBbXBsaWZ5U3RvcmFnZVRyaWdnZXJFdmVudCkge1xuICAgICAgICAgIGNhc2UgJ29uRGVsZXRlJzpcbiAgICAgICAgICAgIGV2ZW50cy5wdXNoKEV2ZW50VHlwZS5PQkpFQ1RfUkVNT1ZFRCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdvblVwbG9hZCc6XG4gICAgICAgICAgICBldmVudHMucHVzaChFdmVudFR5cGUuT0JKRUNUX0NSRUFURUQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgYW1wbGlmeVN0b3JhZ2UuYWRkVHJpZ2dlcihldmVudHMsIGhhbmRsZXIpO1xuICAgICAgfVxuICAgICk7XG5cbiAgICBpZiAoIXRoaXMucHJvcHMuYWNjZXNzKSB7XG4gICAgICByZXR1cm4gYW1wbGlmeVN0b3JhZ2U7XG4gICAgfVxuXG4gICAgLy8gZ2VuZXJhdGUgdGhlIHNzbSBlbnZpcm9ubWVudCBjb250ZXh0IG5lY2Vzc2FyeSB0byBhY2Nlc3MgdGhlIHMzIGJ1Y2tldCAoaW4gdGhpcyBjYXNlLCBqdXN0IHRoZSBidWNrZXQgbmFtZSlcbiAgICBjb25zdCBzc21FbnZpcm9ubWVudEVudHJpZXMgPVxuICAgICAgc3NtRW52aXJvbm1lbnRFbnRyaWVzR2VuZXJhdG9yLmdlbmVyYXRlU3NtRW52aXJvbm1lbnRFbnRyaWVzKHtcbiAgICAgICAgW2Ake3RoaXMucHJvcHMubmFtZX1fQlVDS0VUX05BTUVgXTpcbiAgICAgICAgICBhbXBsaWZ5U3RvcmFnZS5yZXNvdXJjZXMuYnVja2V0LmJ1Y2tldE5hbWUsXG4gICAgICB9KTtcblxuICAgIC8vIHdlIHBhc3MgdGhlIGFjY2VzcyBkZWZpbml0aW9uIGFsb25nIHdpdGggb3RoZXIgZGVwZW5kZW5jaWVzIHRvIHRoZSBzdG9yYWdlQWNjZXNzT3JjaGVzdHJhdG9yXG4gICAgY29uc3Qgc3RvcmFnZUFjY2Vzc09yY2hlc3RyYXRvciA9XG4gICAgICB0aGlzLnN0b3JhZ2VBY2Nlc3NPcmNoZXN0cmF0b3JGYWN0b3J5LmdldEluc3RhbmNlKFxuICAgICAgICB0aGlzLnByb3BzLmFjY2VzcyxcbiAgICAgICAgdGhpcy5nZXRJbnN0YW5jZVByb3BzLFxuICAgICAgICBzc21FbnZpcm9ubWVudEVudHJpZXMsXG4gICAgICAgIG5ldyBTdG9yYWdlQWNjZXNzUG9saWN5RmFjdG9yeShhbXBsaWZ5U3RvcmFnZS5yZXNvdXJjZXMuYnVja2V0KVxuICAgICAgKTtcblxuICAgIC8vIHRoZSBvcmNoZXN0cmF0b3IgZ2VuZXJhdGVzIHBvbGljaWVzIGFjY29yZGluZyB0byB0aGUgYWNjZXNzRGVmaW5pdGlvbiBhbmQgYXR0YWNoZXMgdGhlIHBvbGljaWVzIHRvIGFwcHJvcHJpYXRlIHJvbGVzXG4gICAgY29uc3Qgc3RvcmFnZUFjY2Vzc091dHB1dCA9XG4gICAgICBzdG9yYWdlQWNjZXNzT3JjaGVzdHJhdG9yLm9yY2hlc3RyYXRlU3RvcmFnZUFjY2VzcygpO1xuICAgIGFtcGxpZnlTdG9yYWdlLmFkZEFjY2Vzc0RlZmluaXRpb24oc3RvcmFnZUFjY2Vzc091dHB1dCk7XG5cbiAgICByZXR1cm4gYW1wbGlmeVN0b3JhZ2U7XG4gIH07XG59XG4iXX0=