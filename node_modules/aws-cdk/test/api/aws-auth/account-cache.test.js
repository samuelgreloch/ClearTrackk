"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs = require("fs-extra");
const account_cache_1 = require("../../../lib/api/aws-auth/account-cache");
const util_1 = require("../../util");
async function makeCache() {
    const dir = await fs.mkdtemp('/tmp/account-cache-test');
    const file = path.join(dir, 'cache.json');
    return {
        cacheDir: dir,
        cacheFile: file,
        cache: new account_cache_1.AccountAccessKeyCache(file),
    };
}
async function nukeCache(cacheDir) {
    await fs.remove(cacheDir);
}
test('default account cache uses CDK_HOME', () => {
    process.env.CDK_HOME = '/banana';
    const cache = new account_cache_1.AccountAccessKeyCache();
    expect(cache.cacheFile).toContain('/banana/');
});
test('account cache does not fail when given a nonwritable directory', async () => {
    const accessError = new Error('Oh no');
    accessError.code = 'EACCES';
    return (0, util_1.withMocked)(fs, 'mkdirs', async (mkdirs) => {
        // Have to do this because mkdirs has 2 overloads and it confuses TypeScript
        mkdirs.mockRejectedValue(accessError);
        const cache = new account_cache_1.AccountAccessKeyCache('/abc/xyz');
        await cache.fetch('xyz', () => Promise.resolve({ accountId: 'asdf', partition: 'swa' }));
        // No exception
    });
});
test('get(k) when cache is empty', async () => {
    const { cacheDir, cacheFile, cache } = await makeCache();
    try {
        expect(await cache.get('foo')).toBeUndefined();
        expect(await fs.pathExists(cacheFile)).toBeFalsy();
    }
    finally {
        await nukeCache(cacheDir);
    }
});
test('put(k,v) and then get(k)', async () => {
    const { cacheDir, cacheFile, cache } = await makeCache();
    try {
        await cache.put('key', { accountId: 'value', partition: 'aws' });
        await cache.put('boo', { accountId: 'bar', partition: 'aws' });
        expect(await cache.get('key')).toEqual({ accountId: 'value', partition: 'aws' });
        // create another cache instance on the same file, should still work
        const cache2 = new account_cache_1.AccountAccessKeyCache(cacheFile);
        expect(await cache2.get('boo')).toEqual({ accountId: 'bar', partition: 'aws' });
        // whitebox: read the file
        expect(await fs.readJson(cacheFile)).toEqual({
            key: { accountId: 'value', partition: 'aws' },
            boo: { accountId: 'bar', partition: 'aws' },
        });
    }
    finally {
        await nukeCache(cacheDir);
    }
});
test('fetch(k, resolver) can be used to "atomically" get + resolve + put', async () => {
    const { cacheDir, cache } = await makeCache();
    try {
        expect(await cache.get('foo')).toBeUndefined();
        expect(await cache.fetch('foo', async () => ({ accountId: 'bar', partition: 'aws' }))).toEqual({ accountId: 'bar', partition: 'aws' });
        expect(await cache.get('foo')).toEqual({ accountId: 'bar', partition: 'aws' });
    }
    finally {
        await nukeCache(cacheDir);
    }
});
test(`cache is nuked if it exceeds ${account_cache_1.AccountAccessKeyCache.MAX_ENTRIES} entries`, async () => {
    const { cacheDir, cacheFile, cache } = await makeCache();
    try {
        for (let i = 0; i < account_cache_1.AccountAccessKeyCache.MAX_ENTRIES; ++i) {
            await cache.put(`key${i}`, { accountId: `value${i}`, partition: 'aws' });
        }
        // verify all values are on disk
        const otherCache = new account_cache_1.AccountAccessKeyCache(cacheFile);
        for (let i = 0; i < account_cache_1.AccountAccessKeyCache.MAX_ENTRIES; ++i) {
            expect(await otherCache.get(`key${i}`)).toEqual({ accountId: `value${i}`, partition: 'aws' });
        }
        // add another value
        await cache.put('nuke-me', { accountId: 'genesis', partition: 'aws' });
        // now, we expect only `nuke-me` to exist on disk
        expect(await otherCache.get('nuke-me')).toEqual({ accountId: 'genesis', partition: 'aws' });
        for (let i = 0; i < account_cache_1.AccountAccessKeyCache.MAX_ENTRIES; ++i) {
            expect(await otherCache.get(`key${i}`)).toBeUndefined();
        }
    }
    finally {
        await nukeCache(cacheDir);
    }
}, 
// This makes a lot of promises, so it can queue for a while...
30000);
test('cache pretends to be empty if cache file does not contain JSON', async () => {
    const { cacheDir, cacheFile, cache } = await makeCache();
    try {
        await fs.writeFile(cacheFile, '');
        await expect(cache.get('abc')).resolves.toEqual(undefined);
    }
    finally {
        await nukeCache(cacheDir);
    }
});
//# sourceMappingURL=data:application/json;base64,