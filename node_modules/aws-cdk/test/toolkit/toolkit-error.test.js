"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const error_1 = require("../../lib/toolkit/error");
describe('toolkit error', () => {
    let toolkitError = new error_1.ToolkitError('Test toolkit error');
    let authError = new error_1.AuthenticationError('Test authentication error');
    let assemblyError = new error_1.AssemblyError('Test authentication error');
    let contextProviderError = new error_1.ContextProviderError('Test context provider error');
    test('types are correctly assigned', async () => {
        expect(toolkitError.type).toBe('toolkit');
        expect(authError.type).toBe('authentication');
        expect(assemblyError.type).toBe('assembly');
        expect(contextProviderError.type).toBe('context-provider');
    });
    test('isToolkitError works', () => {
        expect(error_1.ToolkitError.isToolkitError(toolkitError)).toBe(true);
        expect(error_1.ToolkitError.isToolkitError(authError)).toBe(true);
        expect(error_1.ToolkitError.isToolkitError(assemblyError)).toBe(true);
        expect(error_1.ToolkitError.isToolkitError(contextProviderError)).toBe(true);
    });
    test('isAuthenticationError works', () => {
        expect(error_1.ToolkitError.isAuthenticationError(toolkitError)).toBe(false);
        expect(error_1.ToolkitError.isAuthenticationError(authError)).toBe(true);
    });
    test('isAssemblyError works', () => {
        expect(error_1.ToolkitError.isAssemblyError(assemblyError)).toBe(true);
        expect(error_1.ToolkitError.isAssemblyError(toolkitError)).toBe(false);
        expect(error_1.ToolkitError.isAssemblyError(authError)).toBe(false);
    });
    test('isContextProviderError works', () => {
        expect(error_1.ToolkitError.isContextProviderError(contextProviderError)).toBe(true);
        expect(error_1.ToolkitError.isContextProviderError(toolkitError)).toBe(false);
        expect(error_1.ToolkitError.isContextProviderError(authError)).toBe(false);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbGtpdC1lcnJvci50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidG9vbGtpdC1lcnJvci50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbURBQWlIO0FBRWpILFFBQVEsQ0FBQyxlQUFlLEVBQUUsR0FBRyxFQUFFO0lBQzdCLElBQUksWUFBWSxHQUFHLElBQUksb0JBQVksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0lBQzFELElBQUksU0FBUyxHQUFHLElBQUksMkJBQW1CLENBQUMsMkJBQTJCLENBQUMsQ0FBQztJQUNyRSxJQUFJLGFBQWEsR0FBRyxJQUFJLHFCQUFhLENBQUMsMkJBQTJCLENBQUMsQ0FBQztJQUNuRSxJQUFJLG9CQUFvQixHQUFHLElBQUksNEJBQW9CLENBQUMsNkJBQTZCLENBQUMsQ0FBQztJQUVuRixJQUFJLENBQUMsOEJBQThCLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDOUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDMUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUM5QyxNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM1QyxNQUFNLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFDN0QsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxFQUFFO1FBQ2hDLE1BQU0sQ0FBQyxvQkFBWSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM3RCxNQUFNLENBQUMsb0JBQVksQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDMUQsTUFBTSxDQUFDLG9CQUFZLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzlELE1BQU0sQ0FBQyxvQkFBWSxDQUFDLGNBQWMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3ZFLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLDZCQUE2QixFQUFFLEdBQUcsRUFBRTtRQUN2QyxNQUFNLENBQUMsb0JBQVksQ0FBQyxxQkFBcUIsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNyRSxNQUFNLENBQUMsb0JBQVksQ0FBQyxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNuRSxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyx1QkFBdUIsRUFBRSxHQUFHLEVBQUU7UUFDakMsTUFBTSxDQUFDLG9CQUFZLENBQUMsZUFBZSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQy9ELE1BQU0sQ0FBQyxvQkFBWSxDQUFDLGVBQWUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMvRCxNQUFNLENBQUMsb0JBQVksQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUQsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsOEJBQThCLEVBQUUsR0FBRyxFQUFFO1FBQ3hDLE1BQU0sQ0FBQyxvQkFBWSxDQUFDLHNCQUFzQixDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0UsTUFBTSxDQUFDLG9CQUFZLENBQUMsc0JBQXNCLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdEUsTUFBTSxDQUFDLG9CQUFZLENBQUMsc0JBQXNCLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckUsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFzc2VtYmx5RXJyb3IsIEF1dGhlbnRpY2F0aW9uRXJyb3IsIENvbnRleHRQcm92aWRlckVycm9yLCBUb29sa2l0RXJyb3IgfSBmcm9tICcuLi8uLi9saWIvdG9vbGtpdC9lcnJvcic7XG5cbmRlc2NyaWJlKCd0b29sa2l0IGVycm9yJywgKCkgPT4ge1xuICBsZXQgdG9vbGtpdEVycm9yID0gbmV3IFRvb2xraXRFcnJvcignVGVzdCB0b29sa2l0IGVycm9yJyk7XG4gIGxldCBhdXRoRXJyb3IgPSBuZXcgQXV0aGVudGljYXRpb25FcnJvcignVGVzdCBhdXRoZW50aWNhdGlvbiBlcnJvcicpO1xuICBsZXQgYXNzZW1ibHlFcnJvciA9IG5ldyBBc3NlbWJseUVycm9yKCdUZXN0IGF1dGhlbnRpY2F0aW9uIGVycm9yJyk7XG4gIGxldCBjb250ZXh0UHJvdmlkZXJFcnJvciA9IG5ldyBDb250ZXh0UHJvdmlkZXJFcnJvcignVGVzdCBjb250ZXh0IHByb3ZpZGVyIGVycm9yJyk7XG5cbiAgdGVzdCgndHlwZXMgYXJlIGNvcnJlY3RseSBhc3NpZ25lZCcsIGFzeW5jICgpID0+IHtcbiAgICBleHBlY3QodG9vbGtpdEVycm9yLnR5cGUpLnRvQmUoJ3Rvb2xraXQnKTtcbiAgICBleHBlY3QoYXV0aEVycm9yLnR5cGUpLnRvQmUoJ2F1dGhlbnRpY2F0aW9uJyk7XG4gICAgZXhwZWN0KGFzc2VtYmx5RXJyb3IudHlwZSkudG9CZSgnYXNzZW1ibHknKTtcbiAgICBleHBlY3QoY29udGV4dFByb3ZpZGVyRXJyb3IudHlwZSkudG9CZSgnY29udGV4dC1wcm92aWRlcicpO1xuICB9KTtcblxuICB0ZXN0KCdpc1Rvb2xraXRFcnJvciB3b3JrcycsICgpID0+IHtcbiAgICBleHBlY3QoVG9vbGtpdEVycm9yLmlzVG9vbGtpdEVycm9yKHRvb2xraXRFcnJvcikpLnRvQmUodHJ1ZSk7XG4gICAgZXhwZWN0KFRvb2xraXRFcnJvci5pc1Rvb2xraXRFcnJvcihhdXRoRXJyb3IpKS50b0JlKHRydWUpO1xuICAgIGV4cGVjdChUb29sa2l0RXJyb3IuaXNUb29sa2l0RXJyb3IoYXNzZW1ibHlFcnJvcikpLnRvQmUodHJ1ZSk7XG4gICAgZXhwZWN0KFRvb2xraXRFcnJvci5pc1Rvb2xraXRFcnJvcihjb250ZXh0UHJvdmlkZXJFcnJvcikpLnRvQmUodHJ1ZSk7XG4gIH0pO1xuXG4gIHRlc3QoJ2lzQXV0aGVudGljYXRpb25FcnJvciB3b3JrcycsICgpID0+IHtcbiAgICBleHBlY3QoVG9vbGtpdEVycm9yLmlzQXV0aGVudGljYXRpb25FcnJvcih0b29sa2l0RXJyb3IpKS50b0JlKGZhbHNlKTtcbiAgICBleHBlY3QoVG9vbGtpdEVycm9yLmlzQXV0aGVudGljYXRpb25FcnJvcihhdXRoRXJyb3IpKS50b0JlKHRydWUpO1xuICB9KTtcblxuICB0ZXN0KCdpc0Fzc2VtYmx5RXJyb3Igd29ya3MnLCAoKSA9PiB7XG4gICAgZXhwZWN0KFRvb2xraXRFcnJvci5pc0Fzc2VtYmx5RXJyb3IoYXNzZW1ibHlFcnJvcikpLnRvQmUodHJ1ZSk7XG4gICAgZXhwZWN0KFRvb2xraXRFcnJvci5pc0Fzc2VtYmx5RXJyb3IodG9vbGtpdEVycm9yKSkudG9CZShmYWxzZSk7XG4gICAgZXhwZWN0KFRvb2xraXRFcnJvci5pc0Fzc2VtYmx5RXJyb3IoYXV0aEVycm9yKSkudG9CZShmYWxzZSk7XG4gIH0pO1xuXG4gIHRlc3QoJ2lzQ29udGV4dFByb3ZpZGVyRXJyb3Igd29ya3MnLCAoKSA9PiB7XG4gICAgZXhwZWN0KFRvb2xraXRFcnJvci5pc0NvbnRleHRQcm92aWRlckVycm9yKGNvbnRleHRQcm92aWRlckVycm9yKSkudG9CZSh0cnVlKTtcbiAgICBleHBlY3QoVG9vbGtpdEVycm9yLmlzQ29udGV4dFByb3ZpZGVyRXJyb3IodG9vbGtpdEVycm9yKSkudG9CZShmYWxzZSk7XG4gICAgZXhwZWN0KFRvb2xraXRFcnJvci5pc0NvbnRleHRQcm92aWRlckVycm9yKGF1dGhFcnJvcikpLnRvQmUoZmFsc2UpO1xuICB9KTtcbn0pO1xuIl19