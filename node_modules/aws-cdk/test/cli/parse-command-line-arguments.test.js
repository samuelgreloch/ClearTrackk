"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const parse_command_line_arguments_1 = require("../../lib/cli/parse-command-line-arguments");
test('cdk deploy -R sets rollback to false', async () => {
    const argv = await (0, parse_command_line_arguments_1.parseCommandLineArguments)(['deploy', '-R']);
    expect(argv.rollback).toBe(false);
});
describe('cdk docs', () => {
    const originalPlatform = process.platform;
    // Helper to mock process.platform
    const mockPlatform = (platform) => {
        Object.defineProperty(process, 'platform', {
            value: platform,
            writable: false,
            enumerable: true,
            configurable: true,
        });
    };
    // Restore original platform after each test
    afterEach(() => {
        Object.defineProperty(process, 'platform', {
            value: originalPlatform,
            writable: false,
            enumerable: true,
            configurable: true,
        });
    });
    test.each([
        ['darwin', 'open %u'],
        ['win32', 'start %u'],
        ['linux', 'xdg-open %u'],
        ['freebsd', 'xdg-open %u'],
    ])('for %s should return "%s"', async (platform, browser) => {
        mockPlatform(platform);
        const argv = await (0, parse_command_line_arguments_1.parseCommandLineArguments)(['docs']);
        expect(argv.browser).toBe(browser);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2UtY29tbWFuZC1saW5lLWFyZ3VtZW50cy50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicGFyc2UtY29tbWFuZC1saW5lLWFyZ3VtZW50cy50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkZBQXVGO0FBRXZGLElBQUksQ0FBQyxzQ0FBc0MsRUFBRSxLQUFLLElBQUksRUFBRTtJQUN0RCxNQUFNLElBQUksR0FBRyxNQUFNLElBQUEsd0RBQXlCLEVBQUMsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUMvRCxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNwQyxDQUFDLENBQUMsQ0FBQztBQUVILFFBQVEsQ0FBQyxVQUFVLEVBQUUsR0FBRyxFQUFFO0lBQ3hCLE1BQU0sZ0JBQWdCLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQztJQUMxQyxrQ0FBa0M7SUFDbEMsTUFBTSxZQUFZLEdBQUcsQ0FBQyxRQUFnQixFQUFFLEVBQUU7UUFDeEMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsVUFBVSxFQUFFO1lBQ3pDLEtBQUssRUFBRSxRQUFRO1lBQ2YsUUFBUSxFQUFFLEtBQUs7WUFDZixVQUFVLEVBQUUsSUFBSTtZQUNoQixZQUFZLEVBQUUsSUFBSTtTQUNuQixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7SUFFRiw0Q0FBNEM7SUFDNUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtRQUNiLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRTtZQUN6QyxLQUFLLEVBQUUsZ0JBQWdCO1lBQ3ZCLFFBQVEsRUFBRSxLQUFLO1lBQ2YsVUFBVSxFQUFFLElBQUk7WUFDaEIsWUFBWSxFQUFFLElBQUk7U0FDbkIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ1IsQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDO1FBQ3JCLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQztRQUNyQixDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUM7UUFDeEIsQ0FBQyxTQUFTLEVBQUUsYUFBYSxDQUFDO0tBQzNCLENBQUMsQ0FBQywyQkFBMkIsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxFQUFFO1FBQzFELFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN2QixNQUFNLElBQUksR0FBRyxNQUFNLElBQUEsd0RBQXlCLEVBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ3ZELE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3JDLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwYXJzZUNvbW1hbmRMaW5lQXJndW1lbnRzIH0gZnJvbSAnLi4vLi4vbGliL2NsaS9wYXJzZS1jb21tYW5kLWxpbmUtYXJndW1lbnRzJztcblxudGVzdCgnY2RrIGRlcGxveSAtUiBzZXRzIHJvbGxiYWNrIHRvIGZhbHNlJywgYXN5bmMgKCkgPT4ge1xuICBjb25zdCBhcmd2ID0gYXdhaXQgcGFyc2VDb21tYW5kTGluZUFyZ3VtZW50cyhbJ2RlcGxveScsICctUiddKTtcbiAgZXhwZWN0KGFyZ3Yucm9sbGJhY2spLnRvQmUoZmFsc2UpO1xufSk7XG5cbmRlc2NyaWJlKCdjZGsgZG9jcycsICgpID0+IHtcbiAgY29uc3Qgb3JpZ2luYWxQbGF0Zm9ybSA9IHByb2Nlc3MucGxhdGZvcm07XG4gIC8vIEhlbHBlciB0byBtb2NrIHByb2Nlc3MucGxhdGZvcm1cbiAgY29uc3QgbW9ja1BsYXRmb3JtID0gKHBsYXRmb3JtOiBzdHJpbmcpID0+IHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvY2VzcywgJ3BsYXRmb3JtJywge1xuICAgICAgdmFsdWU6IHBsYXRmb3JtLFxuICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB9KTtcbiAgfTtcblxuICAvLyBSZXN0b3JlIG9yaWdpbmFsIHBsYXRmb3JtIGFmdGVyIGVhY2ggdGVzdFxuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9jZXNzLCAncGxhdGZvcm0nLCB7XG4gICAgICB2YWx1ZTogb3JpZ2luYWxQbGF0Zm9ybSxcbiAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgfSk7XG4gIH0pO1xuXG4gIHRlc3QuZWFjaChbXG4gICAgWydkYXJ3aW4nLCAnb3BlbiAldSddLFxuICAgIFsnd2luMzInLCAnc3RhcnQgJXUnXSxcbiAgICBbJ2xpbnV4JywgJ3hkZy1vcGVuICV1J10sXG4gICAgWydmcmVlYnNkJywgJ3hkZy1vcGVuICV1J10sXG4gIF0pKCdmb3IgJXMgc2hvdWxkIHJldHVybiBcIiVzXCInLCBhc3luYyAocGxhdGZvcm0sIGJyb3dzZXIpID0+IHtcbiAgICBtb2NrUGxhdGZvcm0ocGxhdGZvcm0pO1xuICAgIGNvbnN0IGFyZ3YgPSBhd2FpdCBwYXJzZUNvbW1hbmRMaW5lQXJndW1lbnRzKFsnZG9jcyddKTtcbiAgICBleHBlY3QoYXJndi5icm93c2VyKS50b0JlKGJyb3dzZXIpO1xuICB9KTtcbn0pO1xuIl19