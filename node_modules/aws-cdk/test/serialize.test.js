"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable import/order */
const serialize_1 = require("../lib/serialize");
describe(serialize_1.toYAML, () => {
    test('does not wrap lines', () => {
        const longString = 'Long string is long!'.repeat(1024);
        expect((0, serialize_1.toYAML)({ longString })).toEqual(`longString: ${longString}\n`);
    });
});
describe(serialize_1.obscureTemplate, () => {
    test('removes CheckBootstrapVersion rule only', () => {
        const template = {
            Rules: {
                CheckBootstrapVersion: { Assertions: [{ AssertDescription: 'bootstrap' }] },
                MyOtherRule: { Assertions: [{ AssertDescription: 'other' }] },
            },
        };
        const obscured = (0, serialize_1.obscureTemplate)(template);
        expect(obscured).not.toHaveProperty('Rules.CheckBootstrapVersion');
        expect(obscured).toHaveProperty('Rules.MyOtherRule.Assertions.0.AssertDescription', 'other');
    });
    test('removes all rules when CheckBootstrapVersion is the only rule', () => {
        const template = {
            Rules: {
                CheckBootstrapVersion: { Assertions: [{ AssertDescription: 'bootstrap' }] },
            },
        };
        const obscured = (0, serialize_1.obscureTemplate)(template);
        expect(obscured).not.toHaveProperty('Rules.CheckBootstrapVersion');
        expect(obscured).not.toHaveProperty('Rules');
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VyaWFsaXplLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzZXJpYWxpemUudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlDQUFpQztBQUNqQyxnREFBMkQ7QUFFM0QsUUFBUSxDQUFDLGtCQUFNLEVBQUUsR0FBRyxFQUFFO0lBQ3BCLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxHQUFHLEVBQUU7UUFDL0IsTUFBTSxVQUFVLEdBQUcsc0JBQXNCLENBQUMsTUFBTSxDQUFDLElBQUssQ0FBQyxDQUFDO1FBQ3hELE1BQU0sQ0FBQyxJQUFBLGtCQUFNLEVBQUMsRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGVBQWUsVUFBVSxJQUFJLENBQUMsQ0FBQztJQUN4RSxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsUUFBUSxDQUFDLDJCQUFlLEVBQUUsR0FBRyxFQUFFO0lBQzdCLElBQUksQ0FBQyx5Q0FBeUMsRUFBRSxHQUFHLEVBQUU7UUFDbkQsTUFBTSxRQUFRLEdBQUc7WUFDZixLQUFLLEVBQUU7Z0JBQ0wscUJBQXFCLEVBQUUsRUFBRSxVQUFVLEVBQUUsQ0FBQyxFQUFFLGlCQUFpQixFQUFFLFdBQVcsRUFBRSxDQUFDLEVBQUU7Z0JBQzNFLFdBQVcsRUFBRSxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsaUJBQWlCLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRTthQUM5RDtTQUNGLENBQUM7UUFFRixNQUFNLFFBQVEsR0FBRyxJQUFBLDJCQUFlLEVBQUMsUUFBUSxDQUFDLENBQUM7UUFDM0MsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsNkJBQTZCLENBQUMsQ0FBQztRQUNuRSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsY0FBYyxDQUFDLGtEQUFrRCxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQy9GLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLCtEQUErRCxFQUFFLEdBQUcsRUFBRTtRQUN6RSxNQUFNLFFBQVEsR0FBRztZQUNmLEtBQUssRUFBRTtnQkFDTCxxQkFBcUIsRUFBRSxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsaUJBQWlCLEVBQUUsV0FBVyxFQUFFLENBQUMsRUFBRTthQUM1RTtTQUNGLENBQUM7UUFFRixNQUFNLFFBQVEsR0FBRyxJQUFBLDJCQUFlLEVBQUMsUUFBUSxDQUFDLENBQUM7UUFDM0MsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsNkJBQTZCLENBQUMsQ0FBQztRQUNuRSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMvQyxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgaW1wb3J0L29yZGVyICovXG5pbXBvcnQgeyB0b1lBTUwsIG9ic2N1cmVUZW1wbGF0ZSB9IGZyb20gJy4uL2xpYi9zZXJpYWxpemUnO1xuXG5kZXNjcmliZSh0b1lBTUwsICgpID0+IHtcbiAgdGVzdCgnZG9lcyBub3Qgd3JhcCBsaW5lcycsICgpID0+IHtcbiAgICBjb25zdCBsb25nU3RyaW5nID0gJ0xvbmcgc3RyaW5nIGlzIGxvbmchJy5yZXBlYXQoMV8wMjQpO1xuICAgIGV4cGVjdCh0b1lBTUwoeyBsb25nU3RyaW5nIH0pKS50b0VxdWFsKGBsb25nU3RyaW5nOiAke2xvbmdTdHJpbmd9XFxuYCk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKG9ic2N1cmVUZW1wbGF0ZSwgKCkgPT4ge1xuICB0ZXN0KCdyZW1vdmVzIENoZWNrQm9vdHN0cmFwVmVyc2lvbiBydWxlIG9ubHknLCAoKSA9PiB7XG4gICAgY29uc3QgdGVtcGxhdGUgPSB7XG4gICAgICBSdWxlczoge1xuICAgICAgICBDaGVja0Jvb3RzdHJhcFZlcnNpb246IHsgQXNzZXJ0aW9uczogW3sgQXNzZXJ0RGVzY3JpcHRpb246ICdib290c3RyYXAnIH1dIH0sXG4gICAgICAgIE15T3RoZXJSdWxlOiB7IEFzc2VydGlvbnM6IFt7IEFzc2VydERlc2NyaXB0aW9uOiAnb3RoZXInIH1dIH0sXG4gICAgICB9LFxuICAgIH07XG5cbiAgICBjb25zdCBvYnNjdXJlZCA9IG9ic2N1cmVUZW1wbGF0ZSh0ZW1wbGF0ZSk7XG4gICAgZXhwZWN0KG9ic2N1cmVkKS5ub3QudG9IYXZlUHJvcGVydHkoJ1J1bGVzLkNoZWNrQm9vdHN0cmFwVmVyc2lvbicpO1xuICAgIGV4cGVjdChvYnNjdXJlZCkudG9IYXZlUHJvcGVydHkoJ1J1bGVzLk15T3RoZXJSdWxlLkFzc2VydGlvbnMuMC5Bc3NlcnREZXNjcmlwdGlvbicsICdvdGhlcicpO1xuICB9KTtcblxuICB0ZXN0KCdyZW1vdmVzIGFsbCBydWxlcyB3aGVuIENoZWNrQm9vdHN0cmFwVmVyc2lvbiBpcyB0aGUgb25seSBydWxlJywgKCkgPT4ge1xuICAgIGNvbnN0IHRlbXBsYXRlID0ge1xuICAgICAgUnVsZXM6IHtcbiAgICAgICAgQ2hlY2tCb290c3RyYXBWZXJzaW9uOiB7IEFzc2VydGlvbnM6IFt7IEFzc2VydERlc2NyaXB0aW9uOiAnYm9vdHN0cmFwJyB9XSB9LFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgY29uc3Qgb2JzY3VyZWQgPSBvYnNjdXJlVGVtcGxhdGUodGVtcGxhdGUpO1xuICAgIGV4cGVjdChvYnNjdXJlZCkubm90LnRvSGF2ZVByb3BlcnR5KCdSdWxlcy5DaGVja0Jvb3RzdHJhcFZlcnNpb24nKTtcbiAgICBleHBlY3Qob2JzY3VyZWQpLm5vdC50b0hhdmVQcm9wZXJ0eSgnUnVsZXMnKTtcbiAgfSk7XG59KTtcbiJdfQ==