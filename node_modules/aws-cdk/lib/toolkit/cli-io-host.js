"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CliIoHost = exports.levelPriority = void 0;
exports.isCI = isCI;
const chalk = require("chalk");
exports.levelPriority = {
    error: 0,
    warn: 1,
    info: 2,
    debug: 3,
    trace: 4,
};
/**
 * A simple IO host for the CLI that writes messages to the console.
 */
class CliIoHost {
    /**
     * Returns the singleton instance
     */
    static instance(props = {}, forceNew = false) {
        if (forceNew || !CliIoHost._instance) {
            CliIoHost._instance = new CliIoHost(props);
        }
        return CliIoHost._instance;
    }
    constructor(props = {}) {
        this._currentAction = props.currentAction ?? 'none';
        this._isTTY = props.isTTY ?? process.stdout.isTTY ?? false;
        this._logLevel = props.logLevel ?? 'info';
        this._isCI = props.isCI ?? isCI();
    }
    /**
     * Returns the singleton instance
     */
    registerIoHost(ioHost) {
        if (ioHost !== this) {
            this._internalIoHost = ioHost;
        }
    }
    /**
     * The current action being performed by the CLI.
     */
    get currentAction() {
        return this._currentAction;
    }
    /**
     * Sets the current action being performed by the CLI.
     *
     * @param action The action being performed by the CLI.
     */
    set currentAction(action) {
        this._currentAction = action;
    }
    /**
     * Whether the host can use interactions and message styling.
     */
    get isTTY() {
        return this._isTTY;
    }
    /**
     * Set TTY mode, i.e can the host use interactions and message styling.
     *
     * @param value set TTY mode
     */
    set isTTY(value) {
        this._isTTY = value;
    }
    /**
     * Whether the CliIoHost is running in CI mode. In CI mode, all non-error output goes to stdout instead of stderr.
     */
    get isCI() {
        return this._isCI;
    }
    /**
     * Set the CI mode. In CI mode, all non-error output goes to stdout instead of stderr.
     * @param value set the CI mode
     */
    set isCI(value) {
        this._isCI = value;
    }
    /**
     * The current threshold. Messages with a lower priority level will be ignored.
     */
    get logLevel() {
        return this._logLevel;
    }
    /**
     * Sets the current threshold. Messages with a lower priority level will be ignored.
     * @param level The new log level threshold
     */
    set logLevel(level) {
        this._logLevel = level;
    }
    /**
     * Notifies the host of a message.
     * The caller waits until the notification completes.
     */
    async notify(msg) {
        if (this._internalIoHost) {
            return this._internalIoHost.notify(msg);
        }
        if (exports.levelPriority[msg.level] > exports.levelPriority[this.logLevel]) {
            return;
        }
        const output = this.formatMessage(msg);
        const stream = this.stream(msg.level, msg.forceStdout ?? false);
        return new Promise((resolve, reject) => {
            stream.write(output, (err) => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve();
                }
            });
        });
    }
    /**
     * Determines which output stream to use based on log level and configuration.
     */
    stream(level, forceStdout) {
        // For legacy purposes all log streams are written to stderr by default, unless
        // specified otherwise, by passing `forceStdout`, which is used by the `data()` logging function, or
        // if the CDK is running in a CI environment. This is because some CI environments will immediately
        // fail if stderr is written to. In these cases, we detect if we are in a CI environment and
        // write all messages to stdout instead.
        if (forceStdout) {
            return process.stdout;
        }
        if (level == 'error')
            return process.stderr;
        return CliIoHost.instance().isCI ? process.stdout : process.stderr;
    }
    /**
     * Notifies the host of a message that requires a response.
     *
     * If the host does not return a response the suggested
     * default response from the input message will be used.
     */
    async requestResponse(msg) {
        if (this._internalIoHost) {
            return this._internalIoHost.requestResponse(msg);
        }
        await this.notify(msg);
        return msg.defaultResponse;
    }
    /**
     * Formats a message for console output with optional color support
     */
    formatMessage(msg) {
        // apply provided style or a default style if we're in TTY mode
        let message_text = this._isTTY
            ? styleMap[msg.level](msg.message)
            : msg.message;
        // prepend timestamp if IoMessageLevel is DEBUG or TRACE. Postpend a newline.
        return ((msg.level === 'debug' || msg.level === 'trace')
            ? `[${this.formatTime(msg.time)}] ${message_text}`
            : message_text) + '\n';
    }
    /**
     * Formats date to HH:MM:SS
     */
    formatTime(d) {
        const pad = (n) => n.toString().padStart(2, '0');
        return `${pad(d.getHours())}:${pad(d.getMinutes())}:${pad(d.getSeconds())}`;
    }
}
exports.CliIoHost = CliIoHost;
const styleMap = {
    error: chalk.red,
    warn: chalk.yellow,
    info: chalk.white,
    debug: chalk.gray,
    trace: chalk.gray,
};
/**
 * Returns true if the current process is running in a CI environment
 * @returns true if the current process is running in a CI environment
 */
function isCI() {
    return process.env.CI !== undefined && process.env.CI !== 'false' && process.env.CI !== '0';
}
//# sourceMappingURL=data:application/json;base64,