"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.highlight = exports.success = exports.trace = exports.debug = exports.data = exports.info = exports.warning = exports.error = void 0;
exports.withCorkedLogging = withCorkedLogging;
const util = require("util");
const chalk = require("chalk");
const cli_io_host_1 = require("./toolkit/cli-io-host");
// Corking mechanism
let CORK_COUNTER = 0;
const logBuffer = [];
/**
 * Executes a block of code with corked logging. All log messages during execution
 * are buffered and only written when all nested cork blocks complete (when CORK_COUNTER reaches 0).
 * @param block - Async function to execute with corked logging
 * @returns Promise that resolves with the block's return value
 */
async function withCorkedLogging(block) {
    CORK_COUNTER++;
    try {
        return await block();
    }
    finally {
        CORK_COUNTER--;
        if (CORK_COUNTER === 0) {
            // Process each buffered message through notify
            for (const ioMessage of logBuffer) {
                void cli_io_host_1.CliIoHost.instance().notify(ioMessage);
            }
            logBuffer.splice(0);
        }
    }
}
/**
 * Internal core logging function that writes messages through the CLI IO host.
 * @param msg Configuration options for the log message. See  {@link LogMessage}
 */
function log(msg) {
    const ioMessage = {
        level: msg.level,
        message: msg.message,
        forceStdout: msg.forceStdout,
        time: new Date(),
        action: cli_io_host_1.CliIoHost.instance().currentAction,
        code: msg.code,
    };
    if (CORK_COUNTER > 0) {
        if (cli_io_host_1.levelPriority[msg.level] > cli_io_host_1.levelPriority[cli_io_host_1.CliIoHost.instance().logLevel]) {
            return;
        }
        logBuffer.push(ioMessage);
        return;
    }
    void cli_io_host_1.CliIoHost.instance().notify(ioMessage);
}
/**
 * Internal helper that processes log inputs into a consistent format.
 * Handles string interpolation, format strings, and object parameter styles.
 * Applies optional styling and prepares the final message for logging.
 */
function formatMessageAndLog(level, forceStdout, input, style, ...args) {
    // Extract message and code from input, using new default code format
    const { message, code = getDefaultCode(level) } = typeof input === 'object' ? input : { message: input };
    // Format message if args are provided
    const formattedMessage = args.length > 0
        ? util.format(message, ...args)
        : message;
    // Apply style if provided
    const finalMessage = style ? style(formattedMessage) : formattedMessage;
    log({
        level,
        message: finalMessage,
        code,
        forceStdout,
    });
}
function getDefaultCode(level, category = 'TOOLKIT') {
    const levelIndicator = level === 'error' ? 'E' :
        level === 'warn' ? 'W' :
            'I';
    return `CDK_${category}_${levelIndicator}0000`;
}
// Exported logging functions. If any additional logging functionality is required, it should be added as
// a new logging function here.
/**
 * Logs an error level message.
 *
 * Can be used in multiple ways:
 * ```ts
 * error(`operation failed: ${e}`) // infers default error code `CDK_TOOLKIT_E000`
 * error('operation failed: %s', e) // infers default error code `CDK_TOOLKIT_E000`
 * error({ message: 'operation failed', code: 'CDK_SDK_E001' }) // specifies error code `CDK_SDK_E001`
 * error({ message: 'operation failed: %s', code: 'CDK_SDK_E001' }, e) // specifies error code `CDK_SDK_E001`
 * ```
 */
const error = (input, ...args) => {
    return formatMessageAndLog('error', false, input, undefined, ...args);
};
exports.error = error;
/**
 * Logs an warning level message.
 *
 * Can be used in multiple ways:
 * ```ts
 * warning(`deprected feature: ${message}`) // infers default warning code `CDK_TOOLKIT_W000`
 * warning('deprected feature: %s', message) // infers default warning code `CDK_TOOLKIT_W000`
 * warning({ message: 'deprected feature', code: 'CDK_SDK_W001' }) // specifies warning code `CDK_SDK_W001`
 * warning({ message: 'deprected feature: %s', code: 'CDK_SDK_W001' }, message) // specifies warning code `CDK_SDK_W001`
 * ```
 */
const warning = (input, ...args) => {
    return formatMessageAndLog('warn', false, input, undefined, ...args);
};
exports.warning = warning;
/**
 * Logs an info level message.
 *
 * Can be used in multiple ways:
 * ```ts
 * info(`processing: ${message}`) // infers default info code `CDK_TOOLKIT_I000`
 * info('processing: %s', message) // infers default info code `CDK_TOOLKIT_I000`
 * info({ message: 'processing', code: 'CDK_TOOLKIT_I001' }) // specifies info code `CDK_TOOLKIT_I001`
 * info({ message: 'processing: %s', code: 'CDK_TOOLKIT_I001' }, message) // specifies info code `CDK_TOOLKIT_I001`
 * ```
 */
const info = (input, ...args) => {
    return formatMessageAndLog('info', false, input, undefined, ...args);
};
exports.info = info;
/**
 * Logs an info level message to stdout.
 *
 * Can be used in multiple ways:
 * ```ts
 * data(`${JSON.stringify(stats)}`) // infers default info code `CDK_TOOLKIT_I000`
 * data('{"count": %d}', count) // infers default info code `CDK_TOOLKIT_I000`
 * data({ message: 'stats: %j', code: 'CDK_DATA_I001' }) // specifies info code `CDK_DATA_I001`
 * data({ message: 'stats: %j', code: 'CDK_DATA_I001' }, stats) // specifies info code `CDK_DATA_I001`
 * ```
 */
const data = (input, ...args) => {
    return formatMessageAndLog('info', true, input, undefined, ...args);
};
exports.data = data;
/**
 * Logs a debug level message.
 *
 * Can be used in multiple ways:
 * ```ts
 * debug(`state: ${JSON.stringify(state)}`) // infers default info code `CDK_TOOLKIT_I000`
 * debug('cache hit ratio: %d%%', ratio) // infers default info code `CDK_TOOLKIT_I000`
 * debug({ message: 'state update', code: 'CDK_TOOLKIT_I001' }) // specifies info code `CDK_TOOLKIT_I001`
 * debug({ message: 'ratio: %d%%', code: 'CDK_TOOLKIT_I001' }, ratio) // specifies info code `CDK_TOOLKIT_I001`
 * ```
 */
const debug = (input, ...args) => {
    return formatMessageAndLog('debug', false, input, undefined, ...args);
};
exports.debug = debug;
/**
 * Logs a trace level message.
 *
 * Can be used in multiple ways:
 * ```ts
 * trace(`entered ${name} with ${args}`) // infers default info code `CDK_TOOLKIT_I000`
 * trace('method: %s, args: %j', name, args) // infers default info code `CDK_TOOLKIT_I000`
 * trace({ message: 'entered', code: 'CDK_TOOLKIT_I001' }) // specifies info code `CDK_TOOLKIT_I001`
 * trace({ message: 'method: %s', code: 'CDK_TOOLKIT_I001' }, name) // specifies info code `CDK_TOOLKIT_I001`
 * ```
 */
const trace = (input, ...args) => {
    return formatMessageAndLog('trace', false, input, undefined, ...args);
};
exports.trace = trace;
/**
 * Logs an info level success message in green text.
 *
 * Can be used in multiple ways:
 * ```ts
 * success(`deployment completed: ${name}`) // infers default info code `CDK_TOOLKIT_I000`
 * success('processed %d items', count) // infers default info code `CDK_TOOLKIT_I000`
 * success({ message: 'completed', code: 'CDK_TOOLKIT_I001' }) // specifies info code `CDK_TOOLKIT_I001`
 * success({ message: 'items: %d', code: 'CDK_TOOLKIT_I001' }, count) // specifies info code `CDK_TOOLKIT_I001`
 * ```
 */
const success = (input, ...args) => {
    return formatMessageAndLog('info', false, input, chalk.green, ...args);
};
exports.success = success;
/**
 * Logs an info level message in bold text.
 *
 * Can be used in multiple ways:
 * ```ts
 * highlight(`important: ${msg}`) // infers default info code `CDK_TOOLKIT_I000`
 * highlight('attention required: %s', reason) // infers default info code `CDK_TOOLKIT_I000`
 * highlight({ message: 'notice', code: 'CDK_TOOLKIT_I001' }) // specifies info code `CDK_TOOLKIT_I001`
 * highlight({ message: 'notice: %s', code: 'CDK_TOOLKIT_I001' }, msg) // specifies info code `CDK_TOOLKIT_I001`
 * ```
 */
const highlight = (input, ...args) => {
    return formatMessageAndLog('info', false, input, chalk.bold, ...args);
};
exports.highlight = highlight;
//# sourceMappingURL=data:application/json;base64,